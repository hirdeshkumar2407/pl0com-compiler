Compiler arguments: ['main.py']

--- Compiling Program ---
Input Program Snippet:
--------------------
VAR x, y, squ;
VAR arr[5]: char;
var multid[5][5]: short;
{ New variables for loop tests }
VAR i, j, k, m, n, p, q, sum, r;
VAR sm_idx;                 { Loop counter for strip mining test (sm = strip...
--------------------
--- Starting Compilation ---

--- Parsing Program ---
start <function Parser.program at 0x743151c57670>
getsym: varsym var
start <function Parser.block at 0x743151c57310>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident y
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident squ
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident arr
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident char
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident multid
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident short
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident i
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident j
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident k
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident m
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident n
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident p
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident q
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident sum
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x743151c57550>
accepting comma == comma
getsym: ident r
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_idx
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_source_arr
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 128
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident int
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_dest_arr
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 128
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident int
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: procsym procedure
accepting constsym == procsym
accepting varsym == procsym
accepting procsym == procsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
start <function Parser.block at 0x743151c57310>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident test
start <function Parser.vardef at 0x743151c57550>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x743151c57550>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident test
StatList : new 127755174517200
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up test
Looking up test
expecting becomes
accepting becomes == becomes
getsym: number 1234
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174517440 of type <class 'ir.AssignStat'> to 127755174517200
accepting semicolon == semicolon
getsym: ident squ
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up squ
Looking up squ
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: times *
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
getsym: ident x
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174517728 of type <class 'ir.AssignStat'> to 127755174517200
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174517200 : [ 127755174517440 127755174517728 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.block at 0x743151c57310>
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
Looking up square
accepting procsym == beginsym
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 127755174517872
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: minus -
start <function Parser.expression at 0x743151c5af70>
getsym: number 1
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174518208 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: read read
start <function Parser.statement at 0x743151c571f0>
accepting ident == read
accepting callsym == read
accepting beginsym == read
accepting ifsym == read
accepting whilesym == read
accepting forsym == read
accepting print == read
accepting read == read
getsym: ident x
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174518304 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x743151c571f0>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: ident x
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == ident
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: gtr >
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 100
condition operator gtr number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755174518640
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: minus -
start <function Parser.expression at 0x743151c5af70>
getsym: ident x
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174523088 of type <class 'ir.PrintStat'> to 127755174518640
expecting endsym
accepting endsym == endsym
getsym: elsesym else
StatList 127755174518640 : [ 127755174523088 ]
end <function Parser.statement at 0x743151c571f0>
accepting elsesym == elsesym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755174523184
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174523376 of type <class 'ir.PrintStat'> to 127755174523184
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174523184 : [ 127755174523376 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174523472 of type <class 'ir.IfStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174523616 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x743151c571f0>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == ident
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 10
condition operator leq number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: callsym call
StatList : new 127755174523952
start <function Parser.statement at 0x743151c571f0>
accepting ident == callsym
accepting callsym == callsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up square
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174524144 of type <class 'ir.CallStat'> to 127755174523952
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 1
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174524528 of type <class 'ir.AssignStat'> to 127755174523952
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident squ
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: endsym end
Looking up squ
Looking up squ
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174524672 of type <class 'ir.PrintStat'> to 127755174523952
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174523952 : [ 127755174524144 127755174524528 127755174524672 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174524768 of type <class 'ir.WhileStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 101
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174524912 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x743151c571f0>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == ident
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 105
condition operator leq number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident arr
StatList : new 127755174525296
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 100
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174525968 of type <class 'ir.AssignStat'> to 127755174525296
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 100
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174526496 of type <class 'ir.PrintStat'> to 127755174525296
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 1
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174526928 of type <class 'ir.AssignStat'> to 127755174525296
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174525296 : [ 127755174525968 127755174526496 127755174526928 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174530592 of type <class 'ir.WhileStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174529632 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174527136 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x743151c571f0>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == ident
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: whilesym while
StatList : new 127755174527424
start <function Parser.statement at 0x743151c571f0>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident y
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == ident
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: leq <=
Looking up y
Looking up y
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident multid
StatList : new 127755174527808
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174528912 of type <class 'ir.AssignStat'> to 127755174527808
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident multid
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174153520 of type <class 'ir.PrintStat'> to 127755174527808
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 1
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174151312 of type <class 'ir.AssignStat'> to 127755174527808
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: ident y
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up y
Looking up y
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: number 1
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174150400 of type <class 'ir.AssignStat'> to 127755174527808
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 127755174527808 : [ 127755174528912 127755174153520 127755174151312 127755174150400 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174150448 of type <class 'ir.WhileStat'> to 127755174527424
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174527424 : [ 127755174150448 ]
end <function Parser.statement at 0x743151c571f0>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174150496 of type <class 'ir.WhileStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident a
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int a' and body_symtab for 'a'
FOR LOOP - Variable symbol: auto int a
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 20
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173855344
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident a
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up a
Looking up a
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173855536 of type <class 'ir.PrintStat'> to 127755173855344
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173855344 : [ 127755173855536 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173856208 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident i
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up i
Looking up i
expecting becomes
accepting becomes == becomes
getsym: number 10
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173856352 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99991
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173856448 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int i' and body_symtab for 'i'
FOR LOOP - Variable symbol: auto int i
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 15
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173856784
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident i
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up i
Looking up i
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173856976 of type <class 'ir.PrintStat'> to 127755173856784
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173856784 : [ 127755173856976 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173857648 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88881
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173857840 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99992
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173858032 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident j
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int j' and body_symtab for 'j'
FOR LOOP - Variable symbol: auto int j
expecting becomes
accepting becomes == becomes
getsym: number 5
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173858368
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident j
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up j
Looking up j
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173858560 of type <class 'ir.PrintStat'> to 127755173858368
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173858368 : [ 127755173858560 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173859232 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88882
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173888112 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99993
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173888304 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident k
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int k' and body_symtab for 'k'
FOR LOOP - Variable symbol: auto int k
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173888640
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 77777
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173888832 of type <class 'ir.PrintStat'> to 127755173888640
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident k
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up k
Looking up k
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173889024 of type <class 'ir.PrintStat'> to 127755173888640
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173888640 : [ 127755173888832 127755173889024 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173889696 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88883
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173889888 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99994
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173890080 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident m
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int m' and body_symtab for 'm'
FOR LOOP - Variable symbol: auto int m
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 6
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173890416
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident m
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up m
Looking up m
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173890608 of type <class 'ir.PrintStat'> to 127755173890416
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173890416 : [ 127755173890608 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173891280 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88884
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173891424 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99995
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173891616 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident n
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int n' and body_symtab for 'n'
FOR LOOP - Variable symbol: auto int n
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 7
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173891952
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident n
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up n
Looking up n
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173892208 of type <class 'ir.PrintStat'> to 127755173891952
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173891952 : [ 127755173892208 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173892880 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88885
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173893024 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99996
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173893264 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident p
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int p' and body_symtab for 'p'
FOR LOOP - Variable symbol: auto int p
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 12
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755173893600
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident p
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up p
Looking up p
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173893792 of type <class 'ir.PrintStat'> to 127755173893600
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173893600 : [ 127755173893792 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173894464 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88886
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173894608 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident sum
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173894800 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99997
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173894896 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident q
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int q' and body_symtab for 'q'
FOR LOOP - Variable symbol: auto int q
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident sum
StatList : new 127755173895232
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: ident sum
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up sum
Looking up sum
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: ident q
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173895616 of type <class 'ir.AssignStat'> to 127755173895232
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident q
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173895760 of type <class 'ir.PrintStat'> to 127755173895232
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173895952 of type <class 'ir.PrintStat'> to 127755173895232
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755173895232 : [ 127755173895616 127755173895760 127755173895952 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173823392 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173826128 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88887
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173826320 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 100
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755173826512 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99998
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174457104 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident r
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int r' and body_symtab for 'r'
FOR LOOP - Variable symbol: auto int r
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 3
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 127755174453456
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: ident r
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up r
Looking up r
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174453840 of type <class 'ir.AssignStat'> to 127755174453456
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174453984 of type <class 'ir.PrintStat'> to 127755174453456
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174453456 : [ 127755174453840 127755174453984 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174455616 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174455472 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88888
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174455280 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 999990
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174455088 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ident sm_idx
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: becomes :=
Looking up sm_idx
Looking up sm_idx
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174454896 of type <class 'ir.AssignStat'> to 127755174517872
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x743151c571f0>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident sm_idx
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int sm_idx' and body_symtab for 'sm_idx'
FOR LOOP - Variable symbol: auto int sm_idx
expecting becomes
accepting becomes == becomes
getsym: number 0
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 127
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident sm_dest_arr
StatList : new 127755174454656
start <function Parser.statement at 0x743151c571f0>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: ident sm_idx
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident sm_source_arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up sm_source_arr
Looking up sm_source_arr
expecting lspar
accepting lspar == lspar
getsym: ident sm_idx
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: rspar ]
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: plus +
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
getsym: ident sm_idx
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: semicolon ;
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174795728 of type <class 'ir.AssignStat'> to 127755174454656
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174454656 : [ 127755174795728 ]
end <function Parser.statement at 0x743151c571f0>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174796304 of type <class 'ir.ForStat'> to 127755174517872
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x743151c571f0>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: number 127
start <function Parser.condition at 0x743151c570d0>
accepting oddsym == number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: geq >=
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
getsym: number 0
condition operator geq number
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.condition at 0x743151c570d0>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x743151c571f0>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 127755174796640
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 76543
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174797168 of type <class 'ir.PrintStat'> to 127755174796640
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 0
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174796736 of type <class 'ir.PrintStat'> to 127755174796640
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 64
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174794816 of type <class 'ir.PrintStat'> to 127755174796640
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 127
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174794336 of type <class 'ir.PrintStat'> to 127755174796640
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 127755174796640 : [ 127755174797168 127755174796736 127755174794816 127755174794336 ]
end <function Parser.statement at 0x743151c571f0>
accepting elsesym == semicolon
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755174794192 of type <class 'ir.IfStat'> to 127755174517872
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x743151c571f0>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 888880
start <function Parser.expression at 0x743151c5af70>
start <function Parser.term at 0x743151c5ae50>
start <function Parser.factor at 0x743151c5ad30>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x743151c5ad30>
end <function Parser.term at 0x743151c5ae50>
end <function Parser.expression at 0x743151c5af70>
end <function Parser.statement at 0x743151c571f0>
StatList: appending 127755179963296 of type <class 'ir.PrintStat'> to 127755174517872
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: period .
StatList
end <function Parser.statement at 0x743151c571f0>
end <function Parser.block at 0x743151c57310>
expecting period
accepting period == period
end <function Parser.program at 0x743151c57670>

--- Initial IR Tree (from Parser) ---
<class 'ir.Block'> 127755175744896 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 127755174791920 {
	parent = 127755175744896
		children:
		<class 'ir.FunctionDef'> 127755174515184 {
		parent = 127755174791920
			body: 	<class 'ir.Block'> 127755174517776 {
			parent = 127755174515184
				defs: 	<class 'ir.DefinitionList'> 127755174517056 {
				parent = 127755174517776
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				body: 	<class 'ir.StatList'> 127755174517200 {
				parent = 127755174517776
					children:
					<class 'ir.AssignStat'> 127755174517440 {
					parent = 127755174517200
						offset: 	None
						expr: 	<class 'ir.Const'> 127755174517344 {
						parent = 127755174517440
							value: 	1234
							symbol: 	None
						}
						symbol: 	auto int test
					}
					<class 'ir.AssignStat'> 127755174517728 {
					parent = 127755174517200
						offset: 	None
						expr: 	<class 'ir.BinExpr'> 127755174517632 {
						parent = 127755174517728
							children:
							'times'
							<class 'ir.Var'> 127755174517488 {
							parent = 127755174517632
								symbol: 	global int x
							}
							<class 'ir.Var'> 127755174517248 {
							parent = 127755174517632
								symbol: 	global int x
							}
						}
						symbol: 	global int squ
					}
				}
			}
			symbol: 	auto function square
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 127755174517872 {
	parent = 127755175744896
		children:
		<class 'ir.AssignStat'> 127755174518208 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.UnExpr'> 127755174518112 {
			parent = 127755174518208
				children:
				'minus'
				<class 'ir.Const'> 127755174518016 {
				parent = 127755174518112
					value: 	1
					symbol: 	None
				}
			}
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 127755174518304 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.ReadStat'> 127755174518256 {
			parent = 127755174518304
			}
			symbol: 	global int x
		}
		<class 'ir.IfStat'> 127755174523472 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174518544 {
			parent = 127755174523472
				children:
				'gtr'
				<class 'ir.Var'> 127755174518352 {
				parent = 127755174518544
					symbol: 	global int x
				}
				<class 'ir.Const'> 127755174518448 {
				parent = 127755174518544
					value: 	100
					symbol: 	None
				}
			}
			thenpart: 	<class 'ir.StatList'> 127755174518640 {
			parent = 127755174523472
				children:
				<class 'ir.PrintStat'> 127755174523088 {
				parent = 127755174518640
					children:
					<class 'ir.UnExpr'> 127755174522992 {
					parent = 127755174523088
						children:
						'minus'
						<class 'ir.Var'> 127755174518736 {
						parent = 127755174522992
							symbol: 	global int x
						}
					}
					expr: 	<class 'ir.UnExpr'> 127755174522992 {
					parent = 127755174523088
						children:
						'minus'
						<class 'ir.Var'> 127755174518736 {
						parent = 127755174522992
							symbol: 	global int x
						}
					}
				}
			}
			elsepart: 	<class 'ir.StatList'> 127755174523184 {
			parent = 127755174523472
				children:
				<class 'ir.PrintStat'> 127755174523376 {
				parent = 127755174523184
					children:
					<class 'ir.Var'> 127755174523280 {
					parent = 127755174523376
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 127755174523280 {
					parent = 127755174523376
						symbol: 	global int x
					}
				}
			}
		}
		<class 'ir.AssignStat'> 127755174523616 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174523520 {
			parent = 127755174523616
				value: 	1
				symbol: 	None
			}
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 127755174524768 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174523856 {
			parent = 127755174524768
				children:
				'leq'
				<class 'ir.Var'> 127755174523664 {
				parent = 127755174523856
					symbol: 	global int x
				}
				<class 'ir.Const'> 127755174523760 {
				parent = 127755174523856
					value: 	10
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 127755174523952 {
			parent = 127755174524768
				children:
				<class 'ir.CallStat'> 127755174524144 {
				parent = 127755174523952
					call: 	<class 'ir.CallExpr'> 127755174524048 {
					parent = 127755174524144
						symbol: 	auto function square
					}
				}
				<class 'ir.AssignStat'> 127755174524528 {
				parent = 127755174523952
					offset: 	None
					expr: 	<class 'ir.BinExpr'> 127755174524432 {
					parent = 127755174524528
						children:
						'plus'
						<class 'ir.Var'> 127755174524240 {
						parent = 127755174524432
							symbol: 	global int x
						}
						<class 'ir.Const'> 127755174524336 {
						parent = 127755174524432
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 127755174524672 {
				parent = 127755174523952
					children:
					<class 'ir.Var'> 127755174524576 {
					parent = 127755174524672
						symbol: 	global int squ
					}
					expr: 	<class 'ir.Var'> 127755174524576 {
					parent = 127755174524672
						symbol: 	global int squ
					}
				}
			}
		}
		<class 'ir.AssignStat'> 127755174524912 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174524816 {
			parent = 127755174524912
				value: 	101
				symbol: 	None
			}
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 127755174530592 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174525152 {
			parent = 127755174530592
				children:
				'leq'
				<class 'ir.Var'> 127755174524960 {
				parent = 127755174525152
					symbol: 	global int x
				}
				<class 'ir.Const'> 127755174525056 {
				parent = 127755174525152
					value: 	105
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 127755174525296 {
			parent = 127755174530592
				children:
				<class 'ir.AssignStat'> 127755174525968 {
				parent = 127755174525296
					offset: 	<class 'ir.BinExpr'> 127755174525824 {
					parent = 127755174525968
						children:
						'times'
						<class 'ir.BinExpr'> 127755174525632 {
						parent = 127755174525824
							children:
							'minus'
							<class 'ir.Var'> 127755174525392 {
							parent = 127755174525632
								symbol: 	global int x
							}
							<class 'ir.Const'> 127755174525536 {
							parent = 127755174525632
								value: 	100
								symbol: 	None
							}
						}
						<class 'ir.Const'> 127755174525440 {
						parent = 127755174525824
							value: 	1
							symbol: 	None
						}
					}
					expr: 	<class 'ir.Var'> 127755174525728 {
					parent = 127755174525968
						symbol: 	global int x
					}
					symbol: 	global char[5] arr
				}
				<class 'ir.PrintStat'> 127755174526496 {
				parent = 127755174525296
					children:
					<class 'ir.ArrayElement'> 127755174526304 {
					parent = 127755174526496
						children:
						<class 'ir.BinExpr'> 127755174526400 {
						parent = 127755174526304
							children:
							'times'
							<class 'ir.BinExpr'> 127755174526208 {
							parent = 127755174526400
								children:
								'minus'
								<class 'ir.Var'> 127755174515424 {
								parent = 127755174526208
									symbol: 	global int x
								}
								<class 'ir.Const'> 127755174526112 {
								parent = 127755174526208
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 127755174526016 {
							parent = 127755174526400
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174526400 {
						parent = 127755174526304
							children:
							'times'
							<class 'ir.BinExpr'> 127755174526208 {
							parent = 127755174526400
								children:
								'minus'
								<class 'ir.Var'> 127755174515424 {
								parent = 127755174526208
									symbol: 	global int x
								}
								<class 'ir.Const'> 127755174526112 {
								parent = 127755174526208
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 127755174526016 {
							parent = 127755174526400
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
					expr: 	<class 'ir.ArrayElement'> 127755174526304 {
					parent = 127755174526496
						children:
						<class 'ir.BinExpr'> 127755174526400 {
						parent = 127755174526304
							children:
							'times'
							<class 'ir.BinExpr'> 127755174526208 {
							parent = 127755174526400
								children:
								'minus'
								<class 'ir.Var'> 127755174515424 {
								parent = 127755174526208
									symbol: 	global int x
								}
								<class 'ir.Const'> 127755174526112 {
								parent = 127755174526208
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 127755174526016 {
							parent = 127755174526400
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174526400 {
						parent = 127755174526304
							children:
							'times'
							<class 'ir.BinExpr'> 127755174526208 {
							parent = 127755174526400
								children:
								'minus'
								<class 'ir.Var'> 127755174515424 {
								parent = 127755174526208
									symbol: 	global int x
								}
								<class 'ir.Const'> 127755174526112 {
								parent = 127755174526208
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 127755174526016 {
							parent = 127755174526400
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
				}
				<class 'ir.AssignStat'> 127755174526928 {
				parent = 127755174525296
					offset: 	None
					expr: 	<class 'ir.BinExpr'> 127755174526832 {
					parent = 127755174526928
						children:
						'plus'
						<class 'ir.Var'> 127755174526640 {
						parent = 127755174526832
							symbol: 	global int x
						}
						<class 'ir.Const'> 127755174526736 {
						parent = 127755174526832
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global int x
				}
			}
		}
		<class 'ir.AssignStat'> 127755174529632 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174530496 {
			parent = 127755174529632
				value: 	1
				symbol: 	None
			}
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 127755174527136 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174527040 {
			parent = 127755174527136
				value: 	1
				symbol: 	None
			}
			symbol: 	global int y
		}
		<class 'ir.WhileStat'> 127755174150496 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174527328 {
			parent = 127755174150496
				children:
				'leq'
				<class 'ir.Var'> 127755174514896 {
				parent = 127755174527328
					symbol: 	global int x
				}
				<class 'ir.Const'> 127755174527232 {
				parent = 127755174527328
					value: 	5
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 127755174527424 {
			parent = 127755174150496
				children:
				<class 'ir.WhileStat'> 127755174150448 {
				parent = 127755174527424
					cond: 	<class 'ir.BinExpr'> 127755174527712 {
					parent = 127755174150448
						children:
						'leq'
						<class 'ir.Var'> 127755174527520 {
						parent = 127755174527712
							symbol: 	global int y
						}
						<class 'ir.Const'> 127755174527616 {
						parent = 127755174527712
							value: 	5
							symbol: 	None
						}
					}
					body: 	<class 'ir.StatList'> 127755174527808 {
					parent = 127755174150448
						children:
						<class 'ir.AssignStat'> 127755174528912 {
						parent = 127755174527808
							offset: 	<class 'ir.BinExpr'> 127755174528528 {
							parent = 127755174528912
								children:
								'plus'
								<class 'ir.BinExpr'> 127755174528240 {
								parent = 127755174528528
									children:
									'times'
									<class 'ir.Var'> 127755174527904 {
									parent = 127755174528240
										symbol: 	global int x
									}
									<class 'ir.Const'> 127755174527952 {
									parent = 127755174528240
										value: 	10
										symbol: 	None
									}
								}
								<class 'ir.BinExpr'> 127755174528432 {
								parent = 127755174528528
									children:
									'times'
									<class 'ir.Var'> 127755174528048 {
									parent = 127755174528432
										symbol: 	global int y
									}
									<class 'ir.Const'> 127755174528336 {
									parent = 127755174528432
										value: 	2
										symbol: 	None
									}
								}
							}
							expr: 	<class 'ir.ArrayElement'> 127755174528720 {
							parent = 127755174528912
								children:
								<class 'ir.BinExpr'> 127755174528816 {
								parent = 127755174528720
									children:
									'times'
									<class 'ir.Var'> 127755174528144 {
									parent = 127755174528816
										symbol: 	global int x
									}
									<class 'ir.Const'> 127755174528624 {
									parent = 127755174528816
										value: 	1
										symbol: 	None
									}
								}
								offset: 	<class 'ir.BinExpr'> 127755174528816 {
								parent = 127755174528720
									children:
									'times'
									<class 'ir.Var'> 127755174528144 {
									parent = 127755174528816
										symbol: 	global int x
									}
									<class 'ir.Const'> 127755174528624 {
									parent = 127755174528816
										value: 	1
										symbol: 	None
									}
								}
								symbol: 	global char[5] arr
							}
							symbol: 	global short[5, 5] multid
						}
						<class 'ir.PrintStat'> 127755174153520 {
						parent = 127755174527808
							children:
							<class 'ir.ArrayElement'> 127755174529200 {
							parent = 127755174153520
								children:
								<class 'ir.BinExpr'> 127755174153856 {
								parent = 127755174529200
									children:
									'plus'
									<class 'ir.BinExpr'> 127755174529296 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174515616 {
										parent = 127755174529296
											symbol: 	global int x
										}
										<class 'ir.Const'> 127755174529008 {
										parent = 127755174529296
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 127755174529488 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174529104 {
										parent = 127755174529488
											symbol: 	global int y
										}
										<class 'ir.Const'> 127755174529392 {
										parent = 127755174529488
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 127755174153856 {
								parent = 127755174529200
									children:
									'plus'
									<class 'ir.BinExpr'> 127755174529296 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174515616 {
										parent = 127755174529296
											symbol: 	global int x
										}
										<class 'ir.Const'> 127755174529008 {
										parent = 127755174529296
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 127755174529488 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174529104 {
										parent = 127755174529488
											symbol: 	global int y
										}
										<class 'ir.Const'> 127755174529392 {
										parent = 127755174529488
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
							expr: 	<class 'ir.ArrayElement'> 127755174529200 {
							parent = 127755174153520
								children:
								<class 'ir.BinExpr'> 127755174153856 {
								parent = 127755174529200
									children:
									'plus'
									<class 'ir.BinExpr'> 127755174529296 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174515616 {
										parent = 127755174529296
											symbol: 	global int x
										}
										<class 'ir.Const'> 127755174529008 {
										parent = 127755174529296
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 127755174529488 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174529104 {
										parent = 127755174529488
											symbol: 	global int y
										}
										<class 'ir.Const'> 127755174529392 {
										parent = 127755174529488
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 127755174153856 {
								parent = 127755174529200
									children:
									'plus'
									<class 'ir.BinExpr'> 127755174529296 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174515616 {
										parent = 127755174529296
											symbol: 	global int x
										}
										<class 'ir.Const'> 127755174529008 {
										parent = 127755174529296
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 127755174529488 {
									parent = 127755174153856
										children:
										'times'
										<class 'ir.Var'> 127755174529104 {
										parent = 127755174529488
											symbol: 	global int y
										}
										<class 'ir.Const'> 127755174529392 {
										parent = 127755174529488
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
						}
						<class 'ir.AssignStat'> 127755174151312 {
						parent = 127755174527808
							offset: 	None
							expr: 	<class 'ir.BinExpr'> 127755174151744 {
							parent = 127755174151312
								children:
								'plus'
								<class 'ir.Var'> 127755174152560 {
								parent = 127755174151744
									symbol: 	global int x
								}
								<class 'ir.Const'> 127755174151936 {
								parent = 127755174151744
									value: 	1
									symbol: 	None
								}
							}
							symbol: 	global int x
						}
						<class 'ir.AssignStat'> 127755174150400 {
						parent = 127755174527808
							offset: 	None
							expr: 	<class 'ir.BinExpr'> 127755174150304 {
							parent = 127755174150400
								children:
								'plus'
								<class 'ir.Var'> 127755174150832 {
								parent = 127755174150304
									symbol: 	global int y
								}
								<class 'ir.Const'> 127755174150208 {
								parent = 127755174150304
									value: 	1
									symbol: 	None
								}
							}
							symbol: 	global int y
						}
					}
				}
			}
		}
		<class 'ir.ForStat'> 127755173856208 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173855776 {
			parent = 127755173856208
				children:
				'leq'
				<class 'ir.Var'> 127755173855680 {
				parent = 127755173855776
					symbol: 	auto int a
				}
				<class 'ir.Const'> 127755174150688 {
				parent = 127755173855776
					value: 	20
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173856160 {
			parent = 127755173856208
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173856064 {
				parent = 127755173856160
					children:
					'plus'
					<class 'ir.Var'> 127755173855872 {
					parent = 127755173856064
						symbol: 	auto int a
					}
					<class 'ir.Const'> 127755173855968 {
					parent = 127755173856064
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int a
			}
			body: 	<class 'ir.StatList'> 127755173855344 {
			parent = 127755173856208
				children:
				<class 'ir.PrintStat'> 127755173855536 {
				parent = 127755173855344
					children:
					<class 'ir.Var'> 127755173855440 {
					parent = 127755173855536
						symbol: 	auto int a
					}
					expr: 	<class 'ir.Var'> 127755173855440 {
					parent = 127755173855536
						symbol: 	auto int a
					}
				}
			}
		}
		<class 'ir.AssignStat'> 127755173856352 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173856256 {
			parent = 127755173856352
				value: 	10
				symbol: 	None
			}
			symbol: 	global int i
		}
		<class 'ir.PrintStat'> 127755173856448 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755174515712 {
			parent = 127755173856448
				value: 	99991
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755174515712 {
			parent = 127755173856448
				value: 	99991
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173857648 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173857216 {
			parent = 127755173857648
				children:
				'leq'
				<class 'ir.Var'> 127755173857120 {
				parent = 127755173857216
					symbol: 	auto int i
				}
				<class 'ir.Const'> 127755173856688 {
				parent = 127755173857216
					value: 	15
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173857600 {
			parent = 127755173857648
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173857504 {
				parent = 127755173857600
					children:
					'plus'
					<class 'ir.Var'> 127755173857312 {
					parent = 127755173857504
						symbol: 	auto int i
					}
					<class 'ir.Const'> 127755173857408 {
					parent = 127755173857504
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int i
			}
			body: 	<class 'ir.StatList'> 127755173856784 {
			parent = 127755173857648
				children:
				<class 'ir.PrintStat'> 127755173856976 {
				parent = 127755173856784
					children:
					<class 'ir.Var'> 127755173856880 {
					parent = 127755173856976
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 127755173856880 {
					parent = 127755173856976
						symbol: 	global int i
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173857840 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173857696 {
			parent = 127755173857840
				value: 	88881
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173857696 {
			parent = 127755173857840
				value: 	88881
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755173858032 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173857936 {
			parent = 127755173858032
				value: 	99992
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173857936 {
			parent = 127755173858032
				value: 	99992
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173859232 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173858800 {
			parent = 127755173859232
				children:
				'leq'
				<class 'ir.Var'> 127755173858704 {
				parent = 127755173858800
					symbol: 	auto int j
				}
				<class 'ir.Const'> 127755173858272 {
				parent = 127755173858800
					value: 	5
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173859184 {
			parent = 127755173859232
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173859088 {
				parent = 127755173859184
					children:
					'plus'
					<class 'ir.Var'> 127755173858896 {
					parent = 127755173859088
						symbol: 	auto int j
					}
					<class 'ir.Const'> 127755173858992 {
					parent = 127755173859088
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int j
			}
			body: 	<class 'ir.StatList'> 127755173858368 {
			parent = 127755173859232
				children:
				<class 'ir.PrintStat'> 127755173858560 {
				parent = 127755173858368
					children:
					<class 'ir.Var'> 127755173858464 {
					parent = 127755173858560
						symbol: 	global int j
					}
					expr: 	<class 'ir.Var'> 127755173858464 {
					parent = 127755173858560
						symbol: 	global int j
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173888112 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173859280 {
			parent = 127755173888112
				value: 	88882
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173859280 {
			parent = 127755173888112
				value: 	88882
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755173888304 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173888208 {
			parent = 127755173888304
				value: 	99993
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173888208 {
			parent = 127755173888304
				value: 	99993
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173889696 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173889264 {
			parent = 127755173889696
				children:
				'leq'
				<class 'ir.Var'> 127755173889168 {
				parent = 127755173889264
					symbol: 	auto int k
				}
				<class 'ir.Const'> 127755173888544 {
				parent = 127755173889264
					value: 	5
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173889648 {
			parent = 127755173889696
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173889552 {
				parent = 127755173889648
					children:
					'plus'
					<class 'ir.Var'> 127755173889360 {
					parent = 127755173889552
						symbol: 	auto int k
					}
					<class 'ir.Const'> 127755173889456 {
					parent = 127755173889552
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int k
			}
			body: 	<class 'ir.StatList'> 127755173888640 {
			parent = 127755173889696
				children:
				<class 'ir.PrintStat'> 127755173888832 {
				parent = 127755173888640
					children:
					<class 'ir.Const'> 127755173888736 {
					parent = 127755173888832
						value: 	77777
						symbol: 	None
					}
					expr: 	<class 'ir.Const'> 127755173888736 {
					parent = 127755173888832
						value: 	77777
						symbol: 	None
					}
				}
				<class 'ir.PrintStat'> 127755173889024 {
				parent = 127755173888640
					children:
					<class 'ir.Var'> 127755173888928 {
					parent = 127755173889024
						symbol: 	global int k
					}
					expr: 	<class 'ir.Var'> 127755173888928 {
					parent = 127755173889024
						symbol: 	global int k
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173889888 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173889744 {
			parent = 127755173889888
				value: 	88883
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173889744 {
			parent = 127755173889888
				value: 	88883
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755173890080 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173889984 {
			parent = 127755173890080
				value: 	99994
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173889984 {
			parent = 127755173890080
				value: 	99994
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173891280 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173890848 {
			parent = 127755173891280
				children:
				'leq'
				<class 'ir.Var'> 127755173890752 {
				parent = 127755173890848
					symbol: 	auto int m
				}
				<class 'ir.Const'> 127755173890320 {
				parent = 127755173890848
					value: 	6
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173891232 {
			parent = 127755173891280
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173891136 {
				parent = 127755173891232
					children:
					'plus'
					<class 'ir.Var'> 127755173890944 {
					parent = 127755173891136
						symbol: 	auto int m
					}
					<class 'ir.Const'> 127755173891040 {
					parent = 127755173891136
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int m
			}
			body: 	<class 'ir.StatList'> 127755173890416 {
			parent = 127755173891280
				children:
				<class 'ir.PrintStat'> 127755173890608 {
				parent = 127755173890416
					children:
					<class 'ir.Var'> 127755173890512 {
					parent = 127755173890608
						symbol: 	global int m
					}
					expr: 	<class 'ir.Var'> 127755173890512 {
					parent = 127755173890608
						symbol: 	global int m
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173891424 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173891328 {
			parent = 127755173891424
				value: 	88884
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173891328 {
			parent = 127755173891424
				value: 	88884
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755173891616 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173891520 {
			parent = 127755173891616
				value: 	99995
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173891520 {
			parent = 127755173891616
				value: 	99995
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173892880 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173892448 {
			parent = 127755173892880
				children:
				'leq'
				<class 'ir.Var'> 127755173892352 {
				parent = 127755173892448
					symbol: 	auto int n
				}
				<class 'ir.Const'> 127755173891856 {
				parent = 127755173892448
					value: 	7
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173892832 {
			parent = 127755173892880
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173892736 {
				parent = 127755173892832
					children:
					'plus'
					<class 'ir.Var'> 127755173892544 {
					parent = 127755173892736
						symbol: 	auto int n
					}
					<class 'ir.Const'> 127755173892640 {
					parent = 127755173892736
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int n
			}
			body: 	<class 'ir.StatList'> 127755173891952 {
			parent = 127755173892880
				children:
				<class 'ir.PrintStat'> 127755173892208 {
				parent = 127755173891952
					children:
					<class 'ir.Var'> 127755173892048 {
					parent = 127755173892208
						symbol: 	global int n
					}
					expr: 	<class 'ir.Var'> 127755173892048 {
					parent = 127755173892208
						symbol: 	global int n
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173893024 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173892928 {
			parent = 127755173893024
				value: 	88885
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173892928 {
			parent = 127755173893024
				value: 	88885
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755173893264 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173893120 {
			parent = 127755173893264
				value: 	99996
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173893120 {
			parent = 127755173893264
				value: 	99996
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173894464 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173894032 {
			parent = 127755173894464
				children:
				'leq'
				<class 'ir.Var'> 127755173893936 {
				parent = 127755173894032
					symbol: 	auto int p
				}
				<class 'ir.Const'> 127755173893504 {
				parent = 127755173894032
					value: 	12
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173894416 {
			parent = 127755173894464
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173894320 {
				parent = 127755173894416
					children:
					'plus'
					<class 'ir.Var'> 127755173894128 {
					parent = 127755173894320
						symbol: 	auto int p
					}
					<class 'ir.Const'> 127755173894224 {
					parent = 127755173894320
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int p
			}
			body: 	<class 'ir.StatList'> 127755173893600 {
			parent = 127755173894464
				children:
				<class 'ir.PrintStat'> 127755173893792 {
				parent = 127755173893600
					children:
					<class 'ir.Var'> 127755173893696 {
					parent = 127755173893792
						symbol: 	global int p
					}
					expr: 	<class 'ir.Var'> 127755173893696 {
					parent = 127755173893792
						symbol: 	global int p
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173894608 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173894512 {
			parent = 127755173894608
				value: 	88886
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173894512 {
			parent = 127755173894608
				value: 	88886
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 127755173894800 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173894704 {
			parent = 127755173894800
				value: 	0
				symbol: 	None
			}
			symbol: 	global int sum
		}
		<class 'ir.PrintStat'> 127755173894896 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755174516384 {
			parent = 127755173894896
				value: 	99997
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755174516384 {
			parent = 127755173894896
				value: 	99997
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755173823392 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755173825696 {
			parent = 127755173823392
				children:
				'leq'
				<class 'ir.Var'> 127755173896096 {
				parent = 127755173825696
					symbol: 	auto int q
				}
				<class 'ir.Const'> 127755173895136 {
				parent = 127755173825696
					value: 	5
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755173823872 {
			parent = 127755173823392
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755173824160 {
				parent = 127755173823872
					children:
					'plus'
					<class 'ir.Var'> 127755173825456 {
					parent = 127755173824160
						symbol: 	auto int q
					}
					<class 'ir.Const'> 127755173824208 {
					parent = 127755173824160
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int q
			}
			body: 	<class 'ir.StatList'> 127755173895232 {
			parent = 127755173823392
				children:
				<class 'ir.AssignStat'> 127755173895616 {
				parent = 127755173895232
					offset: 	None
					expr: 	<class 'ir.BinExpr'> 127755173895520 {
					parent = 127755173895616
						children:
						'plus'
						<class 'ir.Var'> 127755173895328 {
						parent = 127755173895520
							symbol: 	global int sum
						}
						<class 'ir.Var'> 127755173895424 {
						parent = 127755173895520
							symbol: 	global int q
						}
					}
					symbol: 	global int sum
				}
				<class 'ir.PrintStat'> 127755173895760 {
				parent = 127755173895232
					children:
					<class 'ir.Var'> 127755173895664 {
					parent = 127755173895760
						symbol: 	global int q
					}
					expr: 	<class 'ir.Var'> 127755173895664 {
					parent = 127755173895760
						symbol: 	global int q
					}
				}
				<class 'ir.PrintStat'> 127755173895952 {
				parent = 127755173895232
					children:
					<class 'ir.Var'> 127755173895856 {
					parent = 127755173895952
						symbol: 	global int sum
					}
					expr: 	<class 'ir.Var'> 127755173895856 {
					parent = 127755173895952
						symbol: 	global int sum
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755173826128 {
		parent = 127755174517872
			children:
			<class 'ir.Var'> 127755173823296 {
			parent = 127755173826128
				symbol: 	global int sum
			}
			expr: 	<class 'ir.Var'> 127755173823296 {
			parent = 127755173826128
				symbol: 	global int sum
			}
		}
		<class 'ir.PrintStat'> 127755173826320 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173826224 {
			parent = 127755173826320
				value: 	88887
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173826224 {
			parent = 127755173826320
				value: 	88887
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 127755173826512 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173826416 {
			parent = 127755173826512
				value: 	100
				symbol: 	None
			}
			symbol: 	global int x
		}
		<class 'ir.PrintStat'> 127755174457104 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755173826080 {
			parent = 127755174457104
				value: 	99998
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755173826080 {
			parent = 127755174457104
				value: 	99998
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 127755174455616 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174456096 {
			parent = 127755174455616
				children:
				'leq'
				<class 'ir.Var'> 127755174454128 {
				parent = 127755174456096
					symbol: 	auto int r
				}
				<class 'ir.Const'> 127755174453360 {
				parent = 127755174456096
					value: 	3
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755174455664 {
			parent = 127755174455616
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755174455760 {
				parent = 127755174455664
					children:
					'plus'
					<class 'ir.Var'> 127755174455952 {
					parent = 127755174455760
						symbol: 	auto int r
					}
					<class 'ir.Const'> 127755174455856 {
					parent = 127755174455760
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int r
			}
			body: 	<class 'ir.StatList'> 127755174453456 {
			parent = 127755174455616
				children:
				<class 'ir.AssignStat'> 127755174453840 {
				parent = 127755174453456
					offset: 	None
					expr: 	<class 'ir.BinExpr'> 127755174453744 {
					parent = 127755174453840
						children:
						'plus'
						<class 'ir.Var'> 127755174453552 {
						parent = 127755174453744
							symbol: 	global int x
						}
						<class 'ir.Var'> 127755174453648 {
						parent = 127755174453744
							symbol: 	global int r
						}
					}
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 127755174453984 {
				parent = 127755174453456
					children:
					<class 'ir.Var'> 127755174453888 {
					parent = 127755174453984
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 127755174453888 {
					parent = 127755174453984
						symbol: 	global int x
					}
				}
			}
		}
		<class 'ir.PrintStat'> 127755174455472 {
		parent = 127755174517872
			children:
			<class 'ir.Var'> 127755174455568 {
			parent = 127755174455472
				symbol: 	global int x
			}
			expr: 	<class 'ir.Var'> 127755174455568 {
			parent = 127755174455472
				symbol: 	global int x
			}
		}
		<class 'ir.PrintStat'> 127755174455280 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755174455376 {
			parent = 127755174455280
				value: 	88888
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755174455376 {
			parent = 127755174455280
				value: 	88888
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 127755174455088 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755174455184 {
			parent = 127755174455088
				value: 	999990
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755174455184 {
			parent = 127755174455088
				value: 	999990
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 127755174454896 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174454992 {
			parent = 127755174454896
				value: 	0
				symbol: 	None
			}
			symbol: 	global int sm_idx
		}
		<class 'ir.ForStat'> 127755174796304 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174795872 {
			parent = 127755174796304
				children:
				'leq'
				<class 'ir.Var'> 127755174795776 {
				parent = 127755174795872
					symbol: 	auto int sm_idx
				}
				<class 'ir.Const'> 127755174454752 {
				parent = 127755174795872
					value: 	127
					symbol: 	None
				}
			}
			step: 	<class 'ir.AssignStat'> 127755174796256 {
			parent = 127755174796304
				offset: 	None
				expr: 	<class 'ir.BinExpr'> 127755174796160 {
				parent = 127755174796256
					children:
					'plus'
					<class 'ir.Var'> 127755174795968 {
					parent = 127755174796160
						symbol: 	auto int sm_idx
					}
					<class 'ir.Const'> 127755174796064 {
					parent = 127755174796160
						value: 	1
						symbol: 	None
					}
				}
				symbol: 	auto int sm_idx
			}
			body: 	<class 'ir.StatList'> 127755174454656 {
			parent = 127755174796304
				children:
				<class 'ir.AssignStat'> 127755174795728 {
				parent = 127755174454656
					offset: 	<class 'ir.BinExpr'> 127755174454320 {
					parent = 127755174795728
						children:
						'times'
						<class 'ir.Var'> 127755174454560 {
						parent = 127755174454320
							symbol: 	global int sm_idx
						}
						<class 'ir.Const'> 127755174454512 {
						parent = 127755174454320
							value: 	4
							symbol: 	None
						}
					}
					expr: 	<class 'ir.BinExpr'> 127755174795632 {
					parent = 127755174795728
						children:
						'plus'
						<class 'ir.ArrayElement'> 127755174795296 {
						parent = 127755174795632
							children:
							<class 'ir.BinExpr'> 127755174795392 {
							parent = 127755174795296
								children:
								'times'
								<class 'ir.Var'> 127755174454416 {
								parent = 127755174795392
									symbol: 	global int sm_idx
								}
								<class 'ir.Const'> 127755174454224 {
								parent = 127755174795392
									value: 	4
									symbol: 	None
								}
							}
							offset: 	<class 'ir.BinExpr'> 127755174795392 {
							parent = 127755174795296
								children:
								'times'
								<class 'ir.Var'> 127755174454416 {
								parent = 127755174795392
									symbol: 	global int sm_idx
								}
								<class 'ir.Const'> 127755174454224 {
								parent = 127755174795392
									value: 	4
									symbol: 	None
								}
							}
							symbol: 	global int[128] sm_source_arr
						}
						<class 'ir.Var'> 127755174795488 {
						parent = 127755174795632
							symbol: 	global int sm_idx
						}
					}
					symbol: 	global int[128] sm_dest_arr
				}
			}
		}
		<class 'ir.IfStat'> 127755174794192 {
		parent = 127755174517872
			cond: 	<class 'ir.BinExpr'> 127755174796544 {
			parent = 127755174794192
				children:
				'geq'
				<class 'ir.Const'> 127755174796352 {
				parent = 127755174796544
					value: 	127
					symbol: 	None
				}
				<class 'ir.Const'> 127755174796448 {
				parent = 127755174796544
					value: 	0
					symbol: 	None
				}
			}
			thenpart: 	<class 'ir.StatList'> 127755174796640 {
			parent = 127755174794192
				children:
				<class 'ir.PrintStat'> 127755174797168 {
				parent = 127755174796640
					children:
					<class 'ir.Const'> 127755174797264 {
					parent = 127755174797168
						value: 	76543
						symbol: 	None
					}
					expr: 	<class 'ir.Const'> 127755174797264 {
					parent = 127755174797168
						value: 	76543
						symbol: 	None
					}
				}
				<class 'ir.PrintStat'> 127755174796736 {
				parent = 127755174796640
					children:
					<class 'ir.ArrayElement'> 127755174796928 {
					parent = 127755174796736
						children:
						<class 'ir.BinExpr'> 127755174796832 {
						parent = 127755174796928
							children:
							'times'
							<class 'ir.Const'> 127755174797072 {
							parent = 127755174796832
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 127755174797024 {
							parent = 127755174796832
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174796832 {
						parent = 127755174796928
							children:
							'times'
							<class 'ir.Const'> 127755174797072 {
							parent = 127755174796832
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 127755174797024 {
							parent = 127755174796832
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
					expr: 	<class 'ir.ArrayElement'> 127755174796928 {
					parent = 127755174796736
						children:
						<class 'ir.BinExpr'> 127755174796832 {
						parent = 127755174796928
							children:
							'times'
							<class 'ir.Const'> 127755174797072 {
							parent = 127755174796832
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 127755174797024 {
							parent = 127755174796832
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174796832 {
						parent = 127755174796928
							children:
							'times'
							<class 'ir.Const'> 127755174797072 {
							parent = 127755174796832
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 127755174797024 {
							parent = 127755174796832
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
				}
				<class 'ir.PrintStat'> 127755174794816 {
				parent = 127755174796640
					children:
					<class 'ir.ArrayElement'> 127755174795008 {
					parent = 127755174794816
						children:
						<class 'ir.BinExpr'> 127755174794912 {
						parent = 127755174795008
							children:
							'times'
							<class 'ir.Const'> 127755174795152 {
							parent = 127755174794912
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 127755174795104 {
							parent = 127755174794912
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174794912 {
						parent = 127755174795008
							children:
							'times'
							<class 'ir.Const'> 127755174795152 {
							parent = 127755174794912
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 127755174795104 {
							parent = 127755174794912
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
					expr: 	<class 'ir.ArrayElement'> 127755174795008 {
					parent = 127755174794816
						children:
						<class 'ir.BinExpr'> 127755174794912 {
						parent = 127755174795008
							children:
							'times'
							<class 'ir.Const'> 127755174795152 {
							parent = 127755174794912
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 127755174795104 {
							parent = 127755174794912
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174794912 {
						parent = 127755174795008
							children:
							'times'
							<class 'ir.Const'> 127755174795152 {
							parent = 127755174794912
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 127755174795104 {
							parent = 127755174794912
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
				}
				<class 'ir.PrintStat'> 127755174794336 {
				parent = 127755174796640
					children:
					<class 'ir.ArrayElement'> 127755174794528 {
					parent = 127755174794336
						children:
						<class 'ir.BinExpr'> 127755174794432 {
						parent = 127755174794528
							children:
							'times'
							<class 'ir.Const'> 127755174794672 {
							parent = 127755174794432
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 127755174794624 {
							parent = 127755174794432
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174794432 {
						parent = 127755174794528
							children:
							'times'
							<class 'ir.Const'> 127755174794672 {
							parent = 127755174794432
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 127755174794624 {
							parent = 127755174794432
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
					expr: 	<class 'ir.ArrayElement'> 127755174794528 {
					parent = 127755174794336
						children:
						<class 'ir.BinExpr'> 127755174794432 {
						parent = 127755174794528
							children:
							'times'
							<class 'ir.Const'> 127755174794672 {
							parent = 127755174794432
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 127755174794624 {
							parent = 127755174794432
								value: 	4
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 127755174794432 {
						parent = 127755174794528
							children:
							'times'
							<class 'ir.Const'> 127755174794672 {
							parent = 127755174794432
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 127755174794624 {
							parent = 127755174794432
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
					}
				}
			}
			elsepart: 	None
		}
		<class 'ir.PrintStat'> 127755179963296 {
		parent = 127755174517872
			children:
			<class 'ir.Const'> 127755174794144 {
			parent = 127755179963296
				value: 	888880
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 127755174794144 {
			parent = 127755179963296
				value: 	888880
				symbol: 	None
			}
		}
	}
}

--- Navigating: Applying Lowering ---
Cannot lower 127755174517056 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
StatList : new 127755175745184
Lowering <class 'ir.Const'> 127755174517344
StatList : new 127755174517344
Lowering <class 'ir.AssignStat'> 127755174517440
StatList : new 127755175745712
Lowering <class 'ir.Var'> 127755174517488
StatList : new 127755175741424
Lowering <class 'ir.Var'> 127755174517248
StatList : new 127755175674736
Lowering <class 'ir.BinExpr'> 127755174517632
StatList : new 127755174517632
Lowering <class 'ir.AssignStat'> 127755174517728
Cannot lower 127755174517200 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174517776 <class 'ir.Block'> 'Block' object has no attribute 'lower'
Cannot lower 127755174515184 <class 'ir.FunctionDef'> 'FunctionDef' object has no attribute 'lower'
Cannot lower 127755174791920 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
StatList : new 127755175677664
Lowering <class 'ir.Const'> 127755174518016
StatList : new 127755175677856
Lowering <class 'ir.UnExpr'> 127755174518112
StatList : new 127755174518112
Lowering <class 'ir.AssignStat'> 127755174518208
StatList : new 127755175677328
Lowering <class 'ir.ReadStat'> 127755174518256
StatList : new 127755174518256
Lowering <class 'ir.AssignStat'> 127755174518304
StatList : new 127755175753040
Lowering <class 'ir.Var'> 127755174518352
StatList : new 127755175752416
Lowering <class 'ir.Const'> 127755174518448
StatList : new 127755175752608
Lowering <class 'ir.BinExpr'> 127755174518544
StatList : new 127755175429600
Lowering <class 'ir.Var'> 127755174518736
StatList : new 127755175428784
Lowering <class 'ir.UnExpr'> 127755174522992
Cannot lower 127755175752704 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755175429600 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174522944
Lowering <class 'ir.UnExpr'> 127755174522992
StatList : new 127755175428592
Lowering <class 'ir.PrintStat'> 127755174523088
Cannot lower 127755174518640 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755175430752
Lowering <class 'ir.Var'> 127755174523280
StatList : new 127755175481696
Lowering <class 'ir.Var'> 127755174523280
StatList : new 127755174666144
Lowering <class 'ir.PrintStat'> 127755174523376
Cannot lower 127755174523184 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174665856
Lowering <class 'ir.IfStat'> 127755174523472
StatList : new 127755174664944
Lowering <class 'ir.Const'> 127755174523520
StatList : new 127755174523520
Lowering <class 'ir.AssignStat'> 127755174523616
StatList : new 127755174665136
Lowering <class 'ir.Var'> 127755174523664
StatList : new 127755174665280
Lowering <class 'ir.Const'> 127755174523760
StatList : new 127755174665472
Lowering <class 'ir.BinExpr'> 127755174523856
Cannot lower 127755174524048 <class 'ir.CallExpr'> 'CallExpr' object has no attribute 'lower'
Lowering <class 'ir.CallStat'> 127755174524144
StatList : new 127755174665616
Lowering <class 'ir.Var'> 127755174524240
StatList : new 127755174665760
Lowering <class 'ir.Const'> 127755174524336
StatList : new 127755174737376
Lowering <class 'ir.BinExpr'> 127755174524432
StatList : new 127755174524432
Lowering <class 'ir.AssignStat'> 127755174524528
StatList : new 127755174736848
Lowering <class 'ir.Var'> 127755174524576
StatList : new 127755174735984
Lowering <class 'ir.Var'> 127755174524576
StatList : new 127755174736080
Lowering <class 'ir.PrintStat'> 127755174524672
Cannot lower 127755174523952 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174736416
Lowering <class 'ir.WhileStat'> 127755174524768
StatList : new 127755174736608
Lowering <class 'ir.Const'> 127755174524816
StatList : new 127755174524816
Lowering <class 'ir.AssignStat'> 127755174524912
StatList : new 127755174737040
Lowering <class 'ir.Var'> 127755174524960
StatList : new 127755174737184
Lowering <class 'ir.Const'> 127755174525056
StatList : new 127755174737472
Lowering <class 'ir.BinExpr'> 127755174525152
StatList : new 127755174738672
Lowering <class 'ir.Var'> 127755174525392
StatList : new 127755174738816
Lowering <class 'ir.Const'> 127755174525536
StatList : new 127755174158544
Lowering <class 'ir.BinExpr'> 127755174525632
StatList : new 127755174525680
Lowering <class 'ir.Const'> 127755174525440
StatList : new 127755174158784
Lowering <class 'ir.BinExpr'> 127755174525824
StatList : new 127755174525872
Lowering <class 'ir.Var'> 127755174525728
StatList : new 127755174159216
Lowering <class 'ir.AssignStat'> 127755174525968
StatList : new 127755174159456
Lowering <class 'ir.Var'> 127755174515424
StatList : new 127755174159792
Lowering <class 'ir.Const'> 127755174526112
StatList : new 127755174159984
Lowering <class 'ir.BinExpr'> 127755174526208
StatList : new 127755174526256
Lowering <class 'ir.Const'> 127755174526016
StatList : new 127755174160224
Lowering <class 'ir.BinExpr'> 127755174526400
Cannot lower 127755174159408 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174159456 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174159792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174159744 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174159984 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526208 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174526256 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174159504
Lowering <class 'ir.BinExpr'> 127755174526400
StatList : new 127755174160944
Lowering <class 'ir.ArrayElement'> 127755174526304
Cannot lower 127755174159408 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174159456 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174159792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174159744 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174159984 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526208 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174526256 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174160128 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174160224 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174159408 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174159456 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174159792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174159744 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174159984 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174526208 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174526256 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174160416 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174159504 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174161376
Lowering <class 'ir.ArrayElement'> 127755174526304
StatList : new 127755174161520
Lowering <class 'ir.PrintStat'> 127755174526496
StatList : new 127755174161760
Lowering <class 'ir.Var'> 127755174526640
StatList : new 127755174161952
Lowering <class 'ir.Const'> 127755174526736
StatList : new 127755174162144
Lowering <class 'ir.BinExpr'> 127755174526832
StatList : new 127755174526832
Lowering <class 'ir.AssignStat'> 127755174526928
Cannot lower 127755174525296 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174076480
Lowering <class 'ir.WhileStat'> 127755174530592
StatList : new 127755174076624
Lowering <class 'ir.Const'> 127755174530496
StatList : new 127755174530496
Lowering <class 'ir.AssignStat'> 127755174529632
StatList : new 127755174076864
Lowering <class 'ir.Const'> 127755174527040
StatList : new 127755174527040
Lowering <class 'ir.AssignStat'> 127755174527136
StatList : new 127755174077056
Lowering <class 'ir.Var'> 127755174514896
StatList : new 127755174077200
Lowering <class 'ir.Const'> 127755174527232
StatList : new 127755174077392
Lowering <class 'ir.BinExpr'> 127755174527328
StatList : new 127755174077488
Lowering <class 'ir.Var'> 127755174527520
StatList : new 127755174077632
Lowering <class 'ir.Const'> 127755174527616
StatList : new 127755174077824
Lowering <class 'ir.BinExpr'> 127755174527712
StatList : new 127755174077968
Lowering <class 'ir.Var'> 127755174527904
StatList : new 127755174078112
Lowering <class 'ir.Const'> 127755174527952
StatList : new 127755174078304
Lowering <class 'ir.BinExpr'> 127755174528240
StatList : new 127755174528288
Lowering <class 'ir.Var'> 127755174528048
StatList : new 127755174078400
Lowering <class 'ir.Const'> 127755174528336
StatList : new 127755174078688
Lowering <class 'ir.BinExpr'> 127755174528432
StatList : new 127755174078880
Lowering <class 'ir.BinExpr'> 127755174528528
StatList : new 127755174078928
Lowering <class 'ir.Var'> 127755174528144
StatList : new 127755174079072
Lowering <class 'ir.Const'> 127755174528624
StatList : new 127755174079264
Lowering <class 'ir.BinExpr'> 127755174528816
Cannot lower 127755174528576 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174078928 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174528672 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174079072 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174079456
Lowering <class 'ir.BinExpr'> 127755174528816
StatList : new 127755174079984
Lowering <class 'ir.ArrayElement'> 127755174528720
StatList : new 127755174080416
Lowering <class 'ir.AssignStat'> 127755174528912
StatList : new 127755174072528
Lowering <class 'ir.Var'> 127755174515616
StatList : new 127755174072864
Lowering <class 'ir.Const'> 127755174529008
StatList : new 127755174073056
Lowering <class 'ir.BinExpr'> 127755174529296
StatList : new 127755174529344
Lowering <class 'ir.Var'> 127755174529104
StatList : new 127755174073152
Lowering <class 'ir.Const'> 127755174529392
StatList : new 127755174073440
Lowering <class 'ir.BinExpr'> 127755174529488
StatList : new 127755174073632
Lowering <class 'ir.BinExpr'> 127755174153856
Cannot lower 127755174072480 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174072528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174072864 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174072816 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529296 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174529344 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529152 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174073152 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174073248 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174079312
Lowering <class 'ir.BinExpr'> 127755174153856
StatList : new 127755174160512
Lowering <class 'ir.ArrayElement'> 127755174529200
Cannot lower 127755174072480 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174072528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174072864 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174072816 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529296 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174529344 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529152 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174073152 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174073248 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174073584 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073632 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174072480 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174072528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174072864 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174072816 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529296 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755174529344 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174529152 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755174073152 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174073248 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174073440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174079024 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755174079312 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174736800
Lowering <class 'ir.ArrayElement'> 127755174529200
StatList : new 127755175430752
Lowering <class 'ir.PrintStat'> 127755174153520
StatList : new 127755174526304
Lowering <class 'ir.Var'> 127755174152560
StatList : new 127755174522992
Lowering <class 'ir.Const'> 127755174151936
StatList : new 127755174523136
Lowering <class 'ir.BinExpr'> 127755174151744
StatList : new 127755174151744
Lowering <class 'ir.AssignStat'> 127755174151312
StatList : new 127755174524048
Lowering <class 'ir.Var'> 127755174150832
StatList : new 127755174526544
Lowering <class 'ir.Const'> 127755174150208
StatList : new 127755174528480
Lowering <class 'ir.BinExpr'> 127755174150304
StatList : new 127755174150304
Lowering <class 'ir.AssignStat'> 127755174150400
Cannot lower 127755174527808 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174073824
Lowering <class 'ir.WhileStat'> 127755174150448
Cannot lower 127755174527424 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174074160
Lowering <class 'ir.WhileStat'> 127755174150496
StatList : new 127755174074352
Lowering <class 'ir.Var'> 127755173855680
StatList : new 127755174074496
Lowering <class 'ir.Const'> 127755174150688
StatList : new 127755174074688
Lowering <class 'ir.BinExpr'> 127755173855776
StatList : new 127755173855824
Lowering <class 'ir.Var'> 127755173855872
StatList : new 127755174074880
Lowering <class 'ir.Const'> 127755173855968
StatList : new 127755174075072
Lowering <class 'ir.BinExpr'> 127755173856064
StatList : new 127755173856064
Lowering <class 'ir.AssignStat'> 127755173856160
StatList : new 127755174075216
Lowering <class 'ir.Var'> 127755173855440
StatList : new 127755174075456
Lowering <class 'ir.Var'> 127755173855440
StatList : new 127755174075600
Lowering <class 'ir.PrintStat'> 127755173855536
Cannot lower 127755173855344 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174075744
Lowering ForStat 127755173856208 into StatList
StatList : new 127755174076032
Lowering <class 'ir.ForStat'> 127755173856208
StatList : new 127755174075936
Lowering <class 'ir.Const'> 127755173856256
StatList : new 127755173856256
Lowering <class 'ir.AssignStat'> 127755173856352
StatList : new 127755174076320
Lowering <class 'ir.Const'> 127755174515712
StatList : new 127755174035664
Lowering <class 'ir.Const'> 127755174515712
StatList : new 127755174035760
Lowering <class 'ir.PrintStat'> 127755173856448
StatList : new 127755174036000
Lowering <class 'ir.Var'> 127755173857120
StatList : new 127755174036096
Lowering <class 'ir.Const'> 127755173856688
StatList : new 127755174036288
Lowering <class 'ir.BinExpr'> 127755173857216
StatList : new 127755173857264
Lowering <class 'ir.Var'> 127755173857312
StatList : new 127755174036480
Lowering <class 'ir.Const'> 127755173857408
StatList : new 127755174036672
Lowering <class 'ir.BinExpr'> 127755173857504
StatList : new 127755173857504
Lowering <class 'ir.AssignStat'> 127755173857600
StatList : new 127755174036816
Lowering <class 'ir.Var'> 127755173856880
StatList : new 127755174037056
Lowering <class 'ir.Var'> 127755173856880
StatList : new 127755174037200
Lowering <class 'ir.PrintStat'> 127755173856976
Cannot lower 127755173856784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755174037344
Lowering ForStat 127755173857648 into StatList
StatList : new 127755174037632
Lowering <class 'ir.ForStat'> 127755173857648
StatList : new 127755174037536
Lowering <class 'ir.Const'> 127755173857696
StatList : new 127755174037920
Lowering <class 'ir.Const'> 127755173857696
StatList : new 127755174038016
Lowering <class 'ir.PrintStat'> 127755173857840
StatList : new 127755174038256
Lowering <class 'ir.Const'> 127755173857936
StatList : new 127755174038400
Lowering <class 'ir.Const'> 127755173857936
StatList : new 127755174038496
Lowering <class 'ir.PrintStat'> 127755173858032
StatList : new 127755174038736
Lowering <class 'ir.Var'> 127755173858704
StatList : new 127755174038832
Lowering <class 'ir.Const'> 127755173858272
StatList : new 127755174039024
Lowering <class 'ir.BinExpr'> 127755173858800
StatList : new 127755173858848
Lowering <class 'ir.Var'> 127755173858896
StatList : new 127755174039216
Lowering <class 'ir.Const'> 127755173858992
StatList : new 127755174039408
Lowering <class 'ir.BinExpr'> 127755173859088
StatList : new 127755173859088
Lowering <class 'ir.AssignStat'> 127755173859184
StatList : new 127755173507184
Lowering <class 'ir.Var'> 127755173858464
StatList : new 127755173507424
Lowering <class 'ir.Var'> 127755173858464
StatList : new 127755173507520
Lowering <class 'ir.PrintStat'> 127755173858560
Cannot lower 127755173858368 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173507664
Lowering ForStat 127755173859232 into StatList
StatList : new 127755173507952
Lowering <class 'ir.ForStat'> 127755173859232
StatList : new 127755173507856
Lowering <class 'ir.Const'> 127755173859280
StatList : new 127755173508240
Lowering <class 'ir.Const'> 127755173859280
StatList : new 127755173508336
Lowering <class 'ir.PrintStat'> 127755173888112
StatList : new 127755173508576
Lowering <class 'ir.Const'> 127755173888208
StatList : new 127755173508720
Lowering <class 'ir.Const'> 127755173888208
StatList : new 127755173508816
Lowering <class 'ir.PrintStat'> 127755173888304
StatList : new 127755173509056
Lowering <class 'ir.Var'> 127755173889168
StatList : new 127755173509152
Lowering <class 'ir.Const'> 127755173888544
StatList : new 127755173509344
Lowering <class 'ir.BinExpr'> 127755173889264
StatList : new 127755173889312
Lowering <class 'ir.Var'> 127755173889360
StatList : new 127755173509536
Lowering <class 'ir.Const'> 127755173889456
StatList : new 127755173509728
Lowering <class 'ir.BinExpr'> 127755173889552
StatList : new 127755173889552
Lowering <class 'ir.AssignStat'> 127755173889648
StatList : new 127755173509872
Lowering <class 'ir.Const'> 127755173888736
StatList : new 127755173510112
Lowering <class 'ir.Const'> 127755173888736
StatList : new 127755173510256
Lowering <class 'ir.PrintStat'> 127755173888832
StatList : new 127755173510496
Lowering <class 'ir.Var'> 127755173888928
StatList : new 127755173510640
Lowering <class 'ir.Var'> 127755173888928
StatList : new 127755173510736
Lowering <class 'ir.PrintStat'> 127755173889024
Cannot lower 127755173888640 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173510880
Lowering ForStat 127755173889696 into StatList
StatList : new 127755173527616
Lowering <class 'ir.ForStat'> 127755173889696
StatList : new 127755173527760
Lowering <class 'ir.Const'> 127755173889744
StatList : new 127755173527904
Lowering <class 'ir.Const'> 127755173889744
StatList : new 127755173528000
Lowering <class 'ir.PrintStat'> 127755173889888
StatList : new 127755173528240
Lowering <class 'ir.Const'> 127755173889984
StatList : new 127755173528384
Lowering <class 'ir.Const'> 127755173889984
StatList : new 127755173528480
Lowering <class 'ir.PrintStat'> 127755173890080
StatList : new 127755173528720
Lowering <class 'ir.Var'> 127755173890752
StatList : new 127755173528816
Lowering <class 'ir.Const'> 127755173890320
StatList : new 127755173529008
Lowering <class 'ir.BinExpr'> 127755173890848
StatList : new 127755173890896
Lowering <class 'ir.Var'> 127755173890944
StatList : new 127755173529200
Lowering <class 'ir.Const'> 127755173891040
StatList : new 127755173529392
Lowering <class 'ir.BinExpr'> 127755173891136
StatList : new 127755173891136
Lowering <class 'ir.AssignStat'> 127755173891232
StatList : new 127755173529536
Lowering <class 'ir.Var'> 127755173890512
StatList : new 127755173529776
Lowering <class 'ir.Var'> 127755173890512
StatList : new 127755173529920
Lowering <class 'ir.PrintStat'> 127755173890608
Cannot lower 127755173890416 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173530064
Lowering ForStat 127755173891280 into StatList
StatList : new 127755173530352
Lowering <class 'ir.ForStat'> 127755173891280
StatList : new 127755173530256
Lowering <class 'ir.Const'> 127755173891328
StatList : new 127755173530640
Lowering <class 'ir.Const'> 127755173891328
StatList : new 127755173530736
Lowering <class 'ir.PrintStat'> 127755173891424
StatList : new 127755173530976
Lowering <class 'ir.Const'> 127755173891520
StatList : new 127755173531120
Lowering <class 'ir.Const'> 127755173891520
StatList : new 127755173531216
Lowering <class 'ir.PrintStat'> 127755173891616
StatList : new 127755173531456
Lowering <class 'ir.Var'> 127755173892352
StatList : new 127755173531552
Lowering <class 'ir.Const'> 127755173891856
StatList : new 127755173552288
Lowering <class 'ir.BinExpr'> 127755173892448
StatList : new 127755173891856
Lowering <class 'ir.Var'> 127755173892544
StatList : new 127755173552480
Lowering <class 'ir.Const'> 127755173892640
StatList : new 127755173552672
Lowering <class 'ir.BinExpr'> 127755173892736
StatList : new 127755173892736
Lowering <class 'ir.AssignStat'> 127755173892832
StatList : new 127755173552816
Lowering <class 'ir.Var'> 127755173892048
StatList : new 127755173553056
Lowering <class 'ir.Var'> 127755173892048
StatList : new 127755173553200
Lowering <class 'ir.PrintStat'> 127755173892208
Cannot lower 127755173891952 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173553344
Lowering ForStat 127755173892880 into StatList
StatList : new 127755173553632
Lowering <class 'ir.ForStat'> 127755173892880
StatList : new 127755173553536
Lowering <class 'ir.Const'> 127755173892928
StatList : new 127755173553920
Lowering <class 'ir.Const'> 127755173892928
StatList : new 127755173554016
Lowering <class 'ir.PrintStat'> 127755173893024
StatList : new 127755173554256
Lowering <class 'ir.Const'> 127755173893120
StatList : new 127755173554400
Lowering <class 'ir.Const'> 127755173893120
StatList : new 127755173554496
Lowering <class 'ir.PrintStat'> 127755173893264
StatList : new 127755173554736
Lowering <class 'ir.Var'> 127755173893936
StatList : new 127755173554832
Lowering <class 'ir.Const'> 127755173893504
StatList : new 127755173555024
Lowering <class 'ir.BinExpr'> 127755173894032
StatList : new 127755173894080
Lowering <class 'ir.Var'> 127755173894128
StatList : new 127755173555216
Lowering <class 'ir.Const'> 127755173894224
StatList : new 127755173555408
Lowering <class 'ir.BinExpr'> 127755173894320
StatList : new 127755173894320
Lowering <class 'ir.AssignStat'> 127755173894416
StatList : new 127755173555552
Lowering <class 'ir.Var'> 127755173893696
StatList : new 127755173555792
Lowering <class 'ir.Var'> 127755173893696
StatList : new 127755173555936
Lowering <class 'ir.PrintStat'> 127755173893792
Cannot lower 127755173893600 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173564480
Lowering ForStat 127755173894464 into StatList
StatList : new 127755173564624
Lowering <class 'ir.ForStat'> 127755173894464
StatList : new 127755173564528
Lowering <class 'ir.Const'> 127755173894512
StatList : new 127755173564912
Lowering <class 'ir.Const'> 127755173894512
StatList : new 127755173565008
Lowering <class 'ir.PrintStat'> 127755173894608
StatList : new 127755173565200
Lowering <class 'ir.Const'> 127755173894704
StatList : new 127755173894704
Lowering <class 'ir.AssignStat'> 127755173894800
StatList : new 127755173565392
Lowering <class 'ir.Const'> 127755174516384
StatList : new 127755173565584
Lowering <class 'ir.Const'> 127755174516384
StatList : new 127755173565680
Lowering <class 'ir.PrintStat'> 127755173894896
StatList : new 127755173565920
Lowering <class 'ir.Var'> 127755173896096
StatList : new 127755173566016
Lowering <class 'ir.Const'> 127755173895136
StatList : new 127755173566208
Lowering <class 'ir.BinExpr'> 127755173825696
StatList : new 127755173895136
Lowering <class 'ir.Var'> 127755173825456
StatList : new 127755173566400
Lowering <class 'ir.Const'> 127755173824208
StatList : new 127755173566592
Lowering <class 'ir.BinExpr'> 127755173824160
StatList : new 127755173824160
Lowering <class 'ir.AssignStat'> 127755173823872
StatList : new 127755173566736
Lowering <class 'ir.Var'> 127755173895328
StatList : new 127755173566976
Lowering <class 'ir.Var'> 127755173895424
StatList : new 127755173567168
Lowering <class 'ir.BinExpr'> 127755173895520
StatList : new 127755173895520
Lowering <class 'ir.AssignStat'> 127755173895616
StatList : new 127755173567312
Lowering <class 'ir.Var'> 127755173895664
StatList : new 127755173567552
Lowering <class 'ir.Var'> 127755173895664
StatList : new 127755173567648
Lowering <class 'ir.PrintStat'> 127755173895760
StatList : new 127755173567888
Lowering <class 'ir.Var'> 127755173895856
StatList : new 127755173568032
Lowering <class 'ir.Var'> 127755173895856
StatList : new 127755173568128
Lowering <class 'ir.PrintStat'> 127755173895952
Cannot lower 127755173895232 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173568272
Lowering ForStat 127755173823392 into StatList
StatList : new 127755173580912
Lowering <class 'ir.ForStat'> 127755173823392
StatList : new 127755173581056
Lowering <class 'ir.Var'> 127755173823296
StatList : new 127755173581200
Lowering <class 'ir.Var'> 127755173823296
StatList : new 127755173581296
Lowering <class 'ir.PrintStat'> 127755173826128
StatList : new 127755173581536
Lowering <class 'ir.Const'> 127755173826224
StatList : new 127755173581680
Lowering <class 'ir.Const'> 127755173826224
StatList : new 127755173581776
Lowering <class 'ir.PrintStat'> 127755173826320
StatList : new 127755173581968
Lowering <class 'ir.Const'> 127755173826416
StatList : new 127755173826416
Lowering <class 'ir.AssignStat'> 127755173826512
StatList : new 127755173582160
Lowering <class 'ir.Const'> 127755173826080
StatList : new 127755173582352
Lowering <class 'ir.Const'> 127755173826080
StatList : new 127755173582448
Lowering <class 'ir.PrintStat'> 127755174457104
StatList : new 127755173582688
Lowering <class 'ir.Var'> 127755174454128
StatList : new 127755173582784
Lowering <class 'ir.Const'> 127755174453360
StatList : new 127755173582976
Lowering <class 'ir.BinExpr'> 127755174456096
StatList : new 127755174456048
Lowering <class 'ir.Var'> 127755174455952
StatList : new 127755173583168
Lowering <class 'ir.Const'> 127755174455856
StatList : new 127755173583360
Lowering <class 'ir.BinExpr'> 127755174455760
StatList : new 127755174455760
Lowering <class 'ir.AssignStat'> 127755174455664
StatList : new 127755173583504
Lowering <class 'ir.Var'> 127755174453552
StatList : new 127755173583744
Lowering <class 'ir.Var'> 127755174453648
StatList : new 127755173583936
Lowering <class 'ir.BinExpr'> 127755174453744
StatList : new 127755174453744
Lowering <class 'ir.AssignStat'> 127755174453840
StatList : new 127755173584080
Lowering <class 'ir.Var'> 127755174453888
StatList : new 127755173584320
Lowering <class 'ir.Var'> 127755174453888
StatList : new 127755173584416
Lowering <class 'ir.PrintStat'> 127755174453984
Cannot lower 127755174453456 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173584560
Lowering ForStat 127755174455616 into StatList
StatList : new 127755173584848
Lowering <class 'ir.ForStat'> 127755174455616
StatList : new 127755173605536
Lowering <class 'ir.Var'> 127755174455568
StatList : new 127755173605680
Lowering <class 'ir.Var'> 127755174455568
StatList : new 127755173605776
Lowering <class 'ir.PrintStat'> 127755174455472
StatList : new 127755173606016
Lowering <class 'ir.Const'> 127755174455376
StatList : new 127755173606160
Lowering <class 'ir.Const'> 127755174455376
StatList : new 127755173606256
Lowering <class 'ir.PrintStat'> 127755174455280
StatList : new 127755173606496
Lowering <class 'ir.Const'> 127755174455184
StatList : new 127755173606640
Lowering <class 'ir.Const'> 127755174455184
StatList : new 127755173606736
Lowering <class 'ir.PrintStat'> 127755174455088
StatList : new 127755173606928
Lowering <class 'ir.Const'> 127755174454992
StatList : new 127755174454992
Lowering <class 'ir.AssignStat'> 127755174454896
StatList : new 127755173607120
Lowering <class 'ir.Var'> 127755174795776
StatList : new 127755173607312
Lowering <class 'ir.Const'> 127755174454752
StatList : new 127755173607504
Lowering <class 'ir.BinExpr'> 127755174795872
StatList : new 127755174454752
Lowering <class 'ir.Var'> 127755174795968
StatList : new 127755173607696
Lowering <class 'ir.Const'> 127755174796064
StatList : new 127755173607888
Lowering <class 'ir.BinExpr'> 127755174796160
StatList : new 127755174796160
Lowering <class 'ir.AssignStat'> 127755174796256
StatList : new 127755173608032
Lowering <class 'ir.Var'> 127755174454560
StatList : new 127755173608272
Lowering <class 'ir.Const'> 127755174454512
StatList : new 127755173608464
Lowering <class 'ir.BinExpr'> 127755174454320
StatList : new 127755173608608
Lowering <class 'ir.Var'> 127755174454416
StatList : new 127755173608752
Lowering <class 'ir.Const'> 127755174454224
StatList : new 127755173608944
Lowering <class 'ir.BinExpr'> 127755174795392
Cannot lower 127755173608560 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 127755173608608 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174454176 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173608752 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173609136
Lowering <class 'ir.BinExpr'> 127755174795392
StatList : new 127755173626112
Lowering <class 'ir.ArrayElement'> 127755174795296
StatList : new 127755173626256
Lowering <class 'ir.Var'> 127755174795488
StatList : new 127755173626448
Lowering <class 'ir.BinExpr'> 127755174795632
StatList : new 127755173626880
Lowering <class 'ir.AssignStat'> 127755174795728
Cannot lower 127755174454656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173627216
Lowering ForStat 127755174796304 into StatList
StatList : new 127755173627408
Lowering <class 'ir.ForStat'> 127755174796304
StatList : new 127755173627312
Lowering <class 'ir.Const'> 127755174796352
StatList : new 127755173627648
Lowering <class 'ir.Const'> 127755174796448
StatList : new 127755173627840
Lowering <class 'ir.BinExpr'> 127755174796544
StatList : new 127755173627936
Lowering <class 'ir.Const'> 127755174797264
StatList : new 127755173628128
Lowering <class 'ir.Const'> 127755174797264
StatList : new 127755173628224
Lowering <class 'ir.PrintStat'> 127755174797168
StatList : new 127755173628464
Lowering <class 'ir.Const'> 127755174797072
StatList : new 127755173628656
Lowering <class 'ir.Const'> 127755174797024
StatList : new 127755173628848
Lowering <class 'ir.BinExpr'> 127755174796832
Cannot lower 127755173628416 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174796976 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173629040
Lowering <class 'ir.BinExpr'> 127755174796832
StatList : new 127755173629568
Lowering <class 'ir.ArrayElement'> 127755174796928
Cannot lower 127755173628416 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174796976 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173628608 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173628848 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173628416 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174796976 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173628656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173628992 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173629040 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173630064
Lowering <class 'ir.ArrayElement'> 127755174796928
StatList : new 127755173630304
Lowering <class 'ir.PrintStat'> 127755174796736
StatList : new 127755173630496
Lowering <class 'ir.Const'> 127755174795152
StatList : new 127755173630784
Lowering <class 'ir.Const'> 127755174795104
StatList : new 127755173630976
Lowering <class 'ir.BinExpr'> 127755174794912
Cannot lower 127755173630448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174795056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173631168
Lowering <class 'ir.BinExpr'> 127755174794912
StatList : new 127755173631696
Lowering <class 'ir.ArrayElement'> 127755174795008
Cannot lower 127755173630448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174795056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173630736 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173630976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173630448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174795056 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173630784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173631120 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173631168 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173632128
Lowering <class 'ir.ArrayElement'> 127755174795008
StatList : new 127755173632272
Lowering <class 'ir.PrintStat'> 127755174794816
StatList : new 127755173632512
Lowering <class 'ir.Const'> 127755174794672
StatList : new 127755173632800
Lowering <class 'ir.Const'> 127755174794624
StatList : new 127755173632992
Lowering <class 'ir.BinExpr'> 127755174794432
Cannot lower 127755173632464 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632512 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174794576 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632800 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173633184
Lowering <class 'ir.BinExpr'> 127755174794432
StatList : new 127755173633712
Lowering <class 'ir.ArrayElement'> 127755174794528
Cannot lower 127755173632464 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632512 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174794576 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632800 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173632752 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173632992 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173632464 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632512 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755174794576 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 127755173632800 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755173633136 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 127755173633184 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173654688
Lowering <class 'ir.ArrayElement'> 127755174794528
StatList : new 127755173654832
Lowering <class 'ir.PrintStat'> 127755174794336
Cannot lower 127755174796640 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 127755173654976
Lowering <class 'ir.IfStat'> 127755174794192
StatList : new 127755173655312
Lowering <class 'ir.Const'> 127755174794144
StatList : new 127755173655504
Lowering <class 'ir.Const'> 127755174794144
StatList : new 127755173655600
Lowering <class 'ir.PrintStat'> 127755179963296
Cannot lower 127755174517872 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 127755175744896 <class 'ir.Block'> 'Block' object has no attribute 'lower'

--- IR Tree After Lowering ---
<class 'ir.Block'> 127755175744896 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 127755174791920 {
	parent = 127755175744896
		children:
		<class 'ir.FunctionDef'> 127755174515184 {
		parent = 127755174791920
			body: 	<class 'ir.Block'> 127755174517776 {
			parent = 127755174515184
				defs: 	<class 'ir.DefinitionList'> 127755174517056 {
				parent = 127755174517776
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				body: 	<class 'ir.StatList'> 127755174517200 {
				parent = 127755174517776
					children:
					<class 'ir.StatList'> 127755174517344 {
					parent = 127755174517200
						children:
						<class 'ir.StatList'> 127755175745184 {
						parent = 127755174517344
							children:
							reg int t0 <- 1234
						}
						auto int test <- reg int t0
					}
					<class 'ir.StatList'> 127755174517632 {
					parent = 127755174517200
						children:
						<class 'ir.StatList'> 127755175674736 {
						parent = 127755174517632
							children:
							<class 'ir.StatList'> 127755175745712 {
							parent = 127755175674736
								children:
								reg int t1 <- global int x
							}
							<class 'ir.StatList'> 127755175741424 {
							parent = 127755175674736
								children:
								reg int t2 <- global int x
							}
							reg int32_t t3 <- reg int t1 times reg int t2
						}
						global int squ <- reg int32_t t3
					}
				}
			}
			symbol: 	auto function square
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 127755174517872 {
	parent = 127755175744896
		children:
		<class 'ir.StatList'> 127755174518112 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755175677856 {
			parent = 127755174518112
				children:
				<class 'ir.StatList'> 127755175677664 {
				parent = 127755175677856
					children:
					reg int t4 <- 1
				}
				reg int t5 <- minus reg int t4
			}
			global int x <- reg int t5
		}
		<class 'ir.StatList'> 127755174518256 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755175677328 {
			parent = 127755174518256
				children:
				read reg int t6
			}
			global int x <- reg int t6
		}
		<class 'ir.StatList'> 127755174665856 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755175752608 {
			parent = 127755174665856
				children:
				<class 'ir.StatList'> 127755175753040 {
				parent = 127755175752608
					children:
					reg int t7 <- global int x
				}
				<class 'ir.StatList'> 127755175752416 {
				parent = 127755175752608
					children:
					reg int t8 <- 100
				}
				reg int32_t t9 <- reg int t7 gtr reg int t8
			}
			branch on reg int32_t t9 to auto label label2
			<class 'ir.StatList'> 127755174523184 {
			parent = 127755174665856
				children:
				<class 'ir.StatList'> 127755174666144 {
				parent = 127755174523184
					children:
					<class 'ir.StatList'> 127755175481696 {
					parent = 127755174666144
						children:
						reg int t14 <- global int x
					}
					print reg int t14
				}
			}
			branch  to auto label label1
			label2: <class 'ir.StatList'> 127755174518640 {
			parent = 127755174665856
				children:
				<class 'ir.StatList'> 127755175428592 {
				parent = 127755174518640
					children:
					<class 'ir.StatList'> 127755174522944 {
					parent = 127755175428592
						children:
						<class 'ir.StatList'> 127755175429600 {
						parent = 127755174522944
							children:
							reg int t10 <- global int x
						}
						reg int t12 <- minus reg int t10
					}
					print reg int t12
				}
			}
			label1: <class 'ir.EmptyStat'> 127755174523280 {
			parent = 127755174665856
			}
		}
		<class 'ir.StatList'> 127755174523520 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174664944 {
			parent = 127755174523520
				children:
				reg int t15 <- 1
			}
			global int x <- reg int t15
		}
		<class 'ir.StatList'> 127755174736416 {
		parent = 127755174517872
			children:
			label3: <class 'ir.StatList'> 127755174665472 {
			parent = 127755174736416
				children:
				<class 'ir.StatList'> 127755174665136 {
				parent = 127755174665472
					children:
					reg int t16 <- global int x
				}
				<class 'ir.StatList'> 127755174665280 {
				parent = 127755174665472
					children:
					reg int t17 <- 10
				}
				reg int32_t t18 <- reg int t16 leq reg int t17
			}
			branch on not reg int32_t t18 to auto label label4
			<class 'ir.StatList'> 127755174523952 {
			parent = 127755174736416
				children:
				call  to auto function square
				<class 'ir.StatList'> 127755174524432 {
				parent = 127755174523952
					children:
					<class 'ir.StatList'> 127755174737376 {
					parent = 127755174524432
						children:
						<class 'ir.StatList'> 127755174665616 {
						parent = 127755174737376
							children:
							reg int t19 <- global int x
						}
						<class 'ir.StatList'> 127755174665760 {
						parent = 127755174737376
							children:
							reg int t20 <- 1
						}
						reg int32_t t21 <- reg int t19 plus reg int t20
					}
					global int x <- reg int32_t t21
				}
				<class 'ir.StatList'> 127755174736080 {
				parent = 127755174523952
					children:
					<class 'ir.StatList'> 127755174735984 {
					parent = 127755174736080
						children:
						reg int t23 <- global int squ
					}
					print reg int t23
				}
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 127755174524624 {
			parent = 127755174736416
			}
		}
		<class 'ir.StatList'> 127755174524816 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174736608 {
			parent = 127755174524816
				children:
				reg int t24 <- 101
			}
			global int x <- reg int t24
		}
		<class 'ir.StatList'> 127755174076480 {
		parent = 127755174517872
			children:
			label5: <class 'ir.StatList'> 127755174737472 {
			parent = 127755174076480
				children:
				<class 'ir.StatList'> 127755174737040 {
				parent = 127755174737472
					children:
					reg int t25 <- global int x
				}
				<class 'ir.StatList'> 127755174737184 {
				parent = 127755174737472
					children:
					reg int t26 <- 105
				}
				reg int32_t t27 <- reg int t25 leq reg int t26
			}
			branch on not reg int32_t t27 to auto label label6
			<class 'ir.StatList'> 127755174525296 {
			parent = 127755174076480
				children:
				<class 'ir.StatList'> 127755174159216 {
				parent = 127755174525296
					children:
					<class 'ir.StatList'> 127755174525872 {
					parent = 127755174159216
						children:
						reg int t33 <- global int x
					}
					<class 'ir.StatList'> 127755174158784 {
					parent = 127755174159216
						children:
						<class 'ir.StatList'> 127755174158544 {
						parent = 127755174158784
							children:
							<class 'ir.StatList'> 127755174738672 {
							parent = 127755174158544
								children:
								reg int t28 <- global int x
							}
							<class 'ir.StatList'> 127755174738816 {
							parent = 127755174158544
								children:
								reg int t29 <- 100
							}
							reg int32_t t30 <- reg int t28 minus reg int t29
						}
						<class 'ir.StatList'> 127755174525680 {
						parent = 127755174158784
							children:
							reg int t31 <- 1
						}
						reg int32_t t32 <- reg int32_t t30 times reg int t31
					}
					reg &char t34 <- &(global char[5] arr)
					reg &char t35 <- reg &char t34 plus reg int32_t t32
					[reg &char t35] <- reg int t33
				}
				<class 'ir.StatList'> 127755174161520 {
				parent = 127755174525296
					children:
					<class 'ir.StatList'> 127755174161376 {
					parent = 127755174161520
						children:
						<class 'ir.StatList'> 127755174159504 {
						parent = 127755174161376
							children:
							<class 'ir.StatList'> 127755174159984 {
							parent = 127755174159504
								children:
								<class 'ir.StatList'> 127755174159456 {
								parent = 127755174159984
									children:
									reg int t36 <- global int x
								}
								<class 'ir.StatList'> 127755174159792 {
								parent = 127755174159984
									children:
									reg int t37 <- 100
								}
								reg int32_t t38 <- reg int t36 minus reg int t37
							}
							<class 'ir.StatList'> 127755174526256 {
							parent = 127755174159504
								children:
								reg int t39 <- 1
							}
							reg int32_t t41 <- reg int32_t t38 times reg int t39
						}
						reg &char t46 <- &(global char[5] arr)
						reg &char t47 <- reg &char t46 plus reg int32_t t41
						reg char t45 <- [reg &char t47]
					}
					print reg char t45
				}
				<class 'ir.StatList'> 127755174526832 {
				parent = 127755174525296
					children:
					<class 'ir.StatList'> 127755174162144 {
					parent = 127755174526832
						children:
						<class 'ir.StatList'> 127755174161760 {
						parent = 127755174162144
							children:
							reg int t48 <- global int x
						}
						<class 'ir.StatList'> 127755174161952 {
						parent = 127755174162144
							children:
							reg int t49 <- 1
						}
						reg int32_t t50 <- reg int t48 plus reg int t49
					}
					global int x <- reg int32_t t50
				}
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 127755174526784 {
			parent = 127755174076480
			}
		}
		<class 'ir.StatList'> 127755174530496 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174076624 {
			parent = 127755174530496
				children:
				reg int t51 <- 1
			}
			global int x <- reg int t51
		}
		<class 'ir.StatList'> 127755174527040 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174076864 {
			parent = 127755174527040
				children:
				reg int t52 <- 1
			}
			global int y <- reg int t52
		}
		<class 'ir.StatList'> 127755174074160 {
		parent = 127755174517872
			children:
			label9: <class 'ir.StatList'> 127755174077392 {
			parent = 127755174074160
				children:
				<class 'ir.StatList'> 127755174077056 {
				parent = 127755174077392
					children:
					reg int t53 <- global int x
				}
				<class 'ir.StatList'> 127755174077200 {
				parent = 127755174077392
					children:
					reg int t54 <- 5
				}
				reg int32_t t55 <- reg int t53 leq reg int t54
			}
			branch on not reg int32_t t55 to auto label label10
			<class 'ir.StatList'> 127755174527424 {
			parent = 127755174074160
				children:
				<class 'ir.StatList'> 127755174073824 {
				parent = 127755174527424
					children:
					label7: <class 'ir.StatList'> 127755174077824 {
					parent = 127755174073824
						children:
						<class 'ir.StatList'> 127755174077488 {
						parent = 127755174077824
							children:
							reg int t56 <- global int y
						}
						<class 'ir.StatList'> 127755174077632 {
						parent = 127755174077824
							children:
							reg int t57 <- 5
						}
						reg int32_t t58 <- reg int t56 leq reg int t57
					}
					branch on not reg int32_t t58 to auto label label8
					<class 'ir.StatList'> 127755174527808 {
					parent = 127755174073824
						children:
						<class 'ir.StatList'> 127755174080416 {
						parent = 127755174527808
							children:
							<class 'ir.StatList'> 127755174079984 {
							parent = 127755174080416
								children:
								<class 'ir.StatList'> 127755174079456 {
								parent = 127755174079984
									children:
									<class 'ir.StatList'> 127755174078928 {
									parent = 127755174079456
										children:
										reg int t66 <- global int x
									}
									<class 'ir.StatList'> 127755174079072 {
									parent = 127755174079456
										children:
										reg int t67 <- 1
									}
									reg int32_t t69 <- reg int t66 times reg int t67
								}
								reg &char t71 <- &(global char[5] arr)
								reg &char t72 <- reg &char t71 plus reg int32_t t69
								reg char t70 <- [reg &char t72]
							}
							<class 'ir.StatList'> 127755174078880 {
							parent = 127755174080416
								children:
								<class 'ir.StatList'> 127755174078304 {
								parent = 127755174078880
									children:
									<class 'ir.StatList'> 127755174077968 {
									parent = 127755174078304
										children:
										reg int t59 <- global int x
									}
									<class 'ir.StatList'> 127755174078112 {
									parent = 127755174078304
										children:
										reg int t60 <- 10
									}
									reg int32_t t61 <- reg int t59 times reg int t60
								}
								<class 'ir.StatList'> 127755174078688 {
								parent = 127755174078880
									children:
									<class 'ir.StatList'> 127755174528288 {
									parent = 127755174078688
										children:
										reg int t62 <- global int y
									}
									<class 'ir.StatList'> 127755174078400 {
									parent = 127755174078688
										children:
										reg int t63 <- 2
									}
									reg int32_t t64 <- reg int t62 times reg int t63
								}
								reg int32_t t65 <- reg int32_t t61 plus reg int32_t t64
							}
							reg &short t73 <- &(global short[5, 5] multid)
							reg &short t74 <- reg &short t73 plus reg int32_t t65
							[reg &short t74] <- reg char t70
						}
						<class 'ir.StatList'> 127755175430752 {
						parent = 127755174527808
							children:
							<class 'ir.StatList'> 127755174736800 {
							parent = 127755175430752
								children:
								<class 'ir.StatList'> 127755174079312 {
								parent = 127755174736800
									children:
									<class 'ir.StatList'> 127755174073056 {
									parent = 127755174079312
										children:
										<class 'ir.StatList'> 127755174072528 {
										parent = 127755174073056
											children:
											reg int t75 <- global int x
										}
										<class 'ir.StatList'> 127755174072864 {
										parent = 127755174073056
											children:
											reg int t76 <- 10
										}
										reg int32_t t77 <- reg int t75 times reg int t76
									}
									<class 'ir.StatList'> 127755174073440 {
									parent = 127755174079312
										children:
										<class 'ir.StatList'> 127755174529344 {
										parent = 127755174073440
											children:
											reg int t78 <- global int y
										}
										<class 'ir.StatList'> 127755174073152 {
										parent = 127755174073440
											children:
											reg int t79 <- 2
										}
										reg int32_t t80 <- reg int t78 times reg int t79
									}
									reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
								}
								reg &short t87 <- &(global short[5, 5] multid)
								reg &short t88 <- reg &short t87 plus reg int32_t t82
								reg short t86 <- [reg &short t88]
							}
							print reg short t86
						}
						<class 'ir.StatList'> 127755174151744 {
						parent = 127755174527808
							children:
							<class 'ir.StatList'> 127755174523136 {
							parent = 127755174151744
								children:
								<class 'ir.StatList'> 127755174526304 {
								parent = 127755174523136
									children:
									reg int t89 <- global int x
								}
								<class 'ir.StatList'> 127755174522992 {
								parent = 127755174523136
									children:
									reg int t90 <- 1
								}
								reg int32_t t91 <- reg int t89 plus reg int t90
							}
							global int x <- reg int32_t t91
						}
						<class 'ir.StatList'> 127755174150304 {
						parent = 127755174527808
							children:
							<class 'ir.StatList'> 127755174528480 {
							parent = 127755174150304
								children:
								<class 'ir.StatList'> 127755174524048 {
								parent = 127755174528480
									children:
									reg int t92 <- global int y
								}
								<class 'ir.StatList'> 127755174526544 {
								parent = 127755174528480
									children:
									reg int t93 <- 1
								}
								reg int32_t t94 <- reg int t92 plus reg int t93
							}
							global int y <- reg int32_t t94
						}
					}
					branch  to auto label label7
					label8: <class 'ir.EmptyStat'> 127755174072432 {
					parent = 127755174073824
					}
				}
			}
			branch  to auto label label9
			label10: <class 'ir.EmptyStat'> 127755174073968 {
			parent = 127755174074160
			}
		}
		<class 'ir.StatList'> 127755174076032 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173855632 {
			parent = 127755174076032
				offset: 	None
				expr: 	<class 'ir.Const'> 127755174150592 {
				parent = 127755173855632
					value: 	10
					symbol: 	None
				}
				symbol: 	auto int a
			}
			label11: <class 'ir.StatList'> 127755174074688 {
			parent = 127755174076032
				children:
				<class 'ir.StatList'> 127755174074352 {
				parent = 127755174074688
					children:
					reg int t95 <- auto int a
				}
				<class 'ir.StatList'> 127755174074496 {
				parent = 127755174074688
					children:
					reg int t96 <- 20
				}
				reg int32_t t97 <- reg int t95 leq reg int t96
			}
			branch on not reg int32_t t97 to auto label label13
			<class 'ir.StatList'> 127755174075600 {
			parent = 127755174076032
				children:
				<class 'ir.StatList'> 127755174075456 {
				parent = 127755174075600
					children:
					reg int t102 <- auto int a
				}
				print reg int t102
			}
			<class 'ir.StatList'> 127755174075072 {
			parent = 127755174076032
				children:
				<class 'ir.StatList'> 127755173855824 {
				parent = 127755174075072
					children:
					reg int t98 <- auto int a
				}
				<class 'ir.StatList'> 127755174074880 {
				parent = 127755174075072
					children:
					reg int t99 <- 1
				}
				reg int32_t t100 <- reg int t98 plus reg int t99
			}
			auto int a <- reg int32_t t100
			branch  to auto label label11
			label13: <class 'ir.EmptyStat'> 127755174075792 {
			parent = 127755174076032
			}
		}
		<class 'ir.StatList'> 127755173856256 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174075936 {
			parent = 127755173856256
				children:
				reg int t103 <- 10
			}
			global int i <- reg int t103
		}
		<class 'ir.StatList'> 127755174035760 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174035664 {
			parent = 127755174035760
				children:
				reg int t105 <- 99991
			}
			print reg int t105
		}
		<class 'ir.StatList'> 127755174037632 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173857072 {
			parent = 127755174037632
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173856592 {
				parent = 127755173857072
					value: 	10
					symbol: 	None
				}
				symbol: 	auto int i
			}
			label14: <class 'ir.StatList'> 127755174036288 {
			parent = 127755174037632
				children:
				<class 'ir.StatList'> 127755174036000 {
				parent = 127755174036288
					children:
					reg int t106 <- auto int i
				}
				<class 'ir.StatList'> 127755174036096 {
				parent = 127755174036288
					children:
					reg int t107 <- 15
				}
				reg int32_t t108 <- reg int t106 leq reg int t107
			}
			branch on not reg int32_t t108 to auto label label16
			<class 'ir.StatList'> 127755174037200 {
			parent = 127755174037632
				children:
				<class 'ir.StatList'> 127755174037056 {
				parent = 127755174037200
					children:
					reg int t113 <- global int i
				}
				print reg int t113
			}
			<class 'ir.StatList'> 127755174036672 {
			parent = 127755174037632
				children:
				<class 'ir.StatList'> 127755173857264 {
				parent = 127755174036672
					children:
					reg int t109 <- auto int i
				}
				<class 'ir.StatList'> 127755174036480 {
				parent = 127755174036672
					children:
					reg int t110 <- 1
				}
				reg int32_t t111 <- reg int t109 plus reg int t110
			}
			auto int i <- reg int32_t t111
			branch  to auto label label14
			label16: <class 'ir.EmptyStat'> 127755174037392 {
			parent = 127755174037632
			}
		}
		<class 'ir.StatList'> 127755174038016 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174037920 {
			parent = 127755174038016
				children:
				reg int t115 <- 88881
			}
			print reg int t115
		}
		<class 'ir.StatList'> 127755174038496 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755174038400 {
			parent = 127755174038496
				children:
				reg int t117 <- 99992
			}
			print reg int t117
		}
		<class 'ir.StatList'> 127755173507952 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173858656 {
			parent = 127755173507952
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173858176 {
				parent = 127755173858656
					value: 	5
					symbol: 	None
				}
				symbol: 	auto int j
			}
			label17: <class 'ir.StatList'> 127755174039024 {
			parent = 127755173507952
				children:
				<class 'ir.StatList'> 127755174038736 {
				parent = 127755174039024
					children:
					reg int t118 <- auto int j
				}
				<class 'ir.StatList'> 127755174038832 {
				parent = 127755174039024
					children:
					reg int t119 <- 5
				}
				reg int32_t t120 <- reg int t118 leq reg int t119
			}
			branch on not reg int32_t t120 to auto label label19
			<class 'ir.StatList'> 127755173507520 {
			parent = 127755173507952
				children:
				<class 'ir.StatList'> 127755173507424 {
				parent = 127755173507520
					children:
					reg int t125 <- global int j
				}
				print reg int t125
			}
			<class 'ir.StatList'> 127755174039408 {
			parent = 127755173507952
				children:
				<class 'ir.StatList'> 127755173858848 {
				parent = 127755174039408
					children:
					reg int t121 <- auto int j
				}
				<class 'ir.StatList'> 127755174039216 {
				parent = 127755174039408
					children:
					reg int t122 <- 1
				}
				reg int32_t t123 <- reg int t121 plus reg int t122
			}
			auto int j <- reg int32_t t123
			branch  to auto label label17
			label19: <class 'ir.EmptyStat'> 127755173507712 {
			parent = 127755173507952
			}
		}
		<class 'ir.StatList'> 127755173508336 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173508240 {
			parent = 127755173508336
				children:
				reg int t127 <- 88882
			}
			print reg int t127
		}
		<class 'ir.StatList'> 127755173508816 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173508720 {
			parent = 127755173508816
				children:
				reg int t129 <- 99993
			}
			print reg int t129
		}
		<class 'ir.StatList'> 127755173527616 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173889120 {
			parent = 127755173527616
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173888448 {
				parent = 127755173889120
					value: 	10
					symbol: 	None
				}
				symbol: 	auto int k
			}
			label20: <class 'ir.StatList'> 127755173509344 {
			parent = 127755173527616
				children:
				<class 'ir.StatList'> 127755173509056 {
				parent = 127755173509344
					children:
					reg int t130 <- auto int k
				}
				<class 'ir.StatList'> 127755173509152 {
				parent = 127755173509344
					children:
					reg int t131 <- 5
				}
				reg int32_t t132 <- reg int t130 leq reg int t131
			}
			branch on not reg int32_t t132 to auto label label22
			<class 'ir.StatList'> 127755173510256 {
			parent = 127755173527616
				children:
				<class 'ir.StatList'> 127755173510112 {
				parent = 127755173510256
					children:
					reg int t137 <- 77777
				}
				print reg int t137
			}
			<class 'ir.StatList'> 127755173510736 {
			parent = 127755173527616
				children:
				<class 'ir.StatList'> 127755173510640 {
				parent = 127755173510736
					children:
					reg int t139 <- global int k
				}
				print reg int t139
			}
			<class 'ir.StatList'> 127755173509728 {
			parent = 127755173527616
				children:
				<class 'ir.StatList'> 127755173889312 {
				parent = 127755173509728
					children:
					reg int t133 <- auto int k
				}
				<class 'ir.StatList'> 127755173509536 {
				parent = 127755173509728
					children:
					reg int t134 <- 1
				}
				reg int32_t t135 <- reg int t133 plus reg int t134
			}
			auto int k <- reg int32_t t135
			branch  to auto label label20
			label22: <class 'ir.EmptyStat'> 127755173510928 {
			parent = 127755173527616
			}
		}
		<class 'ir.StatList'> 127755173528000 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173527904 {
			parent = 127755173528000
				children:
				reg int t141 <- 88883
			}
			print reg int t141
		}
		<class 'ir.StatList'> 127755173528480 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173528384 {
			parent = 127755173528480
				children:
				reg int t143 <- 99994
			}
			print reg int t143
		}
		<class 'ir.StatList'> 127755173530352 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173890704 {
			parent = 127755173530352
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173890224 {
				parent = 127755173890704
					value: 	1
					symbol: 	None
				}
				symbol: 	auto int m
			}
			label23: <class 'ir.StatList'> 127755173529008 {
			parent = 127755173530352
				children:
				<class 'ir.StatList'> 127755173528720 {
				parent = 127755173529008
					children:
					reg int t144 <- auto int m
				}
				<class 'ir.StatList'> 127755173528816 {
				parent = 127755173529008
					children:
					reg int t145 <- 6
				}
				reg int32_t t146 <- reg int t144 leq reg int t145
			}
			branch on not reg int32_t t146 to auto label label25
			<class 'ir.StatList'> 127755173529920 {
			parent = 127755173530352
				children:
				<class 'ir.StatList'> 127755173529776 {
				parent = 127755173529920
					children:
					reg int t151 <- global int m
				}
				print reg int t151
			}
			<class 'ir.StatList'> 127755173529392 {
			parent = 127755173530352
				children:
				<class 'ir.StatList'> 127755173890896 {
				parent = 127755173529392
					children:
					reg int t147 <- auto int m
				}
				<class 'ir.StatList'> 127755173529200 {
				parent = 127755173529392
					children:
					reg int t148 <- 1
				}
				reg int32_t t149 <- reg int t147 plus reg int t148
			}
			auto int m <- reg int32_t t149
			branch  to auto label label23
			label25: <class 'ir.EmptyStat'> 127755173530112 {
			parent = 127755173530352
			}
		}
		<class 'ir.StatList'> 127755173530736 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173530640 {
			parent = 127755173530736
				children:
				reg int t153 <- 88884
			}
			print reg int t153
		}
		<class 'ir.StatList'> 127755173531216 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173531120 {
			parent = 127755173531216
				children:
				reg int t155 <- 99995
			}
			print reg int t155
		}
		<class 'ir.StatList'> 127755173553632 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173892304 {
			parent = 127755173553632
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173891760 {
				parent = 127755173892304
					value: 	1
					symbol: 	None
				}
				symbol: 	auto int n
			}
			label26: <class 'ir.StatList'> 127755173552288 {
			parent = 127755173553632
				children:
				<class 'ir.StatList'> 127755173531456 {
				parent = 127755173552288
					children:
					reg int t156 <- auto int n
				}
				<class 'ir.StatList'> 127755173531552 {
				parent = 127755173552288
					children:
					reg int t157 <- 7
				}
				reg int32_t t158 <- reg int t156 leq reg int t157
			}
			branch on not reg int32_t t158 to auto label label28
			<class 'ir.StatList'> 127755173553200 {
			parent = 127755173553632
				children:
				<class 'ir.StatList'> 127755173553056 {
				parent = 127755173553200
					children:
					reg int t163 <- global int n
				}
				print reg int t163
			}
			<class 'ir.StatList'> 127755173552672 {
			parent = 127755173553632
				children:
				<class 'ir.StatList'> 127755173891856 {
				parent = 127755173552672
					children:
					reg int t159 <- auto int n
				}
				<class 'ir.StatList'> 127755173552480 {
				parent = 127755173552672
					children:
					reg int t160 <- 1
				}
				reg int32_t t161 <- reg int t159 plus reg int t160
			}
			auto int n <- reg int32_t t161
			branch  to auto label label26
			label28: <class 'ir.EmptyStat'> 127755173553392 {
			parent = 127755173553632
			}
		}
		<class 'ir.StatList'> 127755173554016 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173553920 {
			parent = 127755173554016
				children:
				reg int t165 <- 88885
			}
			print reg int t165
		}
		<class 'ir.StatList'> 127755173554496 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173554400 {
			parent = 127755173554496
				children:
				reg int t167 <- 99996
			}
			print reg int t167
		}
		<class 'ir.StatList'> 127755173564624 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173893888 {
			parent = 127755173564624
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173893408 {
				parent = 127755173893888
					value: 	10
					symbol: 	None
				}
				symbol: 	auto int p
			}
			label29: <class 'ir.StatList'> 127755173555024 {
			parent = 127755173564624
				children:
				<class 'ir.StatList'> 127755173554736 {
				parent = 127755173555024
					children:
					reg int t168 <- auto int p
				}
				<class 'ir.StatList'> 127755173554832 {
				parent = 127755173555024
					children:
					reg int t169 <- 12
				}
				reg int32_t t170 <- reg int t168 leq reg int t169
			}
			branch on not reg int32_t t170 to auto label label31
			<class 'ir.StatList'> 127755173555936 {
			parent = 127755173564624
				children:
				<class 'ir.StatList'> 127755173555792 {
				parent = 127755173555936
					children:
					reg int t175 <- global int p
				}
				print reg int t175
			}
			<class 'ir.StatList'> 127755173555408 {
			parent = 127755173564624
				children:
				<class 'ir.StatList'> 127755173894080 {
				parent = 127755173555408
					children:
					reg int t171 <- auto int p
				}
				<class 'ir.StatList'> 127755173555216 {
				parent = 127755173555408
					children:
					reg int t172 <- 1
				}
				reg int32_t t173 <- reg int t171 plus reg int t172
			}
			auto int p <- reg int32_t t173
			branch  to auto label label29
			label31: <class 'ir.EmptyStat'> 127755173556128 {
			parent = 127755173564624
			}
		}
		<class 'ir.StatList'> 127755173565008 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173564912 {
			parent = 127755173565008
				children:
				reg int t177 <- 88886
			}
			print reg int t177
		}
		<class 'ir.StatList'> 127755173894704 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173565200 {
			parent = 127755173894704
				children:
				reg int t178 <- 0
			}
			global int sum <- reg int t178
		}
		<class 'ir.StatList'> 127755173565680 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173565584 {
			parent = 127755173565680
				children:
				reg int t180 <- 99997
			}
			print reg int t180
		}
		<class 'ir.StatList'> 127755173580912 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755173896048 {
			parent = 127755173580912
				offset: 	None
				expr: 	<class 'ir.Const'> 127755173895040 {
				parent = 127755173896048
					value: 	1
					symbol: 	None
				}
				symbol: 	auto int q
			}
			label32: <class 'ir.StatList'> 127755173566208 {
			parent = 127755173580912
				children:
				<class 'ir.StatList'> 127755173565920 {
				parent = 127755173566208
					children:
					reg int t181 <- auto int q
				}
				<class 'ir.StatList'> 127755173566016 {
				parent = 127755173566208
					children:
					reg int t182 <- 5
				}
				reg int32_t t183 <- reg int t181 leq reg int t182
			}
			branch on not reg int32_t t183 to auto label label34
			<class 'ir.StatList'> 127755173895520 {
			parent = 127755173580912
				children:
				<class 'ir.StatList'> 127755173567168 {
				parent = 127755173895520
					children:
					<class 'ir.StatList'> 127755173566736 {
					parent = 127755173567168
						children:
						reg int t187 <- global int sum
					}
					<class 'ir.StatList'> 127755173566976 {
					parent = 127755173567168
						children:
						reg int t188 <- global int q
					}
					reg int32_t t189 <- reg int t187 plus reg int t188
				}
				global int sum <- reg int32_t t189
			}
			<class 'ir.StatList'> 127755173567648 {
			parent = 127755173580912
				children:
				<class 'ir.StatList'> 127755173567552 {
				parent = 127755173567648
					children:
					reg int t191 <- global int q
				}
				print reg int t191
			}
			<class 'ir.StatList'> 127755173568128 {
			parent = 127755173580912
				children:
				<class 'ir.StatList'> 127755173568032 {
				parent = 127755173568128
					children:
					reg int t193 <- global int sum
				}
				print reg int t193
			}
			<class 'ir.StatList'> 127755173566592 {
			parent = 127755173580912
				children:
				<class 'ir.StatList'> 127755173895136 {
				parent = 127755173566592
					children:
					reg int t184 <- auto int q
				}
				<class 'ir.StatList'> 127755173566400 {
				parent = 127755173566592
					children:
					reg int t185 <- 1
				}
				reg int32_t t186 <- reg int t184 plus reg int t185
			}
			auto int q <- reg int32_t t186
			branch  to auto label label32
			label34: <class 'ir.EmptyStat'> 127755173568320 {
			parent = 127755173580912
			}
		}
		<class 'ir.StatList'> 127755173581296 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173581200 {
			parent = 127755173581296
				children:
				reg int t195 <- global int sum
			}
			print reg int t195
		}
		<class 'ir.StatList'> 127755173581776 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173581680 {
			parent = 127755173581776
				children:
				reg int t197 <- 88887
			}
			print reg int t197
		}
		<class 'ir.StatList'> 127755173826416 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173581968 {
			parent = 127755173826416
				children:
				reg int t198 <- 100
			}
			global int x <- reg int t198
		}
		<class 'ir.StatList'> 127755173582448 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173582352 {
			parent = 127755173582448
				children:
				reg int t200 <- 99998
			}
			print reg int t200
		}
		<class 'ir.StatList'> 127755173584848 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755174454080 {
			parent = 127755173584848
				offset: 	None
				expr: 	<class 'ir.Const'> 127755174456432 {
				parent = 127755174454080
					value: 	1
					symbol: 	None
				}
				symbol: 	auto int r
			}
			label35: <class 'ir.StatList'> 127755173582976 {
			parent = 127755173584848
				children:
				<class 'ir.StatList'> 127755173582688 {
				parent = 127755173582976
					children:
					reg int t201 <- auto int r
				}
				<class 'ir.StatList'> 127755173582784 {
				parent = 127755173582976
					children:
					reg int t202 <- 3
				}
				reg int32_t t203 <- reg int t201 leq reg int t202
			}
			branch on not reg int32_t t203 to auto label label37
			<class 'ir.StatList'> 127755174453744 {
			parent = 127755173584848
				children:
				<class 'ir.StatList'> 127755173583936 {
				parent = 127755174453744
					children:
					<class 'ir.StatList'> 127755173583504 {
					parent = 127755173583936
						children:
						reg int t207 <- global int x
					}
					<class 'ir.StatList'> 127755173583744 {
					parent = 127755173583936
						children:
						reg int t208 <- global int r
					}
					reg int32_t t209 <- reg int t207 plus reg int t208
				}
				global int x <- reg int32_t t209
			}
			<class 'ir.StatList'> 127755173584416 {
			parent = 127755173584848
				children:
				<class 'ir.StatList'> 127755173584320 {
				parent = 127755173584416
					children:
					reg int t211 <- global int x
				}
				print reg int t211
			}
			<class 'ir.StatList'> 127755173583360 {
			parent = 127755173584848
				children:
				<class 'ir.StatList'> 127755174456048 {
				parent = 127755173583360
					children:
					reg int t204 <- auto int r
				}
				<class 'ir.StatList'> 127755173583168 {
				parent = 127755173583360
					children:
					reg int t205 <- 1
				}
				reg int32_t t206 <- reg int t204 plus reg int t205
			}
			auto int r <- reg int32_t t206
			branch  to auto label label35
			label37: <class 'ir.EmptyStat'> 127755173584608 {
			parent = 127755173584848
			}
		}
		<class 'ir.StatList'> 127755173605776 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173605680 {
			parent = 127755173605776
				children:
				reg int t213 <- global int x
			}
			print reg int t213
		}
		<class 'ir.StatList'> 127755173606256 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173606160 {
			parent = 127755173606256
				children:
				reg int t215 <- 88888
			}
			print reg int t215
		}
		<class 'ir.StatList'> 127755173606736 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173606640 {
			parent = 127755173606736
				children:
				reg int t217 <- 999990
			}
			print reg int t217
		}
		<class 'ir.StatList'> 127755174454992 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173606928 {
			parent = 127755174454992
				children:
				reg int t218 <- 0
			}
			global int sm_idx <- reg int t218
		}
		<class 'ir.StatList'> 127755173627408 {
		parent = 127755174517872
			children:
			<class 'ir.AssignStat'> 127755174516960 {
			parent = 127755173627408
				offset: 	None
				expr: 	<class 'ir.Const'> 127755174454848 {
				parent = 127755174516960
					value: 	0
					symbol: 	None
				}
				symbol: 	auto int sm_idx
			}
			label38: <class 'ir.StatList'> 127755173607504 {
			parent = 127755173627408
				children:
				<class 'ir.StatList'> 127755173607120 {
				parent = 127755173607504
					children:
					reg int t219 <- auto int sm_idx
				}
				<class 'ir.StatList'> 127755173607312 {
				parent = 127755173607504
					children:
					reg int t220 <- 127
				}
				reg int32_t t221 <- reg int t219 leq reg int t220
			}
			branch on not reg int32_t t221 to auto label label40
			<class 'ir.StatList'> 127755173626880 {
			parent = 127755173627408
				children:
				<class 'ir.StatList'> 127755173626448 {
				parent = 127755173626880
					children:
					<class 'ir.StatList'> 127755173626112 {
					parent = 127755173626448
						children:
						<class 'ir.StatList'> 127755173609136 {
						parent = 127755173626112
							children:
							<class 'ir.StatList'> 127755173608608 {
							parent = 127755173609136
								children:
								reg int t228 <- global int sm_idx
							}
							<class 'ir.StatList'> 127755173608752 {
							parent = 127755173609136
								children:
								reg int t229 <- 4
							}
							reg int32_t t231 <- reg int t228 times reg int t229
						}
						reg &int t233 <- &(global int[128] sm_source_arr)
						reg &int t234 <- reg &int t233 plus reg int32_t t231
						reg int t232 <- [reg &int t234]
					}
					<class 'ir.StatList'> 127755173626256 {
					parent = 127755173626448
						children:
						reg int t235 <- global int sm_idx
					}
					reg int32_t t236 <- reg int t232 plus reg int t235
				}
				<class 'ir.StatList'> 127755173608464 {
				parent = 127755173626880
					children:
					<class 'ir.StatList'> 127755173608032 {
					parent = 127755173608464
						children:
						reg int t225 <- global int sm_idx
					}
					<class 'ir.StatList'> 127755173608272 {
					parent = 127755173608464
						children:
						reg int t226 <- 4
					}
					reg int32_t t227 <- reg int t225 times reg int t226
				}
				reg &int t237 <- &(global int[128] sm_dest_arr)
				reg &int t238 <- reg &int t237 plus reg int32_t t227
				[reg &int t238] <- reg int32_t t236
			}
			<class 'ir.StatList'> 127755173607888 {
			parent = 127755173627408
				children:
				<class 'ir.StatList'> 127755174454752 {
				parent = 127755173607888
					children:
					reg int t222 <- auto int sm_idx
				}
				<class 'ir.StatList'> 127755173607696 {
				parent = 127755173607888
					children:
					reg int t223 <- 1
				}
				reg int32_t t224 <- reg int t222 plus reg int t223
			}
			auto int sm_idx <- reg int32_t t224
			branch  to auto label label38
			label40: <class 'ir.EmptyStat'> 127755173627024 {
			parent = 127755173627408
			}
		}
		<class 'ir.StatList'> 127755173654976 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173627840 {
			parent = 127755173654976
				children:
				<class 'ir.StatList'> 127755173627312 {
				parent = 127755173627840
					children:
					reg int t239 <- 127
				}
				<class 'ir.StatList'> 127755173627648 {
				parent = 127755173627840
					children:
					reg int t240 <- 0
				}
				reg int32_t t241 <- reg int t239 geq reg int t240
			}
			branch on not reg int32_t t241 to auto label label41
			<class 'ir.StatList'> 127755174796640 {
			parent = 127755173654976
				children:
				<class 'ir.StatList'> 127755173628224 {
				parent = 127755174796640
					children:
					<class 'ir.StatList'> 127755173628128 {
					parent = 127755173628224
						children:
						reg int t243 <- 76543
					}
					print reg int t243
				}
				<class 'ir.StatList'> 127755173630304 {
				parent = 127755174796640
					children:
					<class 'ir.StatList'> 127755173630064 {
					parent = 127755173630304
						children:
						<class 'ir.StatList'> 127755173629040 {
						parent = 127755173630064
							children:
							<class 'ir.StatList'> 127755173628464 {
							parent = 127755173629040
								children:
								reg int t244 <- 0
							}
							<class 'ir.StatList'> 127755173628656 {
							parent = 127755173629040
								children:
								reg int t245 <- 4
							}
							reg int32_t t247 <- reg int t244 times reg int t245
						}
						reg &int t252 <- &(global int[128] sm_dest_arr)
						reg &int t253 <- reg &int t252 plus reg int32_t t247
						reg int t251 <- [reg &int t253]
					}
					print reg int t251
				}
				<class 'ir.StatList'> 127755173632272 {
				parent = 127755174796640
					children:
					<class 'ir.StatList'> 127755173632128 {
					parent = 127755173632272
						children:
						<class 'ir.StatList'> 127755173631168 {
						parent = 127755173632128
							children:
							<class 'ir.StatList'> 127755173630496 {
							parent = 127755173631168
								children:
								reg int t254 <- 64
							}
							<class 'ir.StatList'> 127755173630784 {
							parent = 127755173631168
								children:
								reg int t255 <- 4
							}
							reg int32_t t257 <- reg int t254 times reg int t255
						}
						reg &int t262 <- &(global int[128] sm_dest_arr)
						reg &int t263 <- reg &int t262 plus reg int32_t t257
						reg int t261 <- [reg &int t263]
					}
					print reg int t261
				}
				<class 'ir.StatList'> 127755173654832 {
				parent = 127755174796640
					children:
					<class 'ir.StatList'> 127755173654688 {
					parent = 127755173654832
						children:
						<class 'ir.StatList'> 127755173633184 {
						parent = 127755173654688
							children:
							<class 'ir.StatList'> 127755173632512 {
							parent = 127755173633184
								children:
								reg int t264 <- 127
							}
							<class 'ir.StatList'> 127755173632800 {
							parent = 127755173633184
								children:
								reg int t265 <- 4
							}
							reg int32_t t267 <- reg int t264 times reg int t265
						}
						reg &int t272 <- &(global int[128] sm_dest_arr)
						reg &int t273 <- reg &int t272 plus reg int32_t t267
						reg int t271 <- [reg &int t273]
					}
					print reg int t271
				}
			}
			label41: <class 'ir.EmptyStat'> 127755173655024 {
			parent = 127755173654976
			}
		}
		<class 'ir.StatList'> 127755173655600 {
		parent = 127755174517872
			children:
			<class 'ir.StatList'> 127755173655504 {
			parent = 127755173655600
				children:
				reg int t275 <- 888880
			}
			print reg int t275
		}
	}
}

--- Navigating: Applying Flattening ---
Flattening 127755175745184 into 127755174517344
Flattening <class 'ir.StatList'> 127755175745184
Flattening 127755174517344 into 127755174517200
Flattening <class 'ir.StatList'> 127755174517344
Flattening 127755175745712 into 127755175674736
Flattening <class 'ir.StatList'> 127755175745712
Flattening 127755175741424 into 127755175674736
Flattening <class 'ir.StatList'> 127755175741424
Flattening 127755175674736 into 127755174517632
Flattening <class 'ir.StatList'> 127755175674736
Flattening 127755174517632 into 127755174517200
Flattening <class 'ir.StatList'> 127755174517632
Not flattening 127755174517200 into 127755174517776 of type <class 'ir.Block'>
Flattening <class 'ir.StatList'> 127755174517200
Failed!
Flattening 127755175677664 into 127755175677856
Flattening <class 'ir.StatList'> 127755175677664
Flattening 127755175677856 into 127755174518112
Flattening <class 'ir.StatList'> 127755175677856
Flattening 127755174518112 into 127755174517872
Flattening <class 'ir.StatList'> 127755174518112
Flattening 127755175677328 into 127755174518256
Flattening <class 'ir.StatList'> 127755175677328
Flattening 127755174518256 into 127755174517872
Flattening <class 'ir.StatList'> 127755174518256
Flattening 127755175753040 into 127755175752608
Flattening <class 'ir.StatList'> 127755175753040
Flattening 127755175752416 into 127755175752608
Flattening <class 'ir.StatList'> 127755175752416
Flattening 127755175752608 into 127755174665856
Flattening <class 'ir.StatList'> 127755175752608
Flattening 127755175481696 into 127755174666144
Flattening <class 'ir.StatList'> 127755175481696
Flattening 127755174666144 into 127755174523184
Flattening <class 'ir.StatList'> 127755174666144
Flattening 127755174523184 into 127755174665856
Flattening <class 'ir.StatList'> 127755174523184
Flattening 127755175429600 into 127755174522944
Flattening <class 'ir.StatList'> 127755175429600
Flattening 127755174522944 into 127755175428592
Flattening <class 'ir.StatList'> 127755174522944
Flattening 127755175428592 into 127755174518640
Flattening <class 'ir.StatList'> 127755175428592
Flattening 127755174518640 into 127755174665856
Flattening <class 'ir.StatList'> 127755174518640
Flattening 127755174665856 into 127755174517872
Flattening <class 'ir.StatList'> 127755174665856
Flattening 127755174664944 into 127755174523520
Flattening <class 'ir.StatList'> 127755174664944
Flattening 127755174523520 into 127755174517872
Flattening <class 'ir.StatList'> 127755174523520
Flattening 127755174665136 into 127755174665472
Flattening <class 'ir.StatList'> 127755174665136
Flattening 127755174665280 into 127755174665472
Flattening <class 'ir.StatList'> 127755174665280
Flattening 127755174665472 into 127755174736416
Flattening <class 'ir.StatList'> 127755174665472
Flattening 127755174665616 into 127755174737376
Flattening <class 'ir.StatList'> 127755174665616
Flattening 127755174665760 into 127755174737376
Flattening <class 'ir.StatList'> 127755174665760
Flattening 127755174737376 into 127755174524432
Flattening <class 'ir.StatList'> 127755174737376
Flattening 127755174524432 into 127755174523952
Flattening <class 'ir.StatList'> 127755174524432
Flattening 127755174735984 into 127755174736080
Flattening <class 'ir.StatList'> 127755174735984
Flattening 127755174736080 into 127755174523952
Flattening <class 'ir.StatList'> 127755174736080
Flattening 127755174523952 into 127755174736416
Flattening <class 'ir.StatList'> 127755174523952
Flattening 127755174736416 into 127755174517872
Flattening <class 'ir.StatList'> 127755174736416
Flattening 127755174736608 into 127755174524816
Flattening <class 'ir.StatList'> 127755174736608
Flattening 127755174524816 into 127755174517872
Flattening <class 'ir.StatList'> 127755174524816
Flattening 127755174737040 into 127755174737472
Flattening <class 'ir.StatList'> 127755174737040
Flattening 127755174737184 into 127755174737472
Flattening <class 'ir.StatList'> 127755174737184
Flattening 127755174737472 into 127755174076480
Flattening <class 'ir.StatList'> 127755174737472
Flattening 127755174525872 into 127755174159216
Flattening <class 'ir.StatList'> 127755174525872
Flattening 127755174738672 into 127755174158544
Flattening <class 'ir.StatList'> 127755174738672
Flattening 127755174738816 into 127755174158544
Flattening <class 'ir.StatList'> 127755174738816
Flattening 127755174158544 into 127755174158784
Flattening <class 'ir.StatList'> 127755174158544
Flattening 127755174525680 into 127755174158784
Flattening <class 'ir.StatList'> 127755174525680
Flattening 127755174158784 into 127755174159216
Flattening <class 'ir.StatList'> 127755174158784
Flattening 127755174159216 into 127755174525296
Flattening <class 'ir.StatList'> 127755174159216
Flattening 127755174159456 into 127755174159984
Flattening <class 'ir.StatList'> 127755174159456
Flattening 127755174159792 into 127755174159984
Flattening <class 'ir.StatList'> 127755174159792
Flattening 127755174159984 into 127755174159504
Flattening <class 'ir.StatList'> 127755174159984
Flattening 127755174526256 into 127755174159504
Flattening <class 'ir.StatList'> 127755174526256
Flattening 127755174159504 into 127755174161376
Flattening <class 'ir.StatList'> 127755174159504
Flattening 127755174161376 into 127755174161520
Flattening <class 'ir.StatList'> 127755174161376
Flattening 127755174161520 into 127755174525296
Flattening <class 'ir.StatList'> 127755174161520
Flattening 127755174161760 into 127755174162144
Flattening <class 'ir.StatList'> 127755174161760
Flattening 127755174161952 into 127755174162144
Flattening <class 'ir.StatList'> 127755174161952
Flattening 127755174162144 into 127755174526832
Flattening <class 'ir.StatList'> 127755174162144
Flattening 127755174526832 into 127755174525296
Flattening <class 'ir.StatList'> 127755174526832
Flattening 127755174525296 into 127755174076480
Flattening <class 'ir.StatList'> 127755174525296
Flattening 127755174076480 into 127755174517872
Flattening <class 'ir.StatList'> 127755174076480
Flattening 127755174076624 into 127755174530496
Flattening <class 'ir.StatList'> 127755174076624
Flattening 127755174530496 into 127755174517872
Flattening <class 'ir.StatList'> 127755174530496
Flattening 127755174076864 into 127755174527040
Flattening <class 'ir.StatList'> 127755174076864
Flattening 127755174527040 into 127755174517872
Flattening <class 'ir.StatList'> 127755174527040
Flattening 127755174077056 into 127755174077392
Flattening <class 'ir.StatList'> 127755174077056
Flattening 127755174077200 into 127755174077392
Flattening <class 'ir.StatList'> 127755174077200
Flattening 127755174077392 into 127755174074160
Flattening <class 'ir.StatList'> 127755174077392
Flattening 127755174077488 into 127755174077824
Flattening <class 'ir.StatList'> 127755174077488
Flattening 127755174077632 into 127755174077824
Flattening <class 'ir.StatList'> 127755174077632
Flattening 127755174077824 into 127755174073824
Flattening <class 'ir.StatList'> 127755174077824
Flattening 127755174078928 into 127755174079456
Flattening <class 'ir.StatList'> 127755174078928
Flattening 127755174079072 into 127755174079456
Flattening <class 'ir.StatList'> 127755174079072
Flattening 127755174079456 into 127755174079984
Flattening <class 'ir.StatList'> 127755174079456
Flattening 127755174079984 into 127755174080416
Flattening <class 'ir.StatList'> 127755174079984
Flattening 127755174077968 into 127755174078304
Flattening <class 'ir.StatList'> 127755174077968
Flattening 127755174078112 into 127755174078304
Flattening <class 'ir.StatList'> 127755174078112
Flattening 127755174078304 into 127755174078880
Flattening <class 'ir.StatList'> 127755174078304
Flattening 127755174528288 into 127755174078688
Flattening <class 'ir.StatList'> 127755174528288
Flattening 127755174078400 into 127755174078688
Flattening <class 'ir.StatList'> 127755174078400
Flattening 127755174078688 into 127755174078880
Flattening <class 'ir.StatList'> 127755174078688
Flattening 127755174078880 into 127755174080416
Flattening <class 'ir.StatList'> 127755174078880
Flattening 127755174080416 into 127755174527808
Flattening <class 'ir.StatList'> 127755174080416
Flattening 127755174072528 into 127755174073056
Flattening <class 'ir.StatList'> 127755174072528
Flattening 127755174072864 into 127755174073056
Flattening <class 'ir.StatList'> 127755174072864
Flattening 127755174073056 into 127755174079312
Flattening <class 'ir.StatList'> 127755174073056
Flattening 127755174529344 into 127755174073440
Flattening <class 'ir.StatList'> 127755174529344
Flattening 127755174073152 into 127755174073440
Flattening <class 'ir.StatList'> 127755174073152
Flattening 127755174073440 into 127755174079312
Flattening <class 'ir.StatList'> 127755174073440
Flattening 127755174079312 into 127755174736800
Flattening <class 'ir.StatList'> 127755174079312
Flattening 127755174736800 into 127755175430752
Flattening <class 'ir.StatList'> 127755174736800
Flattening 127755175430752 into 127755174527808
Flattening <class 'ir.StatList'> 127755175430752
Flattening 127755174526304 into 127755174523136
Flattening <class 'ir.StatList'> 127755174526304
Flattening 127755174522992 into 127755174523136
Flattening <class 'ir.StatList'> 127755174522992
Flattening 127755174523136 into 127755174151744
Flattening <class 'ir.StatList'> 127755174523136
Flattening 127755174151744 into 127755174527808
Flattening <class 'ir.StatList'> 127755174151744
Flattening 127755174524048 into 127755174528480
Flattening <class 'ir.StatList'> 127755174524048
Flattening 127755174526544 into 127755174528480
Flattening <class 'ir.StatList'> 127755174526544
Flattening 127755174528480 into 127755174150304
Flattening <class 'ir.StatList'> 127755174528480
Flattening 127755174150304 into 127755174527808
Flattening <class 'ir.StatList'> 127755174150304
Flattening 127755174527808 into 127755174073824
Flattening <class 'ir.StatList'> 127755174527808
Flattening 127755174073824 into 127755174527424
Flattening <class 'ir.StatList'> 127755174073824
Flattening 127755174527424 into 127755174074160
Flattening <class 'ir.StatList'> 127755174527424
Flattening 127755174074160 into 127755174517872
Flattening <class 'ir.StatList'> 127755174074160
Flattening 127755174074352 into 127755174074688
Flattening <class 'ir.StatList'> 127755174074352
Flattening 127755174074496 into 127755174074688
Flattening <class 'ir.StatList'> 127755174074496
Flattening 127755174074688 into 127755174076032
Flattening <class 'ir.StatList'> 127755174074688
Flattening 127755174075456 into 127755174075600
Flattening <class 'ir.StatList'> 127755174075456
Flattening 127755174075600 into 127755174076032
Flattening <class 'ir.StatList'> 127755174075600
Flattening 127755173855824 into 127755174075072
Flattening <class 'ir.StatList'> 127755173855824
Flattening 127755174074880 into 127755174075072
Flattening <class 'ir.StatList'> 127755174074880
Flattening 127755174075072 into 127755174076032
Flattening <class 'ir.StatList'> 127755174075072
Flattening 127755174076032 into 127755174517872
Flattening <class 'ir.StatList'> 127755174076032
Flattening 127755174075936 into 127755173856256
Flattening <class 'ir.StatList'> 127755174075936
Flattening 127755173856256 into 127755174517872
Flattening <class 'ir.StatList'> 127755173856256
Flattening 127755174035664 into 127755174035760
Flattening <class 'ir.StatList'> 127755174035664
Flattening 127755174035760 into 127755174517872
Flattening <class 'ir.StatList'> 127755174035760
Flattening 127755174036000 into 127755174036288
Flattening <class 'ir.StatList'> 127755174036000
Flattening 127755174036096 into 127755174036288
Flattening <class 'ir.StatList'> 127755174036096
Flattening 127755174036288 into 127755174037632
Flattening <class 'ir.StatList'> 127755174036288
Flattening 127755174037056 into 127755174037200
Flattening <class 'ir.StatList'> 127755174037056
Flattening 127755174037200 into 127755174037632
Flattening <class 'ir.StatList'> 127755174037200
Flattening 127755173857264 into 127755174036672
Flattening <class 'ir.StatList'> 127755173857264
Flattening 127755174036480 into 127755174036672
Flattening <class 'ir.StatList'> 127755174036480
Flattening 127755174036672 into 127755174037632
Flattening <class 'ir.StatList'> 127755174036672
Flattening 127755174037632 into 127755174517872
Flattening <class 'ir.StatList'> 127755174037632
Flattening 127755174037920 into 127755174038016
Flattening <class 'ir.StatList'> 127755174037920
Flattening 127755174038016 into 127755174517872
Flattening <class 'ir.StatList'> 127755174038016
Flattening 127755174038400 into 127755174038496
Flattening <class 'ir.StatList'> 127755174038400
Flattening 127755174038496 into 127755174517872
Flattening <class 'ir.StatList'> 127755174038496
Flattening 127755174038736 into 127755174039024
Flattening <class 'ir.StatList'> 127755174038736
Flattening 127755174038832 into 127755174039024
Flattening <class 'ir.StatList'> 127755174038832
Flattening 127755174039024 into 127755173507952
Flattening <class 'ir.StatList'> 127755174039024
Flattening 127755173507424 into 127755173507520
Flattening <class 'ir.StatList'> 127755173507424
Flattening 127755173507520 into 127755173507952
Flattening <class 'ir.StatList'> 127755173507520
Flattening 127755173858848 into 127755174039408
Flattening <class 'ir.StatList'> 127755173858848
Flattening 127755174039216 into 127755174039408
Flattening <class 'ir.StatList'> 127755174039216
Flattening 127755174039408 into 127755173507952
Flattening <class 'ir.StatList'> 127755174039408
Flattening 127755173507952 into 127755174517872
Flattening <class 'ir.StatList'> 127755173507952
Flattening 127755173508240 into 127755173508336
Flattening <class 'ir.StatList'> 127755173508240
Flattening 127755173508336 into 127755174517872
Flattening <class 'ir.StatList'> 127755173508336
Flattening 127755173508720 into 127755173508816
Flattening <class 'ir.StatList'> 127755173508720
Flattening 127755173508816 into 127755174517872
Flattening <class 'ir.StatList'> 127755173508816
Flattening 127755173509056 into 127755173509344
Flattening <class 'ir.StatList'> 127755173509056
Flattening 127755173509152 into 127755173509344
Flattening <class 'ir.StatList'> 127755173509152
Flattening 127755173509344 into 127755173527616
Flattening <class 'ir.StatList'> 127755173509344
Flattening 127755173510112 into 127755173510256
Flattening <class 'ir.StatList'> 127755173510112
Flattening 127755173510256 into 127755173527616
Flattening <class 'ir.StatList'> 127755173510256
Flattening 127755173510640 into 127755173510736
Flattening <class 'ir.StatList'> 127755173510640
Flattening 127755173510736 into 127755173527616
Flattening <class 'ir.StatList'> 127755173510736
Flattening 127755173889312 into 127755173509728
Flattening <class 'ir.StatList'> 127755173889312
Flattening 127755173509536 into 127755173509728
Flattening <class 'ir.StatList'> 127755173509536
Flattening 127755173509728 into 127755173527616
Flattening <class 'ir.StatList'> 127755173509728
Flattening 127755173527616 into 127755174517872
Flattening <class 'ir.StatList'> 127755173527616
Flattening 127755173527904 into 127755173528000
Flattening <class 'ir.StatList'> 127755173527904
Flattening 127755173528000 into 127755174517872
Flattening <class 'ir.StatList'> 127755173528000
Flattening 127755173528384 into 127755173528480
Flattening <class 'ir.StatList'> 127755173528384
Flattening 127755173528480 into 127755174517872
Flattening <class 'ir.StatList'> 127755173528480
Flattening 127755173528720 into 127755173529008
Flattening <class 'ir.StatList'> 127755173528720
Flattening 127755173528816 into 127755173529008
Flattening <class 'ir.StatList'> 127755173528816
Flattening 127755173529008 into 127755173530352
Flattening <class 'ir.StatList'> 127755173529008
Flattening 127755173529776 into 127755173529920
Flattening <class 'ir.StatList'> 127755173529776
Flattening 127755173529920 into 127755173530352
Flattening <class 'ir.StatList'> 127755173529920
Flattening 127755173890896 into 127755173529392
Flattening <class 'ir.StatList'> 127755173890896
Flattening 127755173529200 into 127755173529392
Flattening <class 'ir.StatList'> 127755173529200
Flattening 127755173529392 into 127755173530352
Flattening <class 'ir.StatList'> 127755173529392
Flattening 127755173530352 into 127755174517872
Flattening <class 'ir.StatList'> 127755173530352
Flattening 127755173530640 into 127755173530736
Flattening <class 'ir.StatList'> 127755173530640
Flattening 127755173530736 into 127755174517872
Flattening <class 'ir.StatList'> 127755173530736
Flattening 127755173531120 into 127755173531216
Flattening <class 'ir.StatList'> 127755173531120
Flattening 127755173531216 into 127755174517872
Flattening <class 'ir.StatList'> 127755173531216
Flattening 127755173531456 into 127755173552288
Flattening <class 'ir.StatList'> 127755173531456
Flattening 127755173531552 into 127755173552288
Flattening <class 'ir.StatList'> 127755173531552
Flattening 127755173552288 into 127755173553632
Flattening <class 'ir.StatList'> 127755173552288
Flattening 127755173553056 into 127755173553200
Flattening <class 'ir.StatList'> 127755173553056
Flattening 127755173553200 into 127755173553632
Flattening <class 'ir.StatList'> 127755173553200
Flattening 127755173891856 into 127755173552672
Flattening <class 'ir.StatList'> 127755173891856
Flattening 127755173552480 into 127755173552672
Flattening <class 'ir.StatList'> 127755173552480
Flattening 127755173552672 into 127755173553632
Flattening <class 'ir.StatList'> 127755173552672
Flattening 127755173553632 into 127755174517872
Flattening <class 'ir.StatList'> 127755173553632
Flattening 127755173553920 into 127755173554016
Flattening <class 'ir.StatList'> 127755173553920
Flattening 127755173554016 into 127755174517872
Flattening <class 'ir.StatList'> 127755173554016
Flattening 127755173554400 into 127755173554496
Flattening <class 'ir.StatList'> 127755173554400
Flattening 127755173554496 into 127755174517872
Flattening <class 'ir.StatList'> 127755173554496
Flattening 127755173554736 into 127755173555024
Flattening <class 'ir.StatList'> 127755173554736
Flattening 127755173554832 into 127755173555024
Flattening <class 'ir.StatList'> 127755173554832
Flattening 127755173555024 into 127755173564624
Flattening <class 'ir.StatList'> 127755173555024
Flattening 127755173555792 into 127755173555936
Flattening <class 'ir.StatList'> 127755173555792
Flattening 127755173555936 into 127755173564624
Flattening <class 'ir.StatList'> 127755173555936
Flattening 127755173894080 into 127755173555408
Flattening <class 'ir.StatList'> 127755173894080
Flattening 127755173555216 into 127755173555408
Flattening <class 'ir.StatList'> 127755173555216
Flattening 127755173555408 into 127755173564624
Flattening <class 'ir.StatList'> 127755173555408
Flattening 127755173564624 into 127755174517872
Flattening <class 'ir.StatList'> 127755173564624
Flattening 127755173564912 into 127755173565008
Flattening <class 'ir.StatList'> 127755173564912
Flattening 127755173565008 into 127755174517872
Flattening <class 'ir.StatList'> 127755173565008
Flattening 127755173565200 into 127755173894704
Flattening <class 'ir.StatList'> 127755173565200
Flattening 127755173894704 into 127755174517872
Flattening <class 'ir.StatList'> 127755173894704
Flattening 127755173565584 into 127755173565680
Flattening <class 'ir.StatList'> 127755173565584
Flattening 127755173565680 into 127755174517872
Flattening <class 'ir.StatList'> 127755173565680
Flattening 127755173565920 into 127755173566208
Flattening <class 'ir.StatList'> 127755173565920
Flattening 127755173566016 into 127755173566208
Flattening <class 'ir.StatList'> 127755173566016
Flattening 127755173566208 into 127755173580912
Flattening <class 'ir.StatList'> 127755173566208
Flattening 127755173566736 into 127755173567168
Flattening <class 'ir.StatList'> 127755173566736
Flattening 127755173566976 into 127755173567168
Flattening <class 'ir.StatList'> 127755173566976
Flattening 127755173567168 into 127755173895520
Flattening <class 'ir.StatList'> 127755173567168
Flattening 127755173895520 into 127755173580912
Flattening <class 'ir.StatList'> 127755173895520
Flattening 127755173567552 into 127755173567648
Flattening <class 'ir.StatList'> 127755173567552
Flattening 127755173567648 into 127755173580912
Flattening <class 'ir.StatList'> 127755173567648
Flattening 127755173568032 into 127755173568128
Flattening <class 'ir.StatList'> 127755173568032
Flattening 127755173568128 into 127755173580912
Flattening <class 'ir.StatList'> 127755173568128
Flattening 127755173895136 into 127755173566592
Flattening <class 'ir.StatList'> 127755173895136
Flattening 127755173566400 into 127755173566592
Flattening <class 'ir.StatList'> 127755173566400
Flattening 127755173566592 into 127755173580912
Flattening <class 'ir.StatList'> 127755173566592
Flattening 127755173580912 into 127755174517872
Flattening <class 'ir.StatList'> 127755173580912
Flattening 127755173581200 into 127755173581296
Flattening <class 'ir.StatList'> 127755173581200
Flattening 127755173581296 into 127755174517872
Flattening <class 'ir.StatList'> 127755173581296
Flattening 127755173581680 into 127755173581776
Flattening <class 'ir.StatList'> 127755173581680
Flattening 127755173581776 into 127755174517872
Flattening <class 'ir.StatList'> 127755173581776
Flattening 127755173581968 into 127755173826416
Flattening <class 'ir.StatList'> 127755173581968
Flattening 127755173826416 into 127755174517872
Flattening <class 'ir.StatList'> 127755173826416
Flattening 127755173582352 into 127755173582448
Flattening <class 'ir.StatList'> 127755173582352
Flattening 127755173582448 into 127755174517872
Flattening <class 'ir.StatList'> 127755173582448
Flattening 127755173582688 into 127755173582976
Flattening <class 'ir.StatList'> 127755173582688
Flattening 127755173582784 into 127755173582976
Flattening <class 'ir.StatList'> 127755173582784
Flattening 127755173582976 into 127755173584848
Flattening <class 'ir.StatList'> 127755173582976
Flattening 127755173583504 into 127755173583936
Flattening <class 'ir.StatList'> 127755173583504
Flattening 127755173583744 into 127755173583936
Flattening <class 'ir.StatList'> 127755173583744
Flattening 127755173583936 into 127755174453744
Flattening <class 'ir.StatList'> 127755173583936
Flattening 127755174453744 into 127755173584848
Flattening <class 'ir.StatList'> 127755174453744
Flattening 127755173584320 into 127755173584416
Flattening <class 'ir.StatList'> 127755173584320
Flattening 127755173584416 into 127755173584848
Flattening <class 'ir.StatList'> 127755173584416
Flattening 127755174456048 into 127755173583360
Flattening <class 'ir.StatList'> 127755174456048
Flattening 127755173583168 into 127755173583360
Flattening <class 'ir.StatList'> 127755173583168
Flattening 127755173583360 into 127755173584848
Flattening <class 'ir.StatList'> 127755173583360
Flattening 127755173584848 into 127755174517872
Flattening <class 'ir.StatList'> 127755173584848
Flattening 127755173605680 into 127755173605776
Flattening <class 'ir.StatList'> 127755173605680
Flattening 127755173605776 into 127755174517872
Flattening <class 'ir.StatList'> 127755173605776
Flattening 127755173606160 into 127755173606256
Flattening <class 'ir.StatList'> 127755173606160
Flattening 127755173606256 into 127755174517872
Flattening <class 'ir.StatList'> 127755173606256
Flattening 127755173606640 into 127755173606736
Flattening <class 'ir.StatList'> 127755173606640
Flattening 127755173606736 into 127755174517872
Flattening <class 'ir.StatList'> 127755173606736
Flattening 127755173606928 into 127755174454992
Flattening <class 'ir.StatList'> 127755173606928
Flattening 127755174454992 into 127755174517872
Flattening <class 'ir.StatList'> 127755174454992
Flattening 127755173607120 into 127755173607504
Flattening <class 'ir.StatList'> 127755173607120
Flattening 127755173607312 into 127755173607504
Flattening <class 'ir.StatList'> 127755173607312
Flattening 127755173607504 into 127755173627408
Flattening <class 'ir.StatList'> 127755173607504
Flattening 127755173608608 into 127755173609136
Flattening <class 'ir.StatList'> 127755173608608
Flattening 127755173608752 into 127755173609136
Flattening <class 'ir.StatList'> 127755173608752
Flattening 127755173609136 into 127755173626112
Flattening <class 'ir.StatList'> 127755173609136
Flattening 127755173626112 into 127755173626448
Flattening <class 'ir.StatList'> 127755173626112
Flattening 127755173626256 into 127755173626448
Flattening <class 'ir.StatList'> 127755173626256
Flattening 127755173626448 into 127755173626880
Flattening <class 'ir.StatList'> 127755173626448
Flattening 127755173608032 into 127755173608464
Flattening <class 'ir.StatList'> 127755173608032
Flattening 127755173608272 into 127755173608464
Flattening <class 'ir.StatList'> 127755173608272
Flattening 127755173608464 into 127755173626880
Flattening <class 'ir.StatList'> 127755173608464
Flattening 127755173626880 into 127755173627408
Flattening <class 'ir.StatList'> 127755173626880
Flattening 127755174454752 into 127755173607888
Flattening <class 'ir.StatList'> 127755174454752
Flattening 127755173607696 into 127755173607888
Flattening <class 'ir.StatList'> 127755173607696
Flattening 127755173607888 into 127755173627408
Flattening <class 'ir.StatList'> 127755173607888
Flattening 127755173627408 into 127755174517872
Flattening <class 'ir.StatList'> 127755173627408
Flattening 127755173627312 into 127755173627840
Flattening <class 'ir.StatList'> 127755173627312
Flattening 127755173627648 into 127755173627840
Flattening <class 'ir.StatList'> 127755173627648
Flattening 127755173627840 into 127755173654976
Flattening <class 'ir.StatList'> 127755173627840
Flattening 127755173628128 into 127755173628224
Flattening <class 'ir.StatList'> 127755173628128
Flattening 127755173628224 into 127755174796640
Flattening <class 'ir.StatList'> 127755173628224
Flattening 127755173628464 into 127755173629040
Flattening <class 'ir.StatList'> 127755173628464
Flattening 127755173628656 into 127755173629040
Flattening <class 'ir.StatList'> 127755173628656
Flattening 127755173629040 into 127755173630064
Flattening <class 'ir.StatList'> 127755173629040
Flattening 127755173630064 into 127755173630304
Flattening <class 'ir.StatList'> 127755173630064
Flattening 127755173630304 into 127755174796640
Flattening <class 'ir.StatList'> 127755173630304
Flattening 127755173630496 into 127755173631168
Flattening <class 'ir.StatList'> 127755173630496
Flattening 127755173630784 into 127755173631168
Flattening <class 'ir.StatList'> 127755173630784
Flattening 127755173631168 into 127755173632128
Flattening <class 'ir.StatList'> 127755173631168
Flattening 127755173632128 into 127755173632272
Flattening <class 'ir.StatList'> 127755173632128
Flattening 127755173632272 into 127755174796640
Flattening <class 'ir.StatList'> 127755173632272
Flattening 127755173632512 into 127755173633184
Flattening <class 'ir.StatList'> 127755173632512
Flattening 127755173632800 into 127755173633184
Flattening <class 'ir.StatList'> 127755173632800
Flattening 127755173633184 into 127755173654688
Flattening <class 'ir.StatList'> 127755173633184
Flattening 127755173654688 into 127755173654832
Flattening <class 'ir.StatList'> 127755173654688
Flattening 127755173654832 into 127755174796640
Flattening <class 'ir.StatList'> 127755173654832
Flattening 127755174796640 into 127755173654976
Flattening <class 'ir.StatList'> 127755174796640
Flattening 127755173654976 into 127755174517872
Flattening <class 'ir.StatList'> 127755173654976
Flattening 127755173655504 into 127755173655600
Flattening <class 'ir.StatList'> 127755173655504
Flattening 127755173655600 into 127755174517872
Flattening <class 'ir.StatList'> 127755173655600
Not flattening 127755174517872 into 127755175744896 of type <class 'ir.Block'>
Flattening <class 'ir.StatList'> 127755174517872
Failed!

--- IR Tree After Flattening ---
<class 'ir.Block'> 127755175744896 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 127755174791920 {
	parent = 127755175744896
		children:
		<class 'ir.FunctionDef'> 127755174515184 {
		parent = 127755174791920
			body: 	<class 'ir.Block'> 127755174517776 {
			parent = 127755174515184
				defs: 	<class 'ir.DefinitionList'> 127755174517056 {
				parent = 127755174517776
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				body: 	<class 'ir.StatList'> 127755174517200 {
				parent = 127755174517776
					children:
					reg int t0 <- 1234
					auto int test <- reg int t0
					reg int t1 <- global int x
					reg int t2 <- global int x
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ <- reg int32_t t3
				}
			}
			symbol: 	auto function square
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 127755174517872 {
	parent = 127755175744896
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x <- reg int t5
		read reg int t6
		global int x <- reg int t6
		reg int t7 <- global int x
		reg int t8 <- 100
		reg int32_t t9 <- reg int t7 gtr reg int t8
		branch on reg int32_t t9 to auto label label2
		reg int t14 <- global int x
		print reg int t14
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 127755174666144 {
		parent = 127755174517872
		}
		reg int t10 <- global int x
		reg int t12 <- minus reg int t10
		print reg int t12
		label1: <class 'ir.EmptyStat'> 127755174523280 {
		parent = 127755174517872
		}
		reg int t15 <- 1
		global int x <- reg int t15
		label3: <class 'ir.EmptyStat'> 127755174664848 {
		parent = 127755174517872
		}
		reg int t16 <- global int x
		reg int t17 <- 10
		reg int32_t t18 <- reg int t16 leq reg int t17
		branch on not reg int32_t t18 to auto label label4
		call  to auto function square
		reg int t19 <- global int x
		reg int t20 <- 1
		reg int32_t t21 <- reg int t19 plus reg int t20
		global int x <- reg int32_t t21
		reg int t23 <- global int squ
		print reg int t23
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 127755174524624 {
		parent = 127755174517872
		}
		reg int t24 <- 101
		global int x <- reg int t24
		label5: <class 'ir.EmptyStat'> 127755174736080 {
		parent = 127755174517872
		}
		reg int t25 <- global int x
		reg int t26 <- 105
		reg int32_t t27 <- reg int t25 leq reg int t26
		branch on not reg int32_t t27 to auto label label6
		reg int t33 <- global int x
		reg int t28 <- global int x
		reg int t29 <- 100
		reg int32_t t30 <- reg int t28 minus reg int t29
		reg int t31 <- 1
		reg int32_t t32 <- reg int32_t t30 times reg int t31
		reg &char t34 <- &(global char[5] arr)
		reg &char t35 <- reg &char t34 plus reg int32_t t32
		[reg &char t35] <- reg int t33
		reg int t36 <- global int x
		reg int t37 <- 100
		reg int32_t t38 <- reg int t36 minus reg int t37
		reg int t39 <- 1
		reg int32_t t41 <- reg int32_t t38 times reg int t39
		reg &char t46 <- &(global char[5] arr)
		reg &char t47 <- reg &char t46 plus reg int32_t t41
		reg char t45 <- [reg &char t47]
		print reg char t45
		reg int t48 <- global int x
		reg int t49 <- 1
		reg int32_t t50 <- reg int t48 plus reg int t49
		global int x <- reg int32_t t50
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 127755174526784 {
		parent = 127755174517872
		}
		reg int t51 <- 1
		global int x <- reg int t51
		reg int t52 <- 1
		global int y <- reg int t52
		label9: <class 'ir.EmptyStat'> 127755174076576 {
		parent = 127755174517872
		}
		reg int t53 <- global int x
		reg int t54 <- 5
		reg int32_t t55 <- reg int t53 leq reg int t54
		branch on not reg int32_t t55 to auto label label10
		label7: <class 'ir.EmptyStat'> 127755174076624 {
		parent = 127755174517872
		}
		reg int t56 <- global int y
		reg int t57 <- 5
		reg int32_t t58 <- reg int t56 leq reg int t57
		branch on not reg int32_t t58 to auto label label8
		reg int t66 <- global int x
		reg int t67 <- 1
		reg int32_t t69 <- reg int t66 times reg int t67
		reg &char t71 <- &(global char[5] arr)
		reg &char t72 <- reg &char t71 plus reg int32_t t69
		reg char t70 <- [reg &char t72]
		reg int t59 <- global int x
		reg int t60 <- 10
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int t62 <- global int y
		reg int t63 <- 2
		reg int32_t t64 <- reg int t62 times reg int t63
		reg int32_t t65 <- reg int32_t t61 plus reg int32_t t64
		reg &short t73 <- &(global short[5, 5] multid)
		reg &short t74 <- reg &short t73 plus reg int32_t t65
		[reg &short t74] <- reg char t70
		reg int t75 <- global int x
		reg int t76 <- 10
		reg int32_t t77 <- reg int t75 times reg int t76
		reg int t78 <- global int y
		reg int t79 <- 2
		reg int32_t t80 <- reg int t78 times reg int t79
		reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
		reg &short t87 <- &(global short[5, 5] multid)
		reg &short t88 <- reg &short t87 plus reg int32_t t82
		reg short t86 <- [reg &short t88]
		print reg short t86
		reg int t89 <- global int x
		reg int t90 <- 1
		reg int32_t t91 <- reg int t89 plus reg int t90
		global int x <- reg int32_t t91
		reg int t92 <- global int y
		reg int t93 <- 1
		reg int32_t t94 <- reg int t92 plus reg int t93
		global int y <- reg int32_t t94
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 127755174072432 {
		parent = 127755174517872
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 127755174073968 {
		parent = 127755174517872
		}
		<class 'ir.AssignStat'> 127755173855632 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174150592 {
			parent = 127755173855632
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int a
		}
		label11: <class 'ir.EmptyStat'> 127755174151936 {
		parent = 127755174517872
		}
		reg int t95 <- auto int a
		reg int t96 <- 20
		reg int32_t t97 <- reg int t95 leq reg int t96
		branch on not reg int32_t t97 to auto label label13
		reg int t102 <- auto int a
		print reg int t102
		reg int t98 <- auto int a
		reg int t99 <- 1
		reg int32_t t100 <- reg int t98 plus reg int t99
		auto int a <- reg int32_t t100
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 127755174075792 {
		parent = 127755174517872
		}
		reg int t103 <- 10
		global int i <- reg int t103
		reg int t105 <- 99991
		print reg int t105
		<class 'ir.AssignStat'> 127755173857072 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173856592 {
			parent = 127755173857072
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int i
		}
		label14: <class 'ir.EmptyStat'> 127755173855824 {
		parent = 127755174517872
		}
		reg int t106 <- auto int i
		reg int t107 <- 15
		reg int32_t t108 <- reg int t106 leq reg int t107
		branch on not reg int32_t t108 to auto label label16
		reg int t113 <- global int i
		print reg int t113
		reg int t109 <- auto int i
		reg int t110 <- 1
		reg int32_t t111 <- reg int t109 plus reg int t110
		auto int i <- reg int32_t t111
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 127755174037392 {
		parent = 127755174517872
		}
		reg int t115 <- 88881
		print reg int t115
		reg int t117 <- 99992
		print reg int t117
		<class 'ir.AssignStat'> 127755173858656 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173858176 {
			parent = 127755173858656
				value: 	5
				symbol: 	None
			}
			symbol: 	auto int j
		}
		label17: <class 'ir.EmptyStat'> 127755173857264 {
		parent = 127755174517872
		}
		reg int t118 <- auto int j
		reg int t119 <- 5
		reg int32_t t120 <- reg int t118 leq reg int t119
		branch on not reg int32_t t120 to auto label label19
		reg int t125 <- global int j
		print reg int t125
		reg int t121 <- auto int j
		reg int t122 <- 1
		reg int32_t t123 <- reg int t121 plus reg int t122
		auto int j <- reg int32_t t123
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 127755173507712 {
		parent = 127755174517872
		}
		reg int t127 <- 88882
		print reg int t127
		reg int t129 <- 99993
		print reg int t129
		<class 'ir.AssignStat'> 127755173889120 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173888448 {
			parent = 127755173889120
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int k
		}
		label20: <class 'ir.EmptyStat'> 127755173858848 {
		parent = 127755174517872
		}
		reg int t130 <- auto int k
		reg int t131 <- 5
		reg int32_t t132 <- reg int t130 leq reg int t131
		branch on not reg int32_t t132 to auto label label22
		reg int t137 <- 77777
		print reg int t137
		reg int t139 <- global int k
		print reg int t139
		reg int t133 <- auto int k
		reg int t134 <- 1
		reg int32_t t135 <- reg int t133 plus reg int t134
		auto int k <- reg int32_t t135
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 127755173510928 {
		parent = 127755174517872
		}
		reg int t141 <- 88883
		print reg int t141
		reg int t143 <- 99994
		print reg int t143
		<class 'ir.AssignStat'> 127755173890704 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173890224 {
			parent = 127755173890704
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int m
		}
		label23: <class 'ir.EmptyStat'> 127755173889312 {
		parent = 127755174517872
		}
		reg int t144 <- auto int m
		reg int t145 <- 6
		reg int32_t t146 <- reg int t144 leq reg int t145
		branch on not reg int32_t t146 to auto label label25
		reg int t151 <- global int m
		print reg int t151
		reg int t147 <- auto int m
		reg int t148 <- 1
		reg int32_t t149 <- reg int t147 plus reg int t148
		auto int m <- reg int32_t t149
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 127755173530112 {
		parent = 127755174517872
		}
		reg int t153 <- 88884
		print reg int t153
		reg int t155 <- 99995
		print reg int t155
		<class 'ir.AssignStat'> 127755173892304 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173891760 {
			parent = 127755173892304
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int n
		}
		label26: <class 'ir.EmptyStat'> 127755173890896 {
		parent = 127755174517872
		}
		reg int t156 <- auto int n
		reg int t157 <- 7
		reg int32_t t158 <- reg int t156 leq reg int t157
		branch on not reg int32_t t158 to auto label label28
		reg int t163 <- global int n
		print reg int t163
		reg int t159 <- auto int n
		reg int t160 <- 1
		reg int32_t t161 <- reg int t159 plus reg int t160
		auto int n <- reg int32_t t161
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 127755173553392 {
		parent = 127755174517872
		}
		reg int t165 <- 88885
		print reg int t165
		reg int t167 <- 99996
		print reg int t167
		<class 'ir.AssignStat'> 127755173893888 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173893408 {
			parent = 127755173893888
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int p
		}
		label29: <class 'ir.EmptyStat'> 127755173891856 {
		parent = 127755174517872
		}
		reg int t168 <- auto int p
		reg int t169 <- 12
		reg int32_t t170 <- reg int t168 leq reg int t169
		branch on not reg int32_t t170 to auto label label31
		reg int t175 <- global int p
		print reg int t175
		reg int t171 <- auto int p
		reg int t172 <- 1
		reg int32_t t173 <- reg int t171 plus reg int t172
		auto int p <- reg int32_t t173
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 127755173556128 {
		parent = 127755174517872
		}
		reg int t177 <- 88886
		print reg int t177
		reg int t178 <- 0
		global int sum <- reg int t178
		reg int t180 <- 99997
		print reg int t180
		<class 'ir.AssignStat'> 127755173896048 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173895040 {
			parent = 127755173896048
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int q
		}
		label32: <class 'ir.EmptyStat'> 127755173565200 {
		parent = 127755174517872
		}
		reg int t181 <- auto int q
		reg int t182 <- 5
		reg int32_t t183 <- reg int t181 leq reg int t182
		branch on not reg int32_t t183 to auto label label34
		reg int t187 <- global int sum
		reg int t188 <- global int q
		reg int32_t t189 <- reg int t187 plus reg int t188
		global int sum <- reg int32_t t189
		reg int t191 <- global int q
		print reg int t191
		reg int t193 <- global int sum
		print reg int t193
		reg int t184 <- auto int q
		reg int t185 <- 1
		reg int32_t t186 <- reg int t184 plus reg int t185
		auto int q <- reg int32_t t186
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 127755173568320 {
		parent = 127755174517872
		}
		reg int t195 <- global int sum
		print reg int t195
		reg int t197 <- 88887
		print reg int t197
		reg int t198 <- 100
		global int x <- reg int t198
		reg int t200 <- 99998
		print reg int t200
		<class 'ir.AssignStat'> 127755174454080 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174456432 {
			parent = 127755174454080
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int r
		}
		label35: <class 'ir.EmptyStat'> 127755173581968 {
		parent = 127755174517872
		}
		reg int t201 <- auto int r
		reg int t202 <- 3
		reg int32_t t203 <- reg int t201 leq reg int t202
		branch on not reg int32_t t203 to auto label label37
		reg int t207 <- global int x
		reg int t208 <- global int r
		reg int32_t t209 <- reg int t207 plus reg int t208
		global int x <- reg int32_t t209
		reg int t211 <- global int x
		print reg int t211
		reg int t204 <- auto int r
		reg int t205 <- 1
		reg int32_t t206 <- reg int t204 plus reg int t205
		auto int r <- reg int32_t t206
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 127755173584608 {
		parent = 127755174517872
		}
		reg int t213 <- global int x
		print reg int t213
		reg int t215 <- 88888
		print reg int t215
		reg int t217 <- 999990
		print reg int t217
		reg int t218 <- 0
		global int sm_idx <- reg int t218
		<class 'ir.AssignStat'> 127755174516960 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174454848 {
			parent = 127755174516960
				value: 	0
				symbol: 	None
			}
			symbol: 	auto int sm_idx
		}
		label38: <class 'ir.EmptyStat'> 127755174456048 {
		parent = 127755174517872
		}
		reg int t219 <- auto int sm_idx
		reg int t220 <- 127
		reg int32_t t221 <- reg int t219 leq reg int t220
		branch on not reg int32_t t221 to auto label label40
		reg int t228 <- global int sm_idx
		reg int t229 <- 4
		reg int32_t t231 <- reg int t228 times reg int t229
		reg &int t233 <- &(global int[128] sm_source_arr)
		reg &int t234 <- reg &int t233 plus reg int32_t t231
		reg int t232 <- [reg &int t234]
		reg int t235 <- global int sm_idx
		reg int32_t t236 <- reg int t232 plus reg int t235
		reg int t225 <- global int sm_idx
		reg int t226 <- 4
		reg int32_t t227 <- reg int t225 times reg int t226
		reg &int t237 <- &(global int[128] sm_dest_arr)
		reg &int t238 <- reg &int t237 plus reg int32_t t227
		[reg &int t238] <- reg int32_t t236
		reg int t222 <- auto int sm_idx
		reg int t223 <- 1
		reg int32_t t224 <- reg int t222 plus reg int t223
		auto int sm_idx <- reg int32_t t224
		branch  to auto label label38
		label40: <class 'ir.EmptyStat'> 127755173627024 {
		parent = 127755174517872
		}
		reg int t239 <- 127
		reg int t240 <- 0
		reg int32_t t241 <- reg int t239 geq reg int t240
		branch on not reg int32_t t241 to auto label label41
		reg int t243 <- 76543
		print reg int t243
		reg int t244 <- 0
		reg int t245 <- 4
		reg int32_t t247 <- reg int t244 times reg int t245
		reg &int t252 <- &(global int[128] sm_dest_arr)
		reg &int t253 <- reg &int t252 plus reg int32_t t247
		reg int t251 <- [reg &int t253]
		print reg int t251
		reg int t254 <- 64
		reg int t255 <- 4
		reg int32_t t257 <- reg int t254 times reg int t255
		reg &int t262 <- &(global int[128] sm_dest_arr)
		reg &int t263 <- reg &int t262 plus reg int32_t t257
		reg int t261 <- [reg &int t263]
		print reg int t261
		reg int t264 <- 127
		reg int t265 <- 4
		reg int32_t t267 <- reg int t264 times reg int t265
		reg &int t272 <- &(global int[128] sm_dest_arr)
		reg &int t273 <- reg &int t272 plus reg int32_t t267
		reg int t271 <- [reg &int t273]
		print reg int t271
		label41: <class 'ir.EmptyStat'> 127755173655024 {
		parent = 127755174517872
		}
		reg int t275 <- 888880
		print reg int t275
	}
}

--- Performing Data Layout ---

--- IR Tree After Data Layout (Symbols might have allocinfo) ---
<class 'ir.Block'> 127755175744896 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 127755174791920 {
	parent = 127755175744896
		children:
		<class 'ir.FunctionDef'> 127755174515184 {
		parent = 127755174791920
			body: 	<class 'ir.Block'> 127755174517776 {
			parent = 127755174515184
				defs: 	<class 'ir.DefinitionList'> 127755174517056 {
				parent = 127755174517776
				}
				global_symtab: 	SymbolTable:
				global int x; _g_x: def byte 4
				global int y; _g_y: def byte 4
				global int squ; _g_squ: def byte 4
				global char[5] arr; _g_arr: def byte 5
				global short[5, 5] multid; _g_multid: def byte 50
				global int i; _g_i: def byte 4
				global int j; _g_j: def byte 4
				global int k; _g_k: def byte 4
				global int m; _g_m: def byte 4
				global int n; _g_n: def byte 4
				global int p; _g_p: def byte 4
				global int q; _g_q: def byte 4
				global int sum; _g_sum: def byte 4
				global int r; _g_r: def byte 4
				global int sm_idx; _g_sm_idx: def byte 4
				global int[128] sm_source_arr; _g_sm_source_arr: def byte 512
				global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512
				auto function square
				
				body: 	<class 'ir.StatList'> 127755174517200 {
				parent = 127755174517776
					children:
					reg int t0 <- 1234
					auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0
					reg int t1 <- global int x; _g_x: def byte 4
					reg int t2 <- global int x; _g_x: def byte 4
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ; _g_squ: def byte 4 <- reg int32_t t3
				}
			}
			symbol: 	auto function square
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 127755174517872 {
	parent = 127755175744896
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x; _g_x: def byte 4 <- reg int t5
		read reg int t6
		global int x; _g_x: def byte 4 <- reg int t6
		reg int t7 <- global int x; _g_x: def byte 4
		reg int t8 <- 100
		reg int32_t t9 <- reg int t7 gtr reg int t8
		branch on reg int32_t t9 to auto label label2
		reg int t14 <- global int x; _g_x: def byte 4
		print reg int t14
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 127755174666144 {
		parent = 127755174517872
		}
		reg int t10 <- global int x; _g_x: def byte 4
		reg int t12 <- minus reg int t10
		print reg int t12
		label1: <class 'ir.EmptyStat'> 127755174523280 {
		parent = 127755174517872
		}
		reg int t15 <- 1
		global int x; _g_x: def byte 4 <- reg int t15
		label3: <class 'ir.EmptyStat'> 127755174664848 {
		parent = 127755174517872
		}
		reg int t16 <- global int x; _g_x: def byte 4
		reg int t17 <- 10
		reg int32_t t18 <- reg int t16 leq reg int t17
		branch on not reg int32_t t18 to auto label label4
		call  to auto function square
		reg int t19 <- global int x; _g_x: def byte 4
		reg int t20 <- 1
		reg int32_t t21 <- reg int t19 plus reg int t20
		global int x; _g_x: def byte 4 <- reg int32_t t21
		reg int t23 <- global int squ; _g_squ: def byte 4
		print reg int t23
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 127755174524624 {
		parent = 127755174517872
		}
		reg int t24 <- 101
		global int x; _g_x: def byte 4 <- reg int t24
		label5: <class 'ir.EmptyStat'> 127755174736080 {
		parent = 127755174517872
		}
		reg int t25 <- global int x; _g_x: def byte 4
		reg int t26 <- 105
		reg int32_t t27 <- reg int t25 leq reg int t26
		branch on not reg int32_t t27 to auto label label6
		reg int t33 <- global int x; _g_x: def byte 4
		reg int t28 <- global int x; _g_x: def byte 4
		reg int t29 <- 100
		reg int32_t t30 <- reg int t28 minus reg int t29
		reg int t31 <- 1
		reg int32_t t32 <- reg int32_t t30 times reg int t31
		reg &char t34 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t35 <- reg &char t34 plus reg int32_t t32
		[reg &char t35] <- reg int t33
		reg int t36 <- global int x; _g_x: def byte 4
		reg int t37 <- 100
		reg int32_t t38 <- reg int t36 minus reg int t37
		reg int t39 <- 1
		reg int32_t t41 <- reg int32_t t38 times reg int t39
		reg &char t46 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t47 <- reg &char t46 plus reg int32_t t41
		reg char t45 <- [reg &char t47]
		print reg char t45
		reg int t48 <- global int x; _g_x: def byte 4
		reg int t49 <- 1
		reg int32_t t50 <- reg int t48 plus reg int t49
		global int x; _g_x: def byte 4 <- reg int32_t t50
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 127755174526784 {
		parent = 127755174517872
		}
		reg int t51 <- 1
		global int x; _g_x: def byte 4 <- reg int t51
		reg int t52 <- 1
		global int y; _g_y: def byte 4 <- reg int t52
		label9: <class 'ir.EmptyStat'> 127755174076576 {
		parent = 127755174517872
		}
		reg int t53 <- global int x; _g_x: def byte 4
		reg int t54 <- 5
		reg int32_t t55 <- reg int t53 leq reg int t54
		branch on not reg int32_t t55 to auto label label10
		label7: <class 'ir.EmptyStat'> 127755174076624 {
		parent = 127755174517872
		}
		reg int t56 <- global int y; _g_y: def byte 4
		reg int t57 <- 5
		reg int32_t t58 <- reg int t56 leq reg int t57
		branch on not reg int32_t t58 to auto label label8
		reg int t66 <- global int x; _g_x: def byte 4
		reg int t67 <- 1
		reg int32_t t69 <- reg int t66 times reg int t67
		reg &char t71 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t72 <- reg &char t71 plus reg int32_t t69
		reg char t70 <- [reg &char t72]
		reg int t59 <- global int x; _g_x: def byte 4
		reg int t60 <- 10
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int t62 <- global int y; _g_y: def byte 4
		reg int t63 <- 2
		reg int32_t t64 <- reg int t62 times reg int t63
		reg int32_t t65 <- reg int32_t t61 plus reg int32_t t64
		reg &short t73 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t74 <- reg &short t73 plus reg int32_t t65
		[reg &short t74] <- reg char t70
		reg int t75 <- global int x; _g_x: def byte 4
		reg int t76 <- 10
		reg int32_t t77 <- reg int t75 times reg int t76
		reg int t78 <- global int y; _g_y: def byte 4
		reg int t79 <- 2
		reg int32_t t80 <- reg int t78 times reg int t79
		reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
		reg &short t87 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t88 <- reg &short t87 plus reg int32_t t82
		reg short t86 <- [reg &short t88]
		print reg short t86
		reg int t89 <- global int x; _g_x: def byte 4
		reg int t90 <- 1
		reg int32_t t91 <- reg int t89 plus reg int t90
		global int x; _g_x: def byte 4 <- reg int32_t t91
		reg int t92 <- global int y; _g_y: def byte 4
		reg int t93 <- 1
		reg int32_t t94 <- reg int t92 plus reg int t93
		global int y; _g_y: def byte 4 <- reg int32_t t94
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 127755174072432 {
		parent = 127755174517872
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 127755174073968 {
		parent = 127755174517872
		}
		<class 'ir.AssignStat'> 127755173855632 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174150592 {
			parent = 127755173855632
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int a
		}
		label11: <class 'ir.EmptyStat'> 127755174151936 {
		parent = 127755174517872
		}
		reg int t95 <- auto int a
		reg int t96 <- 20
		reg int32_t t97 <- reg int t95 leq reg int t96
		branch on not reg int32_t t97 to auto label label13
		reg int t102 <- auto int a
		print reg int t102
		reg int t98 <- auto int a
		reg int t99 <- 1
		reg int32_t t100 <- reg int t98 plus reg int t99
		auto int a <- reg int32_t t100
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 127755174075792 {
		parent = 127755174517872
		}
		reg int t103 <- 10
		global int i; _g_i: def byte 4 <- reg int t103
		reg int t105 <- 99991
		print reg int t105
		<class 'ir.AssignStat'> 127755173857072 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173856592 {
			parent = 127755173857072
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int i
		}
		label14: <class 'ir.EmptyStat'> 127755173855824 {
		parent = 127755174517872
		}
		reg int t106 <- auto int i
		reg int t107 <- 15
		reg int32_t t108 <- reg int t106 leq reg int t107
		branch on not reg int32_t t108 to auto label label16
		reg int t113 <- global int i; _g_i: def byte 4
		print reg int t113
		reg int t109 <- auto int i
		reg int t110 <- 1
		reg int32_t t111 <- reg int t109 plus reg int t110
		auto int i <- reg int32_t t111
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 127755174037392 {
		parent = 127755174517872
		}
		reg int t115 <- 88881
		print reg int t115
		reg int t117 <- 99992
		print reg int t117
		<class 'ir.AssignStat'> 127755173858656 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173858176 {
			parent = 127755173858656
				value: 	5
				symbol: 	None
			}
			symbol: 	auto int j
		}
		label17: <class 'ir.EmptyStat'> 127755173857264 {
		parent = 127755174517872
		}
		reg int t118 <- auto int j
		reg int t119 <- 5
		reg int32_t t120 <- reg int t118 leq reg int t119
		branch on not reg int32_t t120 to auto label label19
		reg int t125 <- global int j; _g_j: def byte 4
		print reg int t125
		reg int t121 <- auto int j
		reg int t122 <- 1
		reg int32_t t123 <- reg int t121 plus reg int t122
		auto int j <- reg int32_t t123
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 127755173507712 {
		parent = 127755174517872
		}
		reg int t127 <- 88882
		print reg int t127
		reg int t129 <- 99993
		print reg int t129
		<class 'ir.AssignStat'> 127755173889120 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173888448 {
			parent = 127755173889120
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int k
		}
		label20: <class 'ir.EmptyStat'> 127755173858848 {
		parent = 127755174517872
		}
		reg int t130 <- auto int k
		reg int t131 <- 5
		reg int32_t t132 <- reg int t130 leq reg int t131
		branch on not reg int32_t t132 to auto label label22
		reg int t137 <- 77777
		print reg int t137
		reg int t139 <- global int k; _g_k: def byte 4
		print reg int t139
		reg int t133 <- auto int k
		reg int t134 <- 1
		reg int32_t t135 <- reg int t133 plus reg int t134
		auto int k <- reg int32_t t135
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 127755173510928 {
		parent = 127755174517872
		}
		reg int t141 <- 88883
		print reg int t141
		reg int t143 <- 99994
		print reg int t143
		<class 'ir.AssignStat'> 127755173890704 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173890224 {
			parent = 127755173890704
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int m
		}
		label23: <class 'ir.EmptyStat'> 127755173889312 {
		parent = 127755174517872
		}
		reg int t144 <- auto int m
		reg int t145 <- 6
		reg int32_t t146 <- reg int t144 leq reg int t145
		branch on not reg int32_t t146 to auto label label25
		reg int t151 <- global int m; _g_m: def byte 4
		print reg int t151
		reg int t147 <- auto int m
		reg int t148 <- 1
		reg int32_t t149 <- reg int t147 plus reg int t148
		auto int m <- reg int32_t t149
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 127755173530112 {
		parent = 127755174517872
		}
		reg int t153 <- 88884
		print reg int t153
		reg int t155 <- 99995
		print reg int t155
		<class 'ir.AssignStat'> 127755173892304 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173891760 {
			parent = 127755173892304
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int n
		}
		label26: <class 'ir.EmptyStat'> 127755173890896 {
		parent = 127755174517872
		}
		reg int t156 <- auto int n
		reg int t157 <- 7
		reg int32_t t158 <- reg int t156 leq reg int t157
		branch on not reg int32_t t158 to auto label label28
		reg int t163 <- global int n; _g_n: def byte 4
		print reg int t163
		reg int t159 <- auto int n
		reg int t160 <- 1
		reg int32_t t161 <- reg int t159 plus reg int t160
		auto int n <- reg int32_t t161
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 127755173553392 {
		parent = 127755174517872
		}
		reg int t165 <- 88885
		print reg int t165
		reg int t167 <- 99996
		print reg int t167
		<class 'ir.AssignStat'> 127755173893888 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173893408 {
			parent = 127755173893888
				value: 	10
				symbol: 	None
			}
			symbol: 	auto int p
		}
		label29: <class 'ir.EmptyStat'> 127755173891856 {
		parent = 127755174517872
		}
		reg int t168 <- auto int p
		reg int t169 <- 12
		reg int32_t t170 <- reg int t168 leq reg int t169
		branch on not reg int32_t t170 to auto label label31
		reg int t175 <- global int p; _g_p: def byte 4
		print reg int t175
		reg int t171 <- auto int p
		reg int t172 <- 1
		reg int32_t t173 <- reg int t171 plus reg int t172
		auto int p <- reg int32_t t173
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 127755173556128 {
		parent = 127755174517872
		}
		reg int t177 <- 88886
		print reg int t177
		reg int t178 <- 0
		global int sum; _g_sum: def byte 4 <- reg int t178
		reg int t180 <- 99997
		print reg int t180
		<class 'ir.AssignStat'> 127755173896048 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755173895040 {
			parent = 127755173896048
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int q
		}
		label32: <class 'ir.EmptyStat'> 127755173565200 {
		parent = 127755174517872
		}
		reg int t181 <- auto int q
		reg int t182 <- 5
		reg int32_t t183 <- reg int t181 leq reg int t182
		branch on not reg int32_t t183 to auto label label34
		reg int t187 <- global int sum; _g_sum: def byte 4
		reg int t188 <- global int q; _g_q: def byte 4
		reg int32_t t189 <- reg int t187 plus reg int t188
		global int sum; _g_sum: def byte 4 <- reg int32_t t189
		reg int t191 <- global int q; _g_q: def byte 4
		print reg int t191
		reg int t193 <- global int sum; _g_sum: def byte 4
		print reg int t193
		reg int t184 <- auto int q
		reg int t185 <- 1
		reg int32_t t186 <- reg int t184 plus reg int t185
		auto int q <- reg int32_t t186
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 127755173568320 {
		parent = 127755174517872
		}
		reg int t195 <- global int sum; _g_sum: def byte 4
		print reg int t195
		reg int t197 <- 88887
		print reg int t197
		reg int t198 <- 100
		global int x; _g_x: def byte 4 <- reg int t198
		reg int t200 <- 99998
		print reg int t200
		<class 'ir.AssignStat'> 127755174454080 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174456432 {
			parent = 127755174454080
				value: 	1
				symbol: 	None
			}
			symbol: 	auto int r
		}
		label35: <class 'ir.EmptyStat'> 127755173581968 {
		parent = 127755174517872
		}
		reg int t201 <- auto int r
		reg int t202 <- 3
		reg int32_t t203 <- reg int t201 leq reg int t202
		branch on not reg int32_t t203 to auto label label37
		reg int t207 <- global int x; _g_x: def byte 4
		reg int t208 <- global int r; _g_r: def byte 4
		reg int32_t t209 <- reg int t207 plus reg int t208
		global int x; _g_x: def byte 4 <- reg int32_t t209
		reg int t211 <- global int x; _g_x: def byte 4
		print reg int t211
		reg int t204 <- auto int r
		reg int t205 <- 1
		reg int32_t t206 <- reg int t204 plus reg int t205
		auto int r <- reg int32_t t206
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 127755173584608 {
		parent = 127755174517872
		}
		reg int t213 <- global int x; _g_x: def byte 4
		print reg int t213
		reg int t215 <- 88888
		print reg int t215
		reg int t217 <- 999990
		print reg int t217
		reg int t218 <- 0
		global int sm_idx; _g_sm_idx: def byte 4 <- reg int t218
		<class 'ir.AssignStat'> 127755174516960 {
		parent = 127755174517872
			offset: 	None
			expr: 	<class 'ir.Const'> 127755174454848 {
			parent = 127755174516960
				value: 	0
				symbol: 	None
			}
			symbol: 	auto int sm_idx
		}
		label38: <class 'ir.EmptyStat'> 127755174456048 {
		parent = 127755174517872
		}
		reg int t219 <- auto int sm_idx
		reg int t220 <- 127
		reg int32_t t221 <- reg int t219 leq reg int t220
		branch on not reg int32_t t221 to auto label label40
		reg int t228 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int t229 <- 4
		reg int32_t t231 <- reg int t228 times reg int t229
		reg &int t233 <- &(global int[128] sm_source_arr; _g_sm_source_arr: def byte 512)
		reg &int t234 <- reg &int t233 plus reg int32_t t231
		reg int t232 <- [reg &int t234]
		reg int t235 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int32_t t236 <- reg int t232 plus reg int t235
		reg int t225 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int t226 <- 4
		reg int32_t t227 <- reg int t225 times reg int t226
		reg &int t237 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t238 <- reg &int t237 plus reg int32_t t227
		[reg &int t238] <- reg int32_t t236
		reg int t222 <- auto int sm_idx
		reg int t223 <- 1
		reg int32_t t224 <- reg int t222 plus reg int t223
		auto int sm_idx <- reg int32_t t224
		branch  to auto label label38
		label40: <class 'ir.EmptyStat'> 127755173627024 {
		parent = 127755174517872
		}
		reg int t239 <- 127
		reg int t240 <- 0
		reg int32_t t241 <- reg int t239 geq reg int t240
		branch on not reg int32_t t241 to auto label label41
		reg int t243 <- 76543
		print reg int t243
		reg int t244 <- 0
		reg int t245 <- 4
		reg int32_t t247 <- reg int t244 times reg int t245
		reg &int t252 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t253 <- reg &int t252 plus reg int32_t t247
		reg int t251 <- [reg &int t253]
		print reg int t251
		reg int t254 <- 64
		reg int t255 <- 4
		reg int32_t t257 <- reg int t254 times reg int t255
		reg &int t262 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t263 <- reg &int t262 plus reg int32_t t257
		reg int t261 <- [reg &int t263]
		print reg int t261
		reg int t264 <- 127
		reg int t265 <- 4
		reg int32_t t267 <- reg int t264 times reg int t265
		reg &int t272 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t273 <- reg &int t272 plus reg int32_t t267
		reg int t271 <- [reg &int t273]
		print reg int t271
		label41: <class 'ir.EmptyStat'> 127755173655024 {
		parent = 127755174517872
		}
		reg int t275 <- 888880
		print reg int t275
	}
}

--- Constructing CFG ---
DEBUG: Starting CFG construction...
DEBUG: Found 2 StatLists
DEBUG: Processing StatList 0
DEBUG: Converting StatList with 6 statements
DEBUG: Processing instruction 0: LoadImmStat
DEBUG: Processing instruction 1: StoreStat
DEBUG: Processing instruction 2: LoadStat
DEBUG: Processing instruction 3: LoadStat
DEBUG: Processing instruction 4: BinStat
DEBUG: Processing instruction 5: StoreStat
DEBUG: Created final BB_127755173566016 with 6 instructions
DEBUG: Created 1 basic blocks total
DEBUG: Processing StatList 1
DEBUG: Converting StatList with 357 statements
DEBUG: Processing instruction 0: LoadImmStat
DEBUG: Processing instruction 1: UnaryStat
DEBUG: Processing instruction 2: StoreStat
DEBUG: Processing instruction 3: ReadCommand
DEBUG: Processing instruction 4: StoreStat
DEBUG: Processing instruction 5: LoadStat
DEBUG: Processing instruction 6: LoadImmStat
DEBUG: Processing instruction 7: BinStat
DEBUG: Processing instruction 8: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label2
DEBUG: Created BB_127755173565824 ending with branch
DEBUG: Processing instruction 9: LoadStat
DEBUG: Processing instruction 10: PrintCommand
DEBUG: Processing instruction 11: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label1
DEBUG: Created BB_127755173894704 ending with branch
DEBUG: Processing instruction 12: EmptyStat
DEBUG: Found label: label2
DEBUG: Processing instruction 13: LoadStat
DEBUG: Processing instruction 14: UnaryStat
DEBUG: Processing instruction 15: PrintCommand
DEBUG: Processing instruction 16: EmptyStat
DEBUG: Found label: label1
DEBUG: Created BB_127755173895136 with 4 instructions
DEBUG: Processing instruction 17: LoadImmStat
DEBUG: Processing instruction 18: StoreStat
DEBUG: Processing instruction 19: EmptyStat
DEBUG: Found label: label3
DEBUG: Created BB_127755173894080 with 3 instructions
DEBUG: Linked BB_127755173895136 -> BB_127755173894080 (fall-through)
DEBUG: Processing instruction 20: LoadStat
DEBUG: Processing instruction 21: LoadImmStat
DEBUG: Processing instruction 22: BinStat
DEBUG: Processing instruction 23: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label4
DEBUG: Created BB_127755173552480 ending with branch
DEBUG: Linked BB_127755173894080 -> BB_127755173552480 (pre-branch)
DEBUG: Processing instruction 24: BranchStat
DEBUG: Found branch instruction:
  - Returns: True
  - Has condition: False
  - Target: auto function square
DEBUG: Created BB_127755173555120 ending with branch
DEBUG: Processing instruction 25: LoadStat
DEBUG: Processing instruction 26: LoadImmStat
DEBUG: Processing instruction 27: BinStat
DEBUG: Processing instruction 28: StoreStat
DEBUG: Processing instruction 29: LoadStat
DEBUG: Processing instruction 30: PrintCommand
DEBUG: Processing instruction 31: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label3
DEBUG: Created BB_127755173555216 ending with branch
DEBUG: Linked BB_127755173555120 -> BB_127755173555216 (pre-branch)
DEBUG: Processing instruction 32: EmptyStat
DEBUG: Found label: label4
DEBUG: Processing instruction 33: LoadImmStat
DEBUG: Processing instruction 34: StoreStat
DEBUG: Processing instruction 35: EmptyStat
DEBUG: Found label: label5
DEBUG: Created BB_127755173555264 with 3 instructions
DEBUG: Processing instruction 36: LoadStat
DEBUG: Processing instruction 37: LoadImmStat
DEBUG: Processing instruction 38: BinStat
DEBUG: Processing instruction 39: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label6
DEBUG: Created BB_127755173554640 ending with branch
DEBUG: Linked BB_127755173555264 -> BB_127755173554640 (pre-branch)
DEBUG: Processing instruction 40: LoadStat
DEBUG: Processing instruction 41: LoadStat
DEBUG: Processing instruction 42: LoadImmStat
DEBUG: Processing instruction 43: BinStat
DEBUG: Processing instruction 44: LoadImmStat
DEBUG: Processing instruction 45: BinStat
DEBUG: Processing instruction 46: LoadPtrToSym
DEBUG: Processing instruction 47: BinStat
DEBUG: Processing instruction 48: StoreStat
DEBUG: Processing instruction 49: LoadStat
DEBUG: Processing instruction 50: LoadImmStat
DEBUG: Processing instruction 51: BinStat
DEBUG: Processing instruction 52: LoadImmStat
DEBUG: Processing instruction 53: BinStat
DEBUG: Processing instruction 54: LoadPtrToSym
DEBUG: Processing instruction 55: BinStat
DEBUG: Processing instruction 56: LoadStat
DEBUG: Processing instruction 57: PrintCommand
DEBUG: Processing instruction 58: LoadStat
DEBUG: Processing instruction 59: LoadImmStat
DEBUG: Processing instruction 60: BinStat
DEBUG: Processing instruction 61: StoreStat
DEBUG: Processing instruction 62: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label5
DEBUG: Created BB_127755173554832 ending with branch
DEBUG: Processing instruction 63: EmptyStat
DEBUG: Found label: label6
DEBUG: Processing instruction 64: LoadImmStat
DEBUG: Processing instruction 65: StoreStat
DEBUG: Processing instruction 66: LoadImmStat
DEBUG: Processing instruction 67: StoreStat
DEBUG: Processing instruction 68: EmptyStat
DEBUG: Found label: label9
DEBUG: Created BB_127755173554880 with 5 instructions
DEBUG: Processing instruction 69: LoadStat
DEBUG: Processing instruction 70: LoadImmStat
DEBUG: Processing instruction 71: BinStat
DEBUG: Processing instruction 72: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label10
DEBUG: Created BB_127755173552528 ending with branch
DEBUG: Linked BB_127755173554880 -> BB_127755173552528 (pre-branch)
DEBUG: Processing instruction 73: EmptyStat
DEBUG: Found label: label7
DEBUG: Processing instruction 74: LoadStat
DEBUG: Processing instruction 75: LoadImmStat
DEBUG: Processing instruction 76: BinStat
DEBUG: Processing instruction 77: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label8
DEBUG: Created BB_127755173552384 ending with branch
DEBUG: Processing instruction 78: LoadStat
DEBUG: Processing instruction 79: LoadImmStat
DEBUG: Processing instruction 80: BinStat
DEBUG: Processing instruction 81: LoadPtrToSym
DEBUG: Processing instruction 82: BinStat
DEBUG: Processing instruction 83: LoadStat
DEBUG: Processing instruction 84: LoadStat
DEBUG: Processing instruction 85: LoadImmStat
DEBUG: Processing instruction 86: BinStat
DEBUG: Processing instruction 87: LoadStat
DEBUG: Processing instruction 88: LoadImmStat
DEBUG: Processing instruction 89: BinStat
DEBUG: Processing instruction 90: BinStat
DEBUG: Processing instruction 91: LoadPtrToSym
DEBUG: Processing instruction 92: BinStat
DEBUG: Processing instruction 93: StoreStat
DEBUG: Processing instruction 94: LoadStat
DEBUG: Processing instruction 95: LoadImmStat
DEBUG: Processing instruction 96: BinStat
DEBUG: Processing instruction 97: LoadStat
DEBUG: Processing instruction 98: LoadImmStat
DEBUG: Processing instruction 99: BinStat
DEBUG: Processing instruction 100: BinStat
DEBUG: Processing instruction 101: LoadPtrToSym
DEBUG: Processing instruction 102: BinStat
DEBUG: Processing instruction 103: LoadStat
DEBUG: Processing instruction 104: PrintCommand
DEBUG: Processing instruction 105: LoadStat
DEBUG: Processing instruction 106: LoadImmStat
DEBUG: Processing instruction 107: BinStat
DEBUG: Processing instruction 108: StoreStat
DEBUG: Processing instruction 109: LoadStat
DEBUG: Processing instruction 110: LoadImmStat
DEBUG: Processing instruction 111: BinStat
DEBUG: Processing instruction 112: StoreStat
DEBUG: Processing instruction 113: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label7
DEBUG: Created BB_127755173529104 ending with branch
DEBUG: Processing instruction 114: EmptyStat
DEBUG: Found label: label8
DEBUG: Processing instruction 115: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label9
DEBUG: Created BB_127755173531360 ending with branch
DEBUG: Processing instruction 116: EmptyStat
DEBUG: Found label: label10
DEBUG: Processing instruction 117: AssignStat
DEBUG: Processing instruction 118: EmptyStat
DEBUG: Found label: label11
DEBUG: Created BB_127755173531552 with 2 instructions
DEBUG: Processing instruction 119: LoadStat
DEBUG: Processing instruction 120: LoadImmStat
DEBUG: Processing instruction 121: BinStat
DEBUG: Processing instruction 122: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label13
DEBUG: Created BB_127755173531600 ending with branch
DEBUG: Linked BB_127755173531552 -> BB_127755173531600 (pre-branch)
DEBUG: Processing instruction 123: LoadStat
DEBUG: Processing instruction 124: PrintCommand
DEBUG: Processing instruction 125: LoadStat
DEBUG: Processing instruction 126: LoadImmStat
DEBUG: Processing instruction 127: BinStat
DEBUG: Processing instruction 128: StoreStat
DEBUG: Processing instruction 129: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label11
DEBUG: Created BB_127755173529200 ending with branch
DEBUG: Processing instruction 130: EmptyStat
DEBUG: Found label: label13
DEBUG: Processing instruction 131: LoadImmStat
DEBUG: Processing instruction 132: StoreStat
DEBUG: Processing instruction 133: LoadImmStat
DEBUG: Processing instruction 134: PrintCommand
DEBUG: Processing instruction 135: AssignStat
DEBUG: Processing instruction 136: EmptyStat
DEBUG: Found label: label14
DEBUG: Created BB_127755173528624 with 6 instructions
DEBUG: Processing instruction 137: LoadStat
DEBUG: Processing instruction 138: LoadImmStat
DEBUG: Processing instruction 139: BinStat
DEBUG: Processing instruction 140: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label16
DEBUG: Created BB_127755173529248 ending with branch
DEBUG: Linked BB_127755173528624 -> BB_127755173529248 (pre-branch)
DEBUG: Processing instruction 141: LoadStat
DEBUG: Processing instruction 142: PrintCommand
DEBUG: Processing instruction 143: LoadStat
DEBUG: Processing instruction 144: LoadImmStat
DEBUG: Processing instruction 145: BinStat
DEBUG: Processing instruction 146: StoreStat
DEBUG: Processing instruction 147: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label14
DEBUG: Created BB_127755173528864 ending with branch
DEBUG: Processing instruction 148: EmptyStat
DEBUG: Found label: label16
DEBUG: Processing instruction 149: LoadImmStat
DEBUG: Processing instruction 150: PrintCommand
DEBUG: Processing instruction 151: LoadImmStat
DEBUG: Processing instruction 152: PrintCommand
DEBUG: Processing instruction 153: AssignStat
DEBUG: Processing instruction 154: EmptyStat
DEBUG: Found label: label17
DEBUG: Created BB_127755173528816 with 6 instructions
DEBUG: Processing instruction 155: LoadStat
DEBUG: Processing instruction 156: LoadImmStat
DEBUG: Processing instruction 157: BinStat
DEBUG: Processing instruction 158: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label19
DEBUG: Created BB_127755173509440 ending with branch
DEBUG: Linked BB_127755173528816 -> BB_127755173509440 (pre-branch)
DEBUG: Processing instruction 159: LoadStat
DEBUG: Processing instruction 160: PrintCommand
DEBUG: Processing instruction 161: LoadStat
DEBUG: Processing instruction 162: LoadImmStat
DEBUG: Processing instruction 163: BinStat
DEBUG: Processing instruction 164: StoreStat
DEBUG: Processing instruction 165: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label17
DEBUG: Created BB_127755173509536 ending with branch
DEBUG: Processing instruction 166: EmptyStat
DEBUG: Found label: label19
DEBUG: Processing instruction 167: LoadImmStat
DEBUG: Processing instruction 168: PrintCommand
DEBUG: Processing instruction 169: LoadImmStat
DEBUG: Processing instruction 170: PrintCommand
DEBUG: Processing instruction 171: AssignStat
DEBUG: Processing instruction 172: EmptyStat
DEBUG: Found label: label20
DEBUG: Created BB_127755173508960 with 6 instructions
DEBUG: Processing instruction 173: LoadStat
DEBUG: Processing instruction 174: LoadImmStat
DEBUG: Processing instruction 175: BinStat
DEBUG: Processing instruction 176: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label22
DEBUG: Created BB_127755173509584 ending with branch
DEBUG: Linked BB_127755173508960 -> BB_127755173509584 (pre-branch)
DEBUG: Processing instruction 177: LoadImmStat
DEBUG: Processing instruction 178: PrintCommand
DEBUG: Processing instruction 179: LoadStat
DEBUG: Processing instruction 180: PrintCommand
DEBUG: Processing instruction 181: LoadStat
DEBUG: Processing instruction 182: LoadImmStat
DEBUG: Processing instruction 183: BinStat
DEBUG: Processing instruction 184: StoreStat
DEBUG: Processing instruction 185: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label20
DEBUG: Created BB_127755173509152 ending with branch
DEBUG: Processing instruction 186: EmptyStat
DEBUG: Found label: label22
DEBUG: Processing instruction 187: LoadImmStat
DEBUG: Processing instruction 188: PrintCommand
DEBUG: Processing instruction 189: LoadImmStat
DEBUG: Processing instruction 190: PrintCommand
DEBUG: Processing instruction 191: AssignStat
DEBUG: Processing instruction 192: EmptyStat
DEBUG: Found label: label23
DEBUG: Created BB_127755173509200 with 6 instructions
DEBUG: Processing instruction 193: LoadStat
DEBUG: Processing instruction 194: LoadImmStat
DEBUG: Processing instruction 195: BinStat
DEBUG: Processing instruction 196: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label25
DEBUG: Created BB_127755174039120 ending with branch
DEBUG: Linked BB_127755173509200 -> BB_127755174039120 (pre-branch)
DEBUG: Processing instruction 197: LoadStat
DEBUG: Processing instruction 198: PrintCommand
DEBUG: Processing instruction 199: LoadStat
DEBUG: Processing instruction 200: LoadImmStat
DEBUG: Processing instruction 201: BinStat
DEBUG: Processing instruction 202: StoreStat
DEBUG: Processing instruction 203: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label23
DEBUG: Created BB_127755174039216 ending with branch
DEBUG: Processing instruction 204: EmptyStat
DEBUG: Found label: label25
DEBUG: Processing instruction 205: LoadImmStat
DEBUG: Processing instruction 206: PrintCommand
DEBUG: Processing instruction 207: LoadImmStat
DEBUG: Processing instruction 208: PrintCommand
DEBUG: Processing instruction 209: AssignStat
DEBUG: Processing instruction 210: EmptyStat
DEBUG: Found label: label26
DEBUG: Created BB_127755174036384 with 6 instructions
DEBUG: Processing instruction 211: LoadStat
DEBUG: Processing instruction 212: LoadImmStat
DEBUG: Processing instruction 213: BinStat
DEBUG: Processing instruction 214: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label28
DEBUG: Created BB_127755174039264 ending with branch
DEBUG: Linked BB_127755174036384 -> BB_127755174039264 (pre-branch)
DEBUG: Processing instruction 215: LoadStat
DEBUG: Processing instruction 216: PrintCommand
DEBUG: Processing instruction 217: LoadStat
DEBUG: Processing instruction 218: LoadImmStat
DEBUG: Processing instruction 219: BinStat
DEBUG: Processing instruction 220: StoreStat
DEBUG: Processing instruction 221: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label26
DEBUG: Created BB_127755174038640 ending with branch
DEBUG: Processing instruction 222: EmptyStat
DEBUG: Found label: label28
DEBUG: Processing instruction 223: LoadImmStat
DEBUG: Processing instruction 224: PrintCommand
DEBUG: Processing instruction 225: LoadImmStat
DEBUG: Processing instruction 226: PrintCommand
DEBUG: Processing instruction 227: AssignStat
DEBUG: Processing instruction 228: EmptyStat
DEBUG: Found label: label29
DEBUG: Created BB_127755174038832 with 6 instructions
DEBUG: Processing instruction 229: LoadStat
DEBUG: Processing instruction 230: LoadImmStat
DEBUG: Processing instruction 231: BinStat
DEBUG: Processing instruction 232: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label31
DEBUG: Created BB_127755174038880 ending with branch
DEBUG: Linked BB_127755174038832 -> BB_127755174038880 (pre-branch)
DEBUG: Processing instruction 233: LoadStat
DEBUG: Processing instruction 234: PrintCommand
DEBUG: Processing instruction 235: LoadStat
DEBUG: Processing instruction 236: LoadImmStat
DEBUG: Processing instruction 237: BinStat
DEBUG: Processing instruction 238: StoreStat
DEBUG: Processing instruction 239: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label29
DEBUG: Created BB_127755174036480 ending with branch
DEBUG: Processing instruction 240: EmptyStat
DEBUG: Found label: label31
DEBUG: Processing instruction 241: LoadImmStat
DEBUG: Processing instruction 242: PrintCommand
DEBUG: Processing instruction 243: LoadImmStat
DEBUG: Processing instruction 244: StoreStat
DEBUG: Processing instruction 245: LoadImmStat
DEBUG: Processing instruction 246: PrintCommand
DEBUG: Processing instruction 247: AssignStat
DEBUG: Processing instruction 248: EmptyStat
DEBUG: Found label: label32
DEBUG: Created BB_127755174035904 with 8 instructions
DEBUG: Processing instruction 249: LoadStat
DEBUG: Processing instruction 250: LoadImmStat
DEBUG: Processing instruction 251: BinStat
DEBUG: Processing instruction 252: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label34
DEBUG: Created BB_127755174036528 ending with branch
DEBUG: Linked BB_127755174035904 -> BB_127755174036528 (pre-branch)
DEBUG: Processing instruction 253: LoadStat
DEBUG: Processing instruction 254: LoadStat
DEBUG: Processing instruction 255: BinStat
DEBUG: Processing instruction 256: StoreStat
DEBUG: Processing instruction 257: LoadStat
DEBUG: Processing instruction 258: PrintCommand
DEBUG: Processing instruction 259: LoadStat
DEBUG: Processing instruction 260: PrintCommand
DEBUG: Processing instruction 261: LoadStat
DEBUG: Processing instruction 262: LoadImmStat
DEBUG: Processing instruction 263: BinStat
DEBUG: Processing instruction 264: StoreStat
DEBUG: Processing instruction 265: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label32
DEBUG: Created BB_127755174036144 ending with branch
DEBUG: Processing instruction 266: EmptyStat
DEBUG: Found label: label34
DEBUG: Processing instruction 267: LoadStat
DEBUG: Processing instruction 268: PrintCommand
DEBUG: Processing instruction 269: LoadImmStat
DEBUG: Processing instruction 270: PrintCommand
DEBUG: Processing instruction 271: LoadImmStat
DEBUG: Processing instruction 272: StoreStat
DEBUG: Processing instruction 273: LoadImmStat
DEBUG: Processing instruction 274: PrintCommand
DEBUG: Processing instruction 275: AssignStat
DEBUG: Processing instruction 276: EmptyStat
DEBUG: Found label: label35
DEBUG: Created BB_127755174036096 with 10 instructions
DEBUG: Processing instruction 277: LoadStat
DEBUG: Processing instruction 278: LoadImmStat
DEBUG: Processing instruction 279: BinStat
DEBUG: Processing instruction 280: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label37
DEBUG: Created BB_127755174530496 ending with branch
DEBUG: Linked BB_127755174036096 -> BB_127755174530496 (pre-branch)
DEBUG: Processing instruction 281: LoadStat
DEBUG: Processing instruction 282: LoadStat
DEBUG: Processing instruction 283: BinStat
DEBUG: Processing instruction 284: StoreStat
DEBUG: Processing instruction 285: LoadStat
DEBUG: Processing instruction 286: PrintCommand
DEBUG: Processing instruction 287: LoadStat
DEBUG: Processing instruction 288: LoadImmStat
DEBUG: Processing instruction 289: BinStat
DEBUG: Processing instruction 290: StoreStat
DEBUG: Processing instruction 291: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label35
DEBUG: Created BB_127755174527040 ending with branch
DEBUG: Processing instruction 292: EmptyStat
DEBUG: Found label: label37
DEBUG: Processing instruction 293: LoadStat
DEBUG: Processing instruction 294: PrintCommand
DEBUG: Processing instruction 295: LoadImmStat
DEBUG: Processing instruction 296: PrintCommand
DEBUG: Processing instruction 297: LoadImmStat
DEBUG: Processing instruction 298: PrintCommand
DEBUG: Processing instruction 299: LoadImmStat
DEBUG: Processing instruction 300: StoreStat
DEBUG: Processing instruction 301: AssignStat
DEBUG: Processing instruction 302: EmptyStat
DEBUG: Found label: label38
DEBUG: Created BB_127755174529344 with 10 instructions
DEBUG: Processing instruction 303: LoadStat
DEBUG: Processing instruction 304: LoadImmStat
DEBUG: Processing instruction 305: BinStat
DEBUG: Processing instruction 306: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label40
DEBUG: Created BB_127755174528288 ending with branch
DEBUG: Linked BB_127755174529344 -> BB_127755174528288 (pre-branch)
DEBUG: Processing instruction 307: LoadStat
DEBUG: Processing instruction 308: LoadImmStat
DEBUG: Processing instruction 309: BinStat
DEBUG: Processing instruction 310: LoadPtrToSym
DEBUG: Processing instruction 311: BinStat
DEBUG: Processing instruction 312: LoadStat
DEBUG: Processing instruction 313: LoadStat
DEBUG: Processing instruction 314: BinStat
DEBUG: Processing instruction 315: LoadStat
DEBUG: Processing instruction 316: LoadImmStat
DEBUG: Processing instruction 317: BinStat
DEBUG: Processing instruction 318: LoadPtrToSym
DEBUG: Processing instruction 319: BinStat
DEBUG: Processing instruction 320: StoreStat
DEBUG: Processing instruction 321: LoadStat
DEBUG: Processing instruction 322: LoadImmStat
DEBUG: Processing instruction 323: BinStat
DEBUG: Processing instruction 324: StoreStat
DEBUG: Processing instruction 325: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label38
DEBUG: Created BB_127755174074784 ending with branch
DEBUG: Processing instruction 326: EmptyStat
DEBUG: Found label: label40
DEBUG: Processing instruction 327: LoadImmStat
DEBUG: Processing instruction 328: LoadImmStat
DEBUG: Processing instruction 329: BinStat
DEBUG: Processing instruction 330: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label41
DEBUG: Created BB_127755174074880 ending with branch
DEBUG: Processing instruction 331: LoadImmStat
DEBUG: Processing instruction 332: PrintCommand
DEBUG: Processing instruction 333: LoadImmStat
DEBUG: Processing instruction 334: LoadImmStat
DEBUG: Processing instruction 335: BinStat
DEBUG: Processing instruction 336: LoadPtrToSym
DEBUG: Processing instruction 337: BinStat
DEBUG: Processing instruction 338: LoadStat
DEBUG: Processing instruction 339: PrintCommand
DEBUG: Processing instruction 340: LoadImmStat
DEBUG: Processing instruction 341: LoadImmStat
DEBUG: Processing instruction 342: BinStat
DEBUG: Processing instruction 343: LoadPtrToSym
DEBUG: Processing instruction 344: BinStat
DEBUG: Processing instruction 345: LoadStat
DEBUG: Processing instruction 346: PrintCommand
DEBUG: Processing instruction 347: LoadImmStat
DEBUG: Processing instruction 348: LoadImmStat
DEBUG: Processing instruction 349: BinStat
DEBUG: Processing instruction 350: LoadPtrToSym
DEBUG: Processing instruction 351: BinStat
DEBUG: Processing instruction 352: LoadStat
DEBUG: Processing instruction 353: PrintCommand
DEBUG: Processing instruction 354: EmptyStat
DEBUG: Found label: label41
DEBUG: Created BB_127755174074928 with 23 instructions
DEBUG: Processing instruction 355: LoadImmStat
DEBUG: Processing instruction 356: PrintCommand
DEBUG: Created final BB_127755173566880 with 3 instructions
DEBUG: Linked BB_127755174074928 -> BB_127755173566880 (final)
DEBUG: Created 48 basic blocks total
DEBUG: CFG created with 49 basic blocks
   Rebuilding ALL CFG links (next, target_bb, preds)...
DEBUG: Built label map with 31 labels
DEBUG: BB_127755173565824 has branch target: auto label label2
DEBUG: BB_127755173565824 resolved target to BB_127755173895136
DEBUG: BB_127755173894704 has branch target: auto label label1
DEBUG: BB_127755173894704 resolved target to BB_127755173894080
DEBUG: Removing useless next from BB_127755173894704 (has unconditional branch)
DEBUG: BB_127755173552480 has branch target: auto label label4
DEBUG: BB_127755173552480 resolved target to BB_127755173555264
DEBUG: Removing useless next from BB_127755173555120 (has unconditional branch)
DEBUG: BB_127755173555216 has branch target: auto label label3
DEBUG: BB_127755173555216 resolved target to BB_127755173552480
DEBUG: Removing useless next from BB_127755173555216 (has unconditional branch)
DEBUG: BB_127755173554640 has branch target: auto label label6
DEBUG: BB_127755173554640 resolved target to BB_127755173554880
DEBUG: BB_127755173554832 has branch target: auto label label5
DEBUG: BB_127755173554832 resolved target to BB_127755173554640
DEBUG: Removing useless next from BB_127755173554832 (has unconditional branch)
DEBUG: BB_127755173552528 has branch target: auto label label10
DEBUG: BB_127755173552528 resolved target to BB_127755173531552
DEBUG: BB_127755173552384 has branch target: auto label label8
DEBUG: BB_127755173552384 resolved target to BB_127755173531360
DEBUG: BB_127755173529104 has branch target: auto label label7
DEBUG: BB_127755173529104 resolved target to BB_127755173552384
DEBUG: Removing useless next from BB_127755173529104 (has unconditional branch)
DEBUG: BB_127755173531360 has branch target: auto label label9
DEBUG: BB_127755173531360 resolved target to BB_127755173552528
DEBUG: Removing useless next from BB_127755173531360 (has unconditional branch)
DEBUG: BB_127755173531600 has branch target: auto label label13
DEBUG: BB_127755173531600 resolved target to BB_127755173528624
DEBUG: BB_127755173529200 has branch target: auto label label11
DEBUG: BB_127755173529200 resolved target to BB_127755173531600
DEBUG: Removing useless next from BB_127755173529200 (has unconditional branch)
DEBUG: BB_127755173529248 has branch target: auto label label16
DEBUG: BB_127755173529248 resolved target to BB_127755173528816
DEBUG: BB_127755173528864 has branch target: auto label label14
DEBUG: BB_127755173528864 resolved target to BB_127755173529248
DEBUG: Removing useless next from BB_127755173528864 (has unconditional branch)
DEBUG: BB_127755173509440 has branch target: auto label label19
DEBUG: BB_127755173509440 resolved target to BB_127755173508960
DEBUG: BB_127755173509536 has branch target: auto label label17
DEBUG: BB_127755173509536 resolved target to BB_127755173509440
DEBUG: Removing useless next from BB_127755173509536 (has unconditional branch)
DEBUG: BB_127755173509584 has branch target: auto label label22
DEBUG: BB_127755173509584 resolved target to BB_127755173509200
DEBUG: BB_127755173509152 has branch target: auto label label20
DEBUG: BB_127755173509152 resolved target to BB_127755173509584
DEBUG: Removing useless next from BB_127755173509152 (has unconditional branch)
DEBUG: BB_127755174039120 has branch target: auto label label25
DEBUG: BB_127755174039120 resolved target to BB_127755174036384
DEBUG: BB_127755174039216 has branch target: auto label label23
DEBUG: BB_127755174039216 resolved target to BB_127755174039120
DEBUG: Removing useless next from BB_127755174039216 (has unconditional branch)
DEBUG: BB_127755174039264 has branch target: auto label label28
DEBUG: BB_127755174039264 resolved target to BB_127755174038832
DEBUG: BB_127755174038640 has branch target: auto label label26
DEBUG: BB_127755174038640 resolved target to BB_127755174039264
DEBUG: Removing useless next from BB_127755174038640 (has unconditional branch)
DEBUG: BB_127755174038880 has branch target: auto label label31
DEBUG: BB_127755174038880 resolved target to BB_127755174035904
DEBUG: BB_127755174036480 has branch target: auto label label29
DEBUG: BB_127755174036480 resolved target to BB_127755174038880
DEBUG: Removing useless next from BB_127755174036480 (has unconditional branch)
DEBUG: BB_127755174036528 has branch target: auto label label34
DEBUG: BB_127755174036528 resolved target to BB_127755174036096
DEBUG: BB_127755174036144 has branch target: auto label label32
DEBUG: BB_127755174036144 resolved target to BB_127755174036528
DEBUG: Removing useless next from BB_127755174036144 (has unconditional branch)
DEBUG: BB_127755174530496 has branch target: auto label label37
DEBUG: BB_127755174530496 resolved target to BB_127755174529344
DEBUG: BB_127755174527040 has branch target: auto label label35
DEBUG: BB_127755174527040 resolved target to BB_127755174530496
DEBUG: Removing useless next from BB_127755174527040 (has unconditional branch)
DEBUG: BB_127755174528288 has branch target: auto label label40
DEBUG: BB_127755174528288 resolved target to BB_127755174074880
DEBUG: BB_127755174074784 has branch target: auto label label38
DEBUG: BB_127755174074784 resolved target to BB_127755174528288
DEBUG: Removing useless next from BB_127755174074784 (has unconditional branch)
DEBUG: BB_127755174074880 has branch target: auto label label41
DEBUG: BB_127755174074880 resolved target to BB_127755173566880
   CFG links rebuild complete.
DEBUG: CFG Link Summary:
  BB_127755173565824: 1 successors, 0 preds
  BB_127755173894704: 1 successors, 0 preds
  BB_127755173552480: 1 successors, 2 preds
  BB_127755173555216: 1 successors, 0 preds
  BB_127755173554640: 1 successors, 2 preds
  BB_127755173554832: 1 successors, 0 preds
  BB_127755173552528: 1 successors, 2 preds
  BB_127755173552384: 1 successors, 1 preds
  BB_127755173529104: 1 successors, 0 preds
  BB_127755173531360: 1 successors, 1 preds
  BB_127755173531600: 1 successors, 2 preds
  BB_127755173529200: 1 successors, 0 preds
  BB_127755173529248: 1 successors, 2 preds
  BB_127755173528864: 1 successors, 0 preds
  BB_127755173509440: 1 successors, 2 preds
  BB_127755173509536: 1 successors, 0 preds
  BB_127755173509584: 1 successors, 2 preds
  BB_127755173509152: 1 successors, 0 preds
  BB_127755174039120: 1 successors, 2 preds
  BB_127755174039216: 1 successors, 0 preds
  BB_127755174039264: 1 successors, 2 preds
  BB_127755174038640: 1 successors, 0 preds
  BB_127755174038880: 1 successors, 2 preds
  BB_127755174036480: 1 successors, 0 preds
  BB_127755174036528: 1 successors, 2 preds
  BB_127755174036144: 1 successors, 0 preds
  BB_127755174530496: 1 successors, 2 preds
  BB_127755174527040: 1 successors, 0 preds
  BB_127755174528288: 1 successors, 2 preds
  BB_127755174074784: 1 successors, 0 preds
  BB_127755174074880: 1 successors, 1 preds
  Total blocks with successors: 46
  Total blocks with multiple successors: 0
Initial CFG constructed with 49 basic blocks.
DEBUG: Found 2 entry points
  - square: BB_127755173566016
  - global: BB_127755173565824
CFG graph saved to cfg_initial.dot

--- OPTIMIZATION: Attempting Loop Strip Mining ---

--- Starting Strip Mining Pass (Strip Size: 4) ---
DEBUG: Starting loop detection...
DEBUG: Starting simple back edge detection...
DEBUG: Found potential back edge: BB_127755173894704 -> BB_127755173894080 (header with 2 preds)
DEBUG: Found potential back edge: BB_127755173555216 -> BB_127755173552480 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173555216 (idx 7) -> BB_127755173552480 (idx 5)
DEBUG: Found potential back edge: BB_127755173554832 -> BB_127755173554640 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173554832 (idx 10) -> BB_127755173554640 (idx 9)
DEBUG: Found back edge by position: BB_127755173529104 (idx 14) -> BB_127755173552384 (idx 13)
DEBUG: Found potential back edge: BB_127755173531360 -> BB_127755173552528 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173531360 (idx 15) -> BB_127755173552528 (idx 12)
DEBUG: Found potential back edge: BB_127755173529200 -> BB_127755173531600 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173529200 (idx 18) -> BB_127755173531600 (idx 17)
DEBUG: Found potential back edge: BB_127755173528864 -> BB_127755173529248 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173528864 (idx 21) -> BB_127755173529248 (idx 20)
DEBUG: Found potential back edge: BB_127755173509536 -> BB_127755173509440 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173509536 (idx 24) -> BB_127755173509440 (idx 23)
DEBUG: Found potential back edge: BB_127755173509152 -> BB_127755173509584 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173509152 (idx 27) -> BB_127755173509584 (idx 26)
DEBUG: Found potential back edge: BB_127755174039216 -> BB_127755174039120 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174039216 (idx 30) -> BB_127755174039120 (idx 29)
DEBUG: Found potential back edge: BB_127755174038640 -> BB_127755174039264 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174038640 (idx 33) -> BB_127755174039264 (idx 32)
DEBUG: Found potential back edge: BB_127755174036480 -> BB_127755174038880 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174036480 (idx 36) -> BB_127755174038880 (idx 35)
DEBUG: Found potential back edge: BB_127755174036144 -> BB_127755174036528 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174036144 (idx 39) -> BB_127755174036528 (idx 38)
DEBUG: Found potential back edge: BB_127755174527040 -> BB_127755174530496 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174527040 (idx 42) -> BB_127755174530496 (idx 41)
DEBUG: Found potential back edge: BB_127755174074784 -> BB_127755174528288 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174074784 (idx 45) -> BB_127755174528288 (idx 44)
DEBUG: Found potential back edge: BB_127755174074880 -> BB_127755173566880 (header with 2 preds)
DEBUG: Found 16 back edges using simple detection
DEBUG: Created simple loop with header BB_127755173894080
DEBUG: Created simple loop with header BB_127755173552480
DEBUG: Created simple loop with header BB_127755173554640
DEBUG: Created simple loop with header BB_127755173552384
DEBUG: Created simple loop with header BB_127755173552528
DEBUG: Created simple loop with header BB_127755173531600
DEBUG: Created simple loop with header BB_127755173529248
DEBUG: Created simple loop with header BB_127755173509440
DEBUG: Created simple loop with header BB_127755173509584
DEBUG: Created simple loop with header BB_127755174039120
DEBUG: Created simple loop with header BB_127755174039264
DEBUG: Created simple loop with header BB_127755174038880
DEBUG: Created simple loop with header BB_127755174036528
DEBUG: Created simple loop with header BB_127755174530496
DEBUG: Created simple loop with header BB_127755174528288
DEBUG: Created simple loop with header BB_127755173566880
   Loop detection complete. Found 16 unique loop header(s).
   Detected 16 loop(s). Analyzing for strip mining...
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173894080...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755173894704.
           Latch instr: reg int t14 <- global int x; _g_x: def byte 4 type: <class 'ir.LoadStat'>
           Latch instr: print reg int t14 type: <class 'ir.PrintCommand'>
           Latch instr: branch  to auto label label1 type: <class 'ir.BranchStat'>
      STRIPMINE_DEBUG: Loop 127755173894080 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552480...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173555216.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173555216.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      STRIPMINE_DEBUG: Loop 127755173552480 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173554640...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173554832.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173554832.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      STRIPMINE_DEBUG: Loop 127755173554640 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552384...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173529104.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173529104.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      STRIPMINE_DEBUG: Loop 127755173552384 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552528...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755173531360.
           Latch instr: label8: <class 'ir.EmptyStat'> 127755174072432 {
parent = 127755174517872
} type: <class 'ir.EmptyStat'>
           Latch instr: branch  to auto label label9 type: <class 'ir.BranchStat'>
      STRIPMINE_DEBUG: Loop 127755173552528 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173531600...
            UNROLL_DEBUG: Found LCV 'a' as plus 1 (three-address) in latch 127755173529200.
            UNROLL_DEBUG: Found LCV 'a' with step 1 in latch 127755173529200.
            UNROLL_DEBUG: Using faked bounds for LCV 'a': start=10, end=20
      UNROLL_DEBUG: Loop header 127755173531600 (LCV 'a') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173529248...
            UNROLL_DEBUG: Found LCV 'i' as plus 1 (three-address) in latch 127755173528864.
            UNROLL_DEBUG: Found LCV 'i' with step 1 in latch 127755173528864.
            UNROLL_DEBUG: Using faked bounds for LCV 'i': start=0, end=10
      UNROLL_DEBUG: Loop header 127755173529248 (LCV 'i') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173509440...
            UNROLL_DEBUG: Found LCV 'j' as plus 1 (three-address) in latch 127755173509536.
            UNROLL_DEBUG: Found LCV 'j' with step 1 in latch 127755173509536.
            UNROLL_DEBUG: Using faked bounds for LCV 'j': start=0, end=5
      UNROLL_DEBUG: Loop header 127755173509440 (LCV 'j') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173509584...
            UNROLL_DEBUG: Found LCV 'k' as plus 1 (three-address) in latch 127755173509152.
            UNROLL_DEBUG: Found LCV 'k' with step 1 in latch 127755173509152.
            UNROLL_DEBUG: Using faked bounds for LCV 'k': start=0, end=3
      UNROLL_DEBUG: Loop header 127755173509584 (LCV 'k') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174039120...
            UNROLL_DEBUG: Found LCV 'm' as plus 1 (three-address) in latch 127755174039216.
            UNROLL_DEBUG: Found LCV 'm' with step 1 in latch 127755174039216.
            UNROLL_DEBUG: Using faked bounds for LCV 'm': start=1, end=6
      UNROLL_DEBUG: Loop header 127755174039120 (LCV 'm') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174039264...
            UNROLL_DEBUG: Found LCV 'n' as plus 1 (three-address) in latch 127755174038640.
            UNROLL_DEBUG: Found LCV 'n' with step 1 in latch 127755174038640.
            UNROLL_DEBUG: Using faked bounds for LCV 'n': start=1, end=7
      UNROLL_DEBUG: Loop header 127755174039264 (LCV 'n') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174038880...
            UNROLL_DEBUG: Found LCV 'p' as plus 1 (three-address) in latch 127755174036480.
            UNROLL_DEBUG: Found LCV 'p' with step 1 in latch 127755174036480.
            UNROLL_DEBUG: Using faked bounds for LCV 'p': start=10, end=12
         UNROLL_DEBUG: Reject - Trip count 3 unsuitable for factor 4.
      STRIPMINE_DEBUG: Loop 127755174038880 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174036528...
            UNROLL_DEBUG: Found LCV 'q' as plus 1 (three-address) in latch 127755174036144.
            UNROLL_DEBUG: Found LCV 'q' with step 1 in latch 127755174036144.
            UNROLL_DEBUG: Using faked bounds for LCV 'q': start=1, end=5
      UNROLL_DEBUG: Loop header 127755174036528 (LCV 'q') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174530496...
            UNROLL_DEBUG: Found LCV 'r' as plus 1 (three-address) in latch 127755174527040.
            UNROLL_DEBUG: Found LCV 'r' with step 1 in latch 127755174527040.
            UNROLL_DEBUG: Using faked bounds for LCV 'r': start=1, end=3
         UNROLL_DEBUG: Reject - Trip count 3 unsuitable for factor 4.
      STRIPMINE_DEBUG: Loop 127755174530496 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174528288...
            UNROLL_DEBUG: Found LCV 'sm_idx' as plus 1 (three-address) in latch 127755174074784.
            UNROLL_DEBUG: Found LCV 'sm_idx' with step 1 in latch 127755174074784.
            UNROLL_DEBUG: Using faked bounds for LCV 'sm_idx': start=0, end=127
      UNROLL_DEBUG: Loop header 127755174528288 (LCV 'sm_idx') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173566880...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755174074880.
           Latch instr: label40: <class 'ir.EmptyStat'> 127755173627024 {
parent = 127755174517872
} type: <class 'ir.EmptyStat'>
           Latch instr: reg int t239 <- 127 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int t240 <- 0 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int32_t t241 <- reg int t239 geq reg int t240 type: <class 'ir.BinStat'>
           Latch instr: branch on not reg int32_t t241 to auto label label41 type: <class 'ir.BranchStat'>
      STRIPMINE_DEBUG: Loop 127755173566880 not suitable by analysis.
   Found 8 suitable loop(s) for strip mining!
   STRIPMINE_PATCH: Loop over 'a' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'i' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'j' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'k' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'm' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'n' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'q' strip-mined with size 4!
   STRIPMINE_PATCH: Loop over 'sm_idx' strip-mined with size 4!
--- Strip Mining Pass Complete ---

--- CFG After Attempting Strip Mining ---
DEBUG: Found 2 entry points
  - square: BB_127755173566016
  - global: BB_127755173565824
CFG graph saved to cfg_after_strip_mining_attempt.dot

--- OPTIMIZATION: Attempting Loop Unrolling ---

--- Starting Loop Unrolling Pass (Factor: 2) ---
DEBUG: About to call debug_cfg_structure...

--- CFG Structure Debug ---
Total blocks: 49
Blocks with no predecessors: 18
Blocks with multiple successors: 0

*** Potential Back Edges ***
  POTENTIAL BACK EDGE: BB_127755173565824 -> BB_127755173895136 (target: auto label label2)
  POTENTIAL BACK EDGE: BB_127755173894704 -> BB_127755173894080 (target: auto label label1)
  POTENTIAL BACK EDGE: BB_127755173552480 -> BB_127755173555264 (target: auto label label4)
  POTENTIAL BACK EDGE: BB_127755173555216 -> BB_127755173552480 (target: auto label label3)
  POTENTIAL BACK EDGE: BB_127755173554640 -> BB_127755173554880 (target: auto label label6)
  POTENTIAL BACK EDGE: BB_127755173554832 -> BB_127755173554640 (target: auto label label5)
  POTENTIAL BACK EDGE: BB_127755173552528 -> BB_127755173531552 (target: auto label label10)
  POTENTIAL BACK EDGE: BB_127755173552384 -> BB_127755173531360 (target: auto label label8)
  POTENTIAL BACK EDGE: BB_127755173529104 -> BB_127755173552384 (target: auto label label7)
  POTENTIAL BACK EDGE: BB_127755173531360 -> BB_127755173552528 (target: auto label label9)
  POTENTIAL BACK EDGE: BB_127755173531600 -> BB_127755173528624 (target: auto label label13)
  POTENTIAL BACK EDGE: BB_127755173529200 -> BB_127755173531600 (target: auto label label11)
  POTENTIAL BACK EDGE: BB_127755173529248 -> BB_127755173528816 (target: auto label label16)
  POTENTIAL BACK EDGE: BB_127755173528864 -> BB_127755173529248 (target: auto label label14)
  POTENTIAL BACK EDGE: BB_127755173509440 -> BB_127755173508960 (target: auto label label19)
  POTENTIAL BACK EDGE: BB_127755173509536 -> BB_127755173509440 (target: auto label label17)
  POTENTIAL BACK EDGE: BB_127755173509584 -> BB_127755173509200 (target: auto label label22)
  POTENTIAL BACK EDGE: BB_127755173509152 -> BB_127755173509584 (target: auto label label20)
  POTENTIAL BACK EDGE: BB_127755174039120 -> BB_127755174036384 (target: auto label label25)
  POTENTIAL BACK EDGE: BB_127755174039216 -> BB_127755174039120 (target: auto label label23)
  POTENTIAL BACK EDGE: BB_127755174039264 -> BB_127755174038832 (target: auto label label28)
  POTENTIAL BACK EDGE: BB_127755174038640 -> BB_127755174039264 (target: auto label label26)
  POTENTIAL BACK EDGE: BB_127755174038880 -> BB_127755174035904 (target: auto label label31)
  POTENTIAL BACK EDGE: BB_127755174036480 -> BB_127755174038880 (target: auto label label29)
  POTENTIAL BACK EDGE: BB_127755174036528 -> BB_127755174036096 (target: auto label label34)
  POTENTIAL BACK EDGE: BB_127755174036144 -> BB_127755174036528 (target: auto label label32)
  POTENTIAL BACK EDGE: BB_127755174530496 -> BB_127755174529344 (target: auto label label37)
  POTENTIAL BACK EDGE: BB_127755174527040 -> BB_127755174530496 (target: auto label label35)
  POTENTIAL BACK EDGE: BB_127755174528288 -> BB_127755174074880 (target: auto label label40)
  POTENTIAL BACK EDGE: BB_127755174074784 -> BB_127755174528288 (target: auto label label38)
  POTENTIAL BACK EDGE: BB_127755174074880 -> BB_127755173566880 (target: auto label label41)
DEBUG: debug_cfg_structure completed
DEBUG: About to call _find_loops...
DEBUG: Starting loop detection...
DEBUG: Starting simple back edge detection...
DEBUG: Found potential back edge: BB_127755173894704 -> BB_127755173894080 (header with 2 preds)
DEBUG: Found potential back edge: BB_127755173555216 -> BB_127755173552480 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173555216 (idx 7) -> BB_127755173552480 (idx 5)
DEBUG: Found potential back edge: BB_127755173554832 -> BB_127755173554640 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173554832 (idx 10) -> BB_127755173554640 (idx 9)
DEBUG: Found back edge by position: BB_127755173529104 (idx 14) -> BB_127755173552384 (idx 13)
DEBUG: Found potential back edge: BB_127755173531360 -> BB_127755173552528 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173531360 (idx 15) -> BB_127755173552528 (idx 12)
DEBUG: Found potential back edge: BB_127755173529200 -> BB_127755173531600 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173529200 (idx 18) -> BB_127755173531600 (idx 17)
DEBUG: Found potential back edge: BB_127755173528864 -> BB_127755173529248 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173528864 (idx 21) -> BB_127755173529248 (idx 20)
DEBUG: Found potential back edge: BB_127755173509536 -> BB_127755173509440 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173509536 (idx 24) -> BB_127755173509440 (idx 23)
DEBUG: Found potential back edge: BB_127755173509152 -> BB_127755173509584 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755173509152 (idx 27) -> BB_127755173509584 (idx 26)
DEBUG: Found potential back edge: BB_127755174039216 -> BB_127755174039120 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174039216 (idx 30) -> BB_127755174039120 (idx 29)
DEBUG: Found potential back edge: BB_127755174038640 -> BB_127755174039264 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174038640 (idx 33) -> BB_127755174039264 (idx 32)
DEBUG: Found potential back edge: BB_127755174036480 -> BB_127755174038880 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174036480 (idx 36) -> BB_127755174038880 (idx 35)
DEBUG: Found potential back edge: BB_127755174036144 -> BB_127755174036528 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174036144 (idx 39) -> BB_127755174036528 (idx 38)
DEBUG: Found potential back edge: BB_127755174527040 -> BB_127755174530496 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174527040 (idx 42) -> BB_127755174530496 (idx 41)
DEBUG: Found potential back edge: BB_127755174074784 -> BB_127755174528288 (header with 2 preds)
DEBUG: Found back edge by position: BB_127755174074784 (idx 45) -> BB_127755174528288 (idx 44)
DEBUG: Found potential back edge: BB_127755174074880 -> BB_127755173566880 (header with 2 preds)
DEBUG: Found 16 back edges using simple detection
DEBUG: Created simple loop with header BB_127755173894080
DEBUG: Created simple loop with header BB_127755173552480
DEBUG: Created simple loop with header BB_127755173554640
DEBUG: Created simple loop with header BB_127755173552384
DEBUG: Created simple loop with header BB_127755173552528
DEBUG: Created simple loop with header BB_127755173531600
DEBUG: Created simple loop with header BB_127755173529248
DEBUG: Created simple loop with header BB_127755173509440
DEBUG: Created simple loop with header BB_127755173509584
DEBUG: Created simple loop with header BB_127755174039120
DEBUG: Created simple loop with header BB_127755174039264
DEBUG: Created simple loop with header BB_127755174038880
DEBUG: Created simple loop with header BB_127755174036528
DEBUG: Created simple loop with header BB_127755174530496
DEBUG: Created simple loop with header BB_127755174528288
DEBUG: Created simple loop with header BB_127755173566880
   Loop detection complete. Found 16 unique loop header(s).
DEBUG: _find_loops completed
   Detected 16 initial loop(s). Analyzing for unrolling...
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173894080...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755173894704.
           Latch instr: reg int t14 <- global int x; _g_x: def byte 4 type: <class 'ir.LoadStat'>
           Latch instr: print reg int t14 type: <class 'ir.PrintCommand'>
           Latch instr: branch  to auto label label1 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 127755173894080 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552480...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173555216.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173555216.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 127755173552480 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173554640...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173554832.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173554832.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 127755173554640 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552384...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 127755173529104.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 127755173529104.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 127755173552384 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173552528...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755173531360.
           Latch instr: label8: <class 'ir.EmptyStat'> 127755174072432 {
parent = 127755174517872
} type: <class 'ir.EmptyStat'>
           Latch instr: branch  to auto label label9 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 127755173552528 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173531600...
            UNROLL_DEBUG: Found LCV 'a' as plus 1 (three-address) in latch 127755173529200.
            UNROLL_DEBUG: Found LCV 'a' with step 1 in latch 127755173529200.
            UNROLL_DEBUG: Using faked bounds for LCV 'a': start=10, end=20
      UNROLL_DEBUG: Loop header 127755173531600 (LCV 'a') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173529248...
            UNROLL_DEBUG: Found LCV 'i' as plus 1 (three-address) in latch 127755173528864.
            UNROLL_DEBUG: Found LCV 'i' with step 1 in latch 127755173528864.
            UNROLL_DEBUG: Using faked bounds for LCV 'i': start=0, end=10
      UNROLL_DEBUG: Loop header 127755173529248 (LCV 'i') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173509440...
            UNROLL_DEBUG: Found LCV 'j' as plus 1 (three-address) in latch 127755173509536.
            UNROLL_DEBUG: Found LCV 'j' with step 1 in latch 127755173509536.
            UNROLL_DEBUG: Using faked bounds for LCV 'j': start=0, end=5
      UNROLL_DEBUG: Loop header 127755173509440 (LCV 'j') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173509584...
            UNROLL_DEBUG: Found LCV 'k' as plus 1 (three-address) in latch 127755173509152.
            UNROLL_DEBUG: Found LCV 'k' with step 1 in latch 127755173509152.
            UNROLL_DEBUG: Using faked bounds for LCV 'k': start=0, end=3
      UNROLL_DEBUG: Loop header 127755173509584 (LCV 'k') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174039120...
            UNROLL_DEBUG: Found LCV 'm' as plus 1 (three-address) in latch 127755174039216.
            UNROLL_DEBUG: Found LCV 'm' with step 1 in latch 127755174039216.
            UNROLL_DEBUG: Using faked bounds for LCV 'm': start=1, end=6
      UNROLL_DEBUG: Loop header 127755174039120 (LCV 'm') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174039264...
            UNROLL_DEBUG: Found LCV 'n' as plus 1 (three-address) in latch 127755174038640.
            UNROLL_DEBUG: Found LCV 'n' with step 1 in latch 127755174038640.
            UNROLL_DEBUG: Using faked bounds for LCV 'n': start=1, end=7
      UNROLL_DEBUG: Loop header 127755174039264 (LCV 'n') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174038880...
            UNROLL_DEBUG: Found LCV 'p' as plus 1 (three-address) in latch 127755174036480.
            UNROLL_DEBUG: Found LCV 'p' with step 1 in latch 127755174036480.
            UNROLL_DEBUG: Using faked bounds for LCV 'p': start=10, end=12
      UNROLL_DEBUG: Loop header 127755174038880 (LCV 'p') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174036528...
            UNROLL_DEBUG: Found LCV 'q' as plus 1 (three-address) in latch 127755174036144.
            UNROLL_DEBUG: Found LCV 'q' with step 1 in latch 127755174036144.
            UNROLL_DEBUG: Using faked bounds for LCV 'q': start=1, end=5
      UNROLL_DEBUG: Loop header 127755174036528 (LCV 'q') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174530496...
            UNROLL_DEBUG: Found LCV 'r' as plus 1 (three-address) in latch 127755174527040.
            UNROLL_DEBUG: Found LCV 'r' with step 1 in latch 127755174527040.
            UNROLL_DEBUG: Using faked bounds for LCV 'r': start=1, end=3
      UNROLL_DEBUG: Loop header 127755174530496 (LCV 'r') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755174528288...
            UNROLL_DEBUG: Found LCV 'sm_idx' as plus 1 (three-address) in latch 127755174074784.
            UNROLL_DEBUG: Found LCV 'sm_idx' with step 1 in latch 127755174074784.
            UNROLL_DEBUG: Using faked bounds for LCV 'sm_idx': start=0, end=127
      UNROLL_DEBUG: Loop header 127755174528288 (LCV 'sm_idx') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 127755173566880...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 127755174074880.
           Latch instr: label40: <class 'ir.EmptyStat'> 127755173627024 {
parent = 127755174517872
} type: <class 'ir.EmptyStat'>
           Latch instr: reg int t239 <- 127 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int t240 <- 0 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int32_t t241 <- reg int t239 geq reg int t240 type: <class 'ir.BinStat'>
           Latch instr: branch on not reg int32_t t241 to auto label label41 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 127755173566880 not suitable by analysis.
   Found 10 suitable loop(s) for unrolling!
   UNROLL_PATCH: Loop over 'm' has been unrolled by factor 2!
--- Loop Unrolling Pass Complete ---

--- CFG After Attempting Unrolling ---
DEBUG: Found 2 entry points
  - square: BB_127755173566016
  - global: BB_127755173565824
CFG graph saved to cfg_after_unrolling_attempt.dot

--- Performing Liveness Analysis (on potentially modified CFG) ---
--- Starting Liveness Analysis ---
Liveness converged in 4 iter.
--- Liveness Analysis Complete ---
DEBUG: Found 2 entry points
  - square: BB_127755173566016
  - global: BB_127755173565824
CFG graph saved to cfg_final_with_liveness.dot

--- Performing Register Allocation ---
LIVENESS INTERVALS:
[]

--- Register Allocation Map ---
vartoreg = {}

--- Generating Code ---

--- Generated Assembly Code ---
	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_y, 4
	.comm _g_squ, 4
	.comm _g_arr, 5
	.comm _g_multid, 50
	.comm _g_i, 4
	.comm _g_j, 4
	.comm _g_k, 4
	.comm _g_m, 4
	.comm _g_n, 4
	.comm _g_p, 4
	.comm _g_q, 4
	.comm _g_sum, 4
	.comm _g_r, 4
	.comm _g_sm_idx, 4
	.comm _g_sm_source_arr, 512
	.comm _g_sm_dest_arr, 512
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 127755174517872 type <class 'ir.StatList'>
	@ node 127755175676656 did not generate any code
	@ exc: KeyError(reg int t4)
	@ node 127755175677808 did not generate any code
	@ exc: KeyError(reg int t4)
	@ node 127755174518160 did not generate any code
	@ exc: KeyError(reg int t5)
	@ node 127755174518064 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 127755174514992 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 127755175753088 did not generate any code
	@ exc: KeyError(reg int t7)
	@ node 127755174518400 did not generate any code
	@ exc: KeyError(reg int t8)
	@ node 127755175752368 did not generate any code
	@ exc: KeyError(reg int t7)
	@ node 127755174666048 did not generate any code
	@ exc: KeyError(reg int32_t t9)
	@ node 127755175481552 did not generate any code
	@ exc: KeyError(reg int t14)
	@ node 127755175481840 did not generate any code
	@ exc: KeyError(reg int t14)
	b label1
label2:
	@ emptystat
	@ node 127755175752704 did not generate any code
	@ exc: KeyError(reg int t10)
	@ node 127755174518736 did not generate any code
	@ exc: KeyError(reg int t10)
	@ node 127755175429648 did not generate any code
	@ exc: KeyError(reg int t12)
label1:
	@ emptystat
	@ node 127755174664896 did not generate any code
	@ exc: KeyError(reg int t15)
	@ node 127755174523568 did not generate any code
	@ exc: KeyError(reg int t15)
label3:
	@ emptystat
	@ node 127755174665088 did not generate any code
	@ exc: KeyError(reg int t16)
	@ node 127755174523712 did not generate any code
	@ exc: KeyError(reg int t17)
	@ node 127755174665232 did not generate any code
	@ exc: KeyError(reg int t16)
	@ node 127755174736224 did not generate any code
	@ exc: KeyError(reg int32_t t18)
	push {r0, r1, r2, r3}
	bl square
	pop {r0, r1, r2, r3}
	@ node 127755174665568 did not generate any code
	@ exc: KeyError(reg int t19)
	@ node 127755174524288 did not generate any code
	@ exc: KeyError(reg int t20)
	@ node 127755174738576 did not generate any code
	@ exc: KeyError(reg int t19)
	@ node 127755174524480 did not generate any code
	@ exc: KeyError(reg int32_t t21)
	@ node 127755174735936 did not generate any code
	@ exc: KeyError(reg int t23)
	@ node 127755174736032 did not generate any code
	@ exc: KeyError(reg int t23)
	b label3
label4:
	@ emptystat
	@ node 127755174736560 did not generate any code
	@ exc: KeyError(reg int t24)
	@ node 127755174524864 did not generate any code
	@ exc: KeyError(reg int t24)
label5:
	@ emptystat
	@ node 127755174736992 did not generate any code
	@ exc: KeyError(reg int t25)
	@ node 127755174525008 did not generate any code
	@ exc: KeyError(reg int t26)
	@ node 127755174737136 did not generate any code
	@ exc: KeyError(reg int t25)
	@ node 127755174162336 did not generate any code
	@ exc: KeyError(reg int32_t t27)
	@ node 127755174525824 did not generate any code
	@ exc: KeyError(reg int t33)
	@ node 127755174738528 did not generate any code
	@ exc: KeyError(reg int t28)
	@ node 127755174525488 did not generate any code
	@ exc: KeyError(reg int t29)
	@ node 127755174158496 did not generate any code
	@ exc: KeyError(reg int t28)
	@ node 127755174525632 did not generate any code
	@ exc: KeyError(reg int t31)
	@ node 127755174158688 did not generate any code
	@ exc: KeyError(reg int32_t t30)
	@ node 127755174158928 did not generate any code
	@ exc: KeyError(reg &char t34)
	@ node 127755174159120 did not generate any code
	@ exc: KeyError(reg &char t34)
	@ node 127755174159168 did not generate any code
	@ exc: KeyError(reg &char t35)
	@ node 127755174159408 did not generate any code
	@ exc: KeyError(reg int t36)
	@ node 127755174526064 did not generate any code
	@ exc: KeyError(reg int t37)
	@ node 127755174159744 did not generate any code
	@ exc: KeyError(reg int t36)
	@ node 127755174526208 did not generate any code
	@ exc: KeyError(reg int t39)
	@ node 127755174160416 did not generate any code
	@ exc: KeyError(reg int32_t t38)
	@ node 127755174161040 did not generate any code
	@ exc: KeyError(reg &char t46)
	@ node 127755174161280 did not generate any code
	@ exc: KeyError(reg &char t46)
	@ node 127755174161328 did not generate any code
	@ exc: KeyError(reg &char t47)
	@ node 127755174161472 did not generate any code
	@ exc: KeyError(reg char t45)
	@ node 127755174161712 did not generate any code
	@ exc: KeyError(reg int t48)
	@ node 127755174526688 did not generate any code
	@ exc: KeyError(reg int t49)
	@ node 127755174161904 did not generate any code
	@ exc: KeyError(reg int t48)
	@ node 127755174526880 did not generate any code
	@ exc: KeyError(reg int32_t t50)
	b label5
label6:
	@ emptystat
	@ node 127755174162384 did not generate any code
	@ exc: KeyError(reg int t51)
	@ node 127755174530160 did not generate any code
	@ exc: KeyError(reg int t51)
	@ node 127755174076816 did not generate any code
	@ exc: KeyError(reg int t52)
	@ node 127755174527088 did not generate any code
	@ exc: KeyError(reg int t52)
label9:
	@ emptystat
	@ node 127755174077008 did not generate any code
	@ exc: KeyError(reg int t53)
	@ node 127755174527184 did not generate any code
	@ exc: KeyError(reg int t54)
	@ node 127755174077152 did not generate any code
	@ exc: KeyError(reg int t53)
	@ node 127755174074064 did not generate any code
	@ exc: KeyError(reg int32_t t55)
label7:
	@ emptystat
	@ node 127755174527376 did not generate any code
	@ exc: KeyError(reg int t56)
	@ node 127755174527568 did not generate any code
	@ exc: KeyError(reg int t57)
	@ node 127755174077584 did not generate any code
	@ exc: KeyError(reg int t56)
	@ node 127755174073776 did not generate any code
	@ exc: KeyError(reg int32_t t58)
	@ node 127755174528576 did not generate any code
	@ exc: KeyError(reg int t66)
	@ node 127755174528672 did not generate any code
	@ exc: KeyError(reg int t67)
	@ node 127755174079408 did not generate any code
	@ exc: KeyError(reg int t66)
	@ node 127755174079696 did not generate any code
	@ exc: KeyError(reg &char t71)
	@ node 127755174079888 did not generate any code
	@ exc: KeyError(reg &char t71)
	@ node 127755174079936 did not generate any code
	@ exc: KeyError(reg &char t72)
	@ node 127755174077920 did not generate any code
	@ exc: KeyError(reg int t59)
	@ node 127755174528000 did not generate any code
	@ exc: KeyError(reg int t60)
	@ node 127755174078064 did not generate any code
	@ exc: KeyError(reg int t59)
	@ node 127755174528240 did not generate any code
	@ exc: KeyError(reg int t62)
	@ node 127755174528096 did not generate any code
	@ exc: KeyError(reg int t63)
	@ node 127755174078496 did not generate any code
	@ exc: KeyError(reg int t62)
	@ node 127755174078832 did not generate any code
	@ exc: KeyError(reg int32_t t61)
	@ node 127755174080128 did not generate any code
	@ exc: KeyError(reg &short t73)
	@ node 127755174080320 did not generate any code
	@ exc: KeyError(reg &short t73)
	@ node 127755174080368 did not generate any code
	@ exc: KeyError(reg &short t74)
	@ node 127755174072480 did not generate any code
	@ exc: KeyError(reg int t75)
	@ node 127755174529056 did not generate any code
	@ exc: KeyError(reg int t76)
	@ node 127755174072816 did not generate any code
	@ exc: KeyError(reg int t75)
	@ node 127755174529296 did not generate any code
	@ exc: KeyError(reg int t78)
	@ node 127755174529152 did not generate any code
	@ exc: KeyError(reg int t79)
	@ node 127755174073248 did not generate any code
	@ exc: KeyError(reg int t78)
	@ node 127755174079024 did not generate any code
	@ exc: KeyError(reg int32_t t77)
	@ node 127755174160224 did not generate any code
	@ exc: KeyError(reg &short t87)
	@ node 127755174736896 did not generate any code
	@ exc: KeyError(reg &short t87)
	@ node 127755174736848 did not generate any code
	@ exc: KeyError(reg &short t88)
	@ node 127755175430512 did not generate any code
	@ exc: KeyError(reg short t86)
	@ node 127755174526496 did not generate any code
	@ exc: KeyError(reg int t89)
	@ node 127755174152080 did not generate any code
	@ exc: KeyError(reg int t90)
	@ node 127755174524672 did not generate any code
	@ exc: KeyError(reg int t89)
	@ node 127755174151648 did not generate any code
	@ exc: KeyError(reg int32_t t91)
	@ node 127755174524192 did not generate any code
	@ exc: KeyError(reg int t92)
	@ node 127755174151024 did not generate any code
	@ exc: KeyError(reg int t93)
	@ node 127755174528720 did not generate any code
	@ exc: KeyError(reg int t92)
	@ node 127755174150352 did not generate any code
	@ exc: KeyError(reg int32_t t94)
	b label7
label8:
	@ emptystat
	b label9
label10:
	@ emptystat
	@ irnode 127755173855632 type <class 'ir.AssignStat'>
label11:
	@ emptystat
	@ node 127755174074304 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173855728 did not generate any code
	@ exc: KeyError(reg int t96)
	@ node 127755174074448 did not generate any code
	@ exc: KeyError(reg int t95)
	@ node 127755174075888 did not generate any code
	@ exc: KeyError(reg int32_t t97)
	@ node 127755174075264 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755174075552 did not generate any code
	@ exc: KeyError(reg int t102)
	@ node 127755173855776 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173855920 did not generate any code
	@ exc: KeyError(reg int t99)
	@ node 127755174074832 did not generate any code
	@ exc: KeyError(reg int t98)
	@ node 127755173856112 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label11
label13:
	@ emptystat
	@ node 127755174075744 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 127755173856304 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 127755174035616 did not generate any code
	@ exc: KeyError(reg int t105)
	@ node 127755174035712 did not generate any code
	@ exc: KeyError(reg int t105)
	@ irnode 127755173857072 type <class 'ir.AssignStat'>
label14:
	@ emptystat
	@ node 127755174035952 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173857168 did not generate any code
	@ exc: KeyError(reg int t107)
	@ node 127755174036048 did not generate any code
	@ exc: KeyError(reg int t106)
	@ node 127755174037488 did not generate any code
	@ exc: KeyError(reg int32_t t108)
	@ node 127755174036864 did not generate any code
	@ exc: KeyError(reg int t113)
	@ node 127755174037152 did not generate any code
	@ exc: KeyError(reg int t113)
	@ node 127755173857216 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173857360 did not generate any code
	@ exc: KeyError(reg int t110)
	@ node 127755174036432 did not generate any code
	@ exc: KeyError(reg int t109)
	@ node 127755173857552 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label14
label16:
	@ emptystat
	@ node 127755174037872 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 127755174037968 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 127755174038352 did not generate any code
	@ exc: KeyError(reg int t117)
	@ node 127755174038448 did not generate any code
	@ exc: KeyError(reg int t117)
	@ irnode 127755173858656 type <class 'ir.AssignStat'>
label17:
	@ emptystat
	@ node 127755174038688 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173858752 did not generate any code
	@ exc: KeyError(reg int t119)
	@ node 127755174038784 did not generate any code
	@ exc: KeyError(reg int t118)
	@ node 127755173507808 did not generate any code
	@ exc: KeyError(reg int32_t t120)
	@ node 127755173507376 did not generate any code
	@ exc: KeyError(reg int t125)
	@ node 127755173507472 did not generate any code
	@ exc: KeyError(reg int t125)
	@ node 127755173858800 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173858944 did not generate any code
	@ exc: KeyError(reg int t122)
	@ node 127755174039168 did not generate any code
	@ exc: KeyError(reg int t121)
	@ node 127755173859136 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label17
label19:
	@ emptystat
	@ node 127755173508192 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 127755173508288 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 127755173508672 did not generate any code
	@ exc: KeyError(reg int t129)
	@ node 127755173508768 did not generate any code
	@ exc: KeyError(reg int t129)
	@ irnode 127755173889120 type <class 'ir.AssignStat'>
label20:
	@ emptystat
	@ node 127755173509008 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173889216 did not generate any code
	@ exc: KeyError(reg int t131)
	@ node 127755173509104 did not generate any code
	@ exc: KeyError(reg int t130)
	@ node 127755173511024 did not generate any code
	@ exc: KeyError(reg int32_t t132)
	@ node 127755173509920 did not generate any code
	@ exc: KeyError(reg int t137)
	@ node 127755173510208 did not generate any code
	@ exc: KeyError(reg int t137)
	@ node 127755173510592 did not generate any code
	@ exc: KeyError(reg int t139)
	@ node 127755173510688 did not generate any code
	@ exc: KeyError(reg int t139)
	@ node 127755173889264 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173889408 did not generate any code
	@ exc: KeyError(reg int t134)
	@ node 127755173509488 did not generate any code
	@ exc: KeyError(reg int t133)
	@ node 127755173889600 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label20
label22:
	@ emptystat
	@ node 127755173527856 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 127755173527952 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 127755173528336 did not generate any code
	@ exc: KeyError(reg int t143)
	@ node 127755173528432 did not generate any code
	@ exc: KeyError(reg int t143)
	@ irnode 127755173890704 type <class 'ir.AssignStat'>
label23:
	@ emptystat
	@ node 127755173528672 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173890800 did not generate any code
	@ exc: KeyError(reg int t145)
	@ node 127755173528768 did not generate any code
	@ exc: KeyError(reg int t144)
	@ node 127755173530208 did not generate any code
	@ exc: KeyError(reg int32_t t146)
	@ node 127755173529584 did not generate any code
	@ exc: KeyError(reg int t151)
	@ node 127755173529872 did not generate any code
	@ exc: KeyError(reg int t151)
	@ node 127755173890848 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173890992 did not generate any code
	@ exc: KeyError(reg int t148)
	@ node 127755173529152 did not generate any code
	@ exc: KeyError(reg int t147)
	@ node 127755173891184 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label23
label25:
	@ emptystat
	@ node 127755173530592 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 127755173530688 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 127755173531072 did not generate any code
	@ exc: KeyError(reg int t155)
	@ node 127755173531168 did not generate any code
	@ exc: KeyError(reg int t155)
	@ irnode 127755173892304 type <class 'ir.AssignStat'>
label26:
	@ emptystat
	@ node 127755173531408 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173892400 did not generate any code
	@ exc: KeyError(reg int t157)
	@ node 127755173552240 did not generate any code
	@ exc: KeyError(reg int t156)
	@ node 127755173553488 did not generate any code
	@ exc: KeyError(reg int32_t t158)
	@ node 127755173552864 did not generate any code
	@ exc: KeyError(reg int t163)
	@ node 127755173553152 did not generate any code
	@ exc: KeyError(reg int t163)
	@ node 127755173891904 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173892592 did not generate any code
	@ exc: KeyError(reg int t160)
	@ node 127755173552432 did not generate any code
	@ exc: KeyError(reg int t159)
	@ node 127755173892784 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label26
label28:
	@ emptystat
	@ node 127755173553872 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 127755173553968 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 127755173554352 did not generate any code
	@ exc: KeyError(reg int t167)
	@ node 127755173554448 did not generate any code
	@ exc: KeyError(reg int t167)
	@ irnode 127755173893888 type <class 'ir.AssignStat'>
label29:
	@ emptystat
	@ node 127755173554688 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173893984 did not generate any code
	@ exc: KeyError(reg int t169)
	@ node 127755173554784 did not generate any code
	@ exc: KeyError(reg int t168)
	@ node 127755173556080 did not generate any code
	@ exc: KeyError(reg int32_t t170)
	@ node 127755173555600 did not generate any code
	@ exc: KeyError(reg int t175)
	@ node 127755173555888 did not generate any code
	@ exc: KeyError(reg int t175)
	@ node 127755173894032 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173894176 did not generate any code
	@ exc: KeyError(reg int t172)
	@ node 127755173555168 did not generate any code
	@ exc: KeyError(reg int t171)
	@ node 127755173894368 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label29
label31:
	@ emptystat
	@ node 127755173564864 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 127755173564960 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 127755173894560 did not generate any code
	@ exc: KeyError(reg int t178)
	@ node 127755173894752 did not generate any code
	@ exc: KeyError(reg int t178)
	@ node 127755173565536 did not generate any code
	@ exc: KeyError(reg int t180)
	@ node 127755173565632 did not generate any code
	@ exc: KeyError(reg int t180)
	@ irnode 127755173896048 type <class 'ir.AssignStat'>
label32:
	@ emptystat
	@ node 127755173565872 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173896144 did not generate any code
	@ exc: KeyError(reg int t182)
	@ node 127755173565968 did not generate any code
	@ exc: KeyError(reg int t181)
	@ node 127755173568416 did not generate any code
	@ exc: KeyError(reg int32_t t183)
	@ node 127755173566688 did not generate any code
	@ exc: KeyError(reg int t187)
	@ node 127755173895376 did not generate any code
	@ exc: KeyError(reg int t188)
	@ node 127755173566928 did not generate any code
	@ exc: KeyError(reg int t187)
	@ node 127755173895568 did not generate any code
	@ exc: KeyError(reg int32_t t189)
	@ node 127755173567504 did not generate any code
	@ exc: KeyError(reg int t191)
	@ node 127755173567600 did not generate any code
	@ exc: KeyError(reg int t191)
	@ node 127755173567984 did not generate any code
	@ exc: KeyError(reg int t193)
	@ node 127755173568080 did not generate any code
	@ exc: KeyError(reg int t193)
	@ node 127755173895184 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755173824640 did not generate any code
	@ exc: KeyError(reg int t185)
	@ node 127755173566352 did not generate any code
	@ exc: KeyError(reg int t184)
	@ node 127755173823968 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label32
label34:
	@ emptystat
	@ node 127755173581152 did not generate any code
	@ exc: KeyError(reg int t195)
	@ node 127755173581248 did not generate any code
	@ exc: KeyError(reg int t195)
	@ node 127755173581632 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 127755173581728 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 127755173826272 did not generate any code
	@ exc: KeyError(reg int t198)
	@ node 127755173826464 did not generate any code
	@ exc: KeyError(reg int t198)
	@ node 127755173582304 did not generate any code
	@ exc: KeyError(reg int t200)
	@ node 127755173582400 did not generate any code
	@ exc: KeyError(reg int t200)
	@ irnode 127755174454080 type <class 'ir.AssignStat'>
label35:
	@ emptystat
	@ node 127755173582640 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755174456144 did not generate any code
	@ exc: KeyError(reg int t202)
	@ node 127755173582736 did not generate any code
	@ exc: KeyError(reg int t201)
	@ node 127755173584704 did not generate any code
	@ exc: KeyError(reg int32_t t203)
	@ node 127755173583456 did not generate any code
	@ exc: KeyError(reg int t207)
	@ node 127755174453600 did not generate any code
	@ exc: KeyError(reg int t208)
	@ node 127755173583696 did not generate any code
	@ exc: KeyError(reg int t207)
	@ node 127755174453792 did not generate any code
	@ exc: KeyError(reg int32_t t209)
	@ node 127755173584272 did not generate any code
	@ exc: KeyError(reg int t211)
	@ node 127755173584368 did not generate any code
	@ exc: KeyError(reg int t211)
	@ node 127755174456096 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755174455904 did not generate any code
	@ exc: KeyError(reg int t205)
	@ node 127755173583120 did not generate any code
	@ exc: KeyError(reg int t204)
	@ node 127755174455712 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label35
label37:
	@ emptystat
	@ node 127755173605632 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 127755173605728 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 127755173606112 did not generate any code
	@ exc: KeyError(reg int t215)
	@ node 127755173606208 did not generate any code
	@ exc: KeyError(reg int t215)
	@ node 127755173606592 did not generate any code
	@ exc: KeyError(reg int t217)
	@ node 127755173606688 did not generate any code
	@ exc: KeyError(reg int t217)
	@ node 127755174455136 did not generate any code
	@ exc: KeyError(reg int t218)
	@ node 127755174454944 did not generate any code
	@ exc: KeyError(reg int t218)
	@ irnode 127755174516960 type <class 'ir.AssignStat'>
label38:
	@ emptystat
	@ node 127755173607072 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755174795824 did not generate any code
	@ exc: KeyError(reg int t220)
	@ node 127755173607264 did not generate any code
	@ exc: KeyError(reg int t219)
	@ node 127755173627264 did not generate any code
	@ exc: KeyError(reg int32_t t221)
	@ node 127755173608560 did not generate any code
	@ exc: KeyError(reg int t228)
	@ node 127755174454176 did not generate any code
	@ exc: KeyError(reg int t229)
	@ node 127755173609088 did not generate any code
	@ exc: KeyError(reg int t228)
	@ node 127755173609376 did not generate any code
	@ exc: KeyError(reg &int t233)
	@ node 127755173626016 did not generate any code
	@ exc: KeyError(reg &int t233)
	@ node 127755173626064 did not generate any code
	@ exc: KeyError(reg &int t234)
	@ node 127755174795440 did not generate any code
	@ exc: KeyError(reg int t235)
	@ node 127755173626208 did not generate any code
	@ exc: KeyError(reg int t232)
	@ node 127755173607984 did not generate any code
	@ exc: KeyError(reg int t225)
	@ node 127755174454464 did not generate any code
	@ exc: KeyError(reg int t226)
	@ node 127755173608224 did not generate any code
	@ exc: KeyError(reg int t225)
	@ node 127755173626592 did not generate any code
	@ exc: KeyError(reg &int t237)
	@ node 127755173626784 did not generate any code
	@ exc: KeyError(reg &int t237)
	@ node 127755173626832 did not generate any code
	@ exc: KeyError(reg &int t238)
	@ node 127755174454704 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 127755174796016 did not generate any code
	@ exc: KeyError(reg int t223)
	@ node 127755173607648 did not generate any code
	@ exc: KeyError(reg int t222)
	@ node 127755174796208 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label38
label40:
	@ emptystat
	@ node 127755173627216 did not generate any code
	@ exc: KeyError(reg int t239)
	@ node 127755174796400 did not generate any code
	@ exc: KeyError(reg int t240)
	@ node 127755173627504 did not generate any code
	@ exc: KeyError(reg int t239)
	@ node 127755173655120 did not generate any code
	@ exc: KeyError(reg int32_t t241)
	@ node 127755173628080 did not generate any code
	@ exc: KeyError(reg int t243)
	@ node 127755173628176 did not generate any code
	@ exc: KeyError(reg int t243)
	@ node 127755173628416 did not generate any code
	@ exc: KeyError(reg int t244)
	@ node 127755174796976 did not generate any code
	@ exc: KeyError(reg int t245)
	@ node 127755173628992 did not generate any code
	@ exc: KeyError(reg int t244)
	@ node 127755173629760 did not generate any code
	@ exc: KeyError(reg &int t252)
	@ node 127755173629904 did not generate any code
	@ exc: KeyError(reg &int t252)
	@ node 127755173630016 did not generate any code
	@ exc: KeyError(reg &int t253)
	@ node 127755173630160 did not generate any code
	@ exc: KeyError(reg int t251)
	@ node 127755173630448 did not generate any code
	@ exc: KeyError(reg int t254)
	@ node 127755174795056 did not generate any code
	@ exc: KeyError(reg int t255)
	@ node 127755173631120 did not generate any code
	@ exc: KeyError(reg int t254)
	@ node 127755173630400 did not generate any code
	@ exc: KeyError(reg &int t262)
	@ node 127755173632032 did not generate any code
	@ exc: KeyError(reg &int t262)
	@ node 127755173632080 did not generate any code
	@ exc: KeyError(reg &int t263)
	@ node 127755173632224 did not generate any code
	@ exc: KeyError(reg int t261)
	@ node 127755173632464 did not generate any code
	@ exc: KeyError(reg int t264)
	@ node 127755174794576 did not generate any code
	@ exc: KeyError(reg int t265)
	@ node 127755173633136 did not generate any code
	@ exc: KeyError(reg int t264)
	@ node 127755173632416 did not generate any code
	@ exc: KeyError(reg &int t272)
	@ node 127755173654592 did not generate any code
	@ exc: KeyError(reg &int t272)
	@ node 127755173654640 did not generate any code
	@ exc: KeyError(reg &int t273)
	@ node 127755173654784 did not generate any code
	@ exc: KeyError(reg int t271)
label41:
	@ emptystat
	@ node 127755173655456 did not generate any code
	@ exc: KeyError(reg int t275)
	@ node 127755173655552 did not generate any code
	@ exc: KeyError(reg int t275)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

square:
@ block
	.equ _l_square_test, -4
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #4
	@ irnode 127755174517200 type <class 'ir.StatList'>
	@ node 127755175745328 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 127755174517392 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 127755175745856 did not generate any code
	@ exc: KeyError(reg int t1)
	@ node 127755174517536 did not generate any code
	@ exc: KeyError(reg int t2)
	@ node 127755175741376 did not generate any code
	@ exc: KeyError(reg int t1)
	@ node 127755174517680 did not generate any code
	@ exc: KeyError(reg int32_t t3)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

--- Compilation Complete ---
