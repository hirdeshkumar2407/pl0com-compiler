['main.py']
start <function Parser.program at 0x7837a5ebfb80>
getsym: varsym var
start <function Parser.block at 0x7837a5ebf820>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident y
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident squ
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident arr
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident char
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident multid
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident short
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident i
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident j
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident k
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident m
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident n
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident p
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident q
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident sum
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == comma
getsym: ident r
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: procsym procedure
accepting constsym == procsym
accepting varsym == procsym
accepting procsym == procsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
start <function Parser.block at 0x7837a5ebf820>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident test
start <function Parser.vardef at 0x7837a5ebfa60>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7837a5ebfa60>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident test
StatList : new 132180401786160
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up test
Looking up test
expecting becomes
accepting becomes == becomes
getsym: number 1234
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401786592 of type <class 'ir.AssignStat'> to 132180401786160
accepting semicolon == semicolon
getsym: ident squ
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up squ
Looking up squ
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: times *
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
getsym: ident x
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401786496 of type <class 'ir.AssignStat'> to 132180401786160
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401786160 : [ 132180401786592 132180401786496 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.block at 0x7837a5ebf820>
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
Looking up square
accepting procsym == beginsym
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 132180401786832
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: minus -
start <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 1
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401795376 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: read read
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == read
accepting callsym == read
accepting beginsym == read
accepting ifsym == read
accepting whilesym == read
accepting forsym == read
accepting print == read
accepting read == read
getsym: ident x
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401795472 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: ident x
start <function Parser.condition at 0x7837a5ebf5e0>
accepting oddsym == ident
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: gtr >
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 100
condition operator gtr number
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.condition at 0x7837a5ebf5e0>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401795808
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: minus -
start <function Parser.expression at 0x7837a5ebf4c0>
getsym: ident x
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401796096 of type <class 'ir.PrintStat'> to 132180401795808
expecting endsym
accepting endsym == endsym
getsym: elsesym else
StatList 132180401795808 : [ 132180401796096 ]
end <function Parser.statement at 0x7837a5ebf700>
accepting elsesym == elsesym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401796192
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401796384 of type <class 'ir.PrintStat'> to 132180401796192
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401796192 : [ 132180401796384 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401796480 of type <class 'ir.IfStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401796624 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7837a5ebf5e0>
accepting oddsym == ident
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 10
condition operator leq number
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.condition at 0x7837a5ebf5e0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: callsym call
StatList : new 132180401796960
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == callsym
accepting callsym == callsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up square
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401797248 of type <class 'ir.CallStat'> to 132180401796960
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 1
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401797536 of type <class 'ir.AssignStat'> to 132180401796960
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident squ
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: endsym end
Looking up squ
Looking up squ
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401797680 of type <class 'ir.PrintStat'> to 132180401796960
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401796960 : [ 132180401797248 132180401797536 132180401797680 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401797776 of type <class 'ir.WhileStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 101
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401797920 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7837a5ebf5e0>
accepting oddsym == ident
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 105
condition operator leq number
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.condition at 0x7837a5ebf5e0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident arr
StatList : new 132180401798256
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 100
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401798976 of type <class 'ir.AssignStat'> to 132180401798256
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident arr
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 100
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401799616 of type <class 'ir.PrintStat'> to 132180401798256
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 1
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401800048 of type <class 'ir.AssignStat'> to 132180401798256
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401798256 : [ 132180401798976 132180401799616 132180401800048 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401800096 of type <class 'ir.WhileStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401800240 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401800384 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7837a5ebf5e0>
accepting oddsym == ident
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.condition at 0x7837a5ebf5e0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: whilesym while
StatList : new 132180401800672
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident y
start <function Parser.condition at 0x7837a5ebf5e0>
accepting oddsym == ident
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: leq <=
Looking up y
Looking up y
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.condition at 0x7837a5ebf5e0>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident multid
StatList : new 132180401801056
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident arr
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401802160 of type <class 'ir.AssignStat'> to 132180401801056
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident multid
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401802928 of type <class 'ir.PrintStat'> to 132180401801056
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 1
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401942688 of type <class 'ir.AssignStat'> to 132180401801056
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: ident y
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up y
Looking up y
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: number 1
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401943024 of type <class 'ir.AssignStat'> to 132180401801056
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 132180401801056 : [ 132180401802160 132180401802928 132180401942688 132180401943024 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401943072 of type <class 'ir.WhileStat'> to 132180401800672
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401800672 : [ 132180401943072 ]
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401943120 of type <class 'ir.WhileStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident a
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int a' and body_symtab for 'a'
FOR LOOP - Variable symbol: auto int a
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 20
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401943408
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident a
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up a
Looking up a
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401943648 of type <class 'ir.PrintStat'> to 132180401943408
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401943408 : [ 132180401943648 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401944320 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident i
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up i
Looking up i
expecting becomes
accepting becomes == becomes
getsym: number 10
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401944464 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99991
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401944560 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int i' and body_symtab for 'i'
FOR LOOP - Variable symbol: auto int i
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 15
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401944896
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident i
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up i
Looking up i
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401945088 of type <class 'ir.PrintStat'> to 132180401944896
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401944896 : [ 132180401945088 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401945760 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88881
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401945904 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99992
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401946096 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident j
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int j' and body_symtab for 'j'
FOR LOOP - Variable symbol: auto int j
expecting becomes
accepting becomes == becomes
getsym: number 5
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401946432
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident j
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up j
Looking up j
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401914400 of type <class 'ir.PrintStat'> to 132180401946432
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401946432 : [ 132180401914400 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401915264 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88882
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401915312 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99993
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401915072 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident k
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int k' and body_symtab for 'k'
FOR LOOP - Variable symbol: auto int k
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401915744
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 77777
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401915936 of type <class 'ir.PrintStat'> to 132180401915744
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident k
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up k
Looking up k
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401916128 of type <class 'ir.PrintStat'> to 132180401915744
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401915744 : [ 132180401915936 132180401916128 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401916848 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88883
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401916992 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99994
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401917184 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident m
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int m' and body_symtab for 'm'
FOR LOOP - Variable symbol: auto int m
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 6
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401917760
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident m
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up m
Looking up m
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401917664 of type <class 'ir.PrintStat'> to 132180401917760
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401917760 : [ 132180401917664 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401812576 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88884
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401812288 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99995
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401812528 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident n
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int n' and body_symtab for 'n'
FOR LOOP - Variable symbol: auto int n
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 7
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401811856
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident n
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up n
Looking up n
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401812720 of type <class 'ir.PrintStat'> to 132180401811856
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401811856 : [ 132180401812720 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401813392 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88885
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401813536 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99996
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401813728 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident p
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int p' and body_symtab for 'p'
FOR LOOP - Variable symbol: auto int p
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 12
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 132180401814064
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident p
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up p
Looking up p
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401814256 of type <class 'ir.PrintStat'> to 132180401814064
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401814064 : [ 132180401814256 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401781920 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88886
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401782064 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident sum
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401782256 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99997
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401782352 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident q
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int q' and body_symtab for 'q'
FOR LOOP - Variable symbol: auto int q
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident sum
StatList : new 132180401782688
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: ident sum
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up sum
Looking up sum
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: ident q
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401781200 of type <class 'ir.AssignStat'> to 132180401782688
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident q
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401780960 of type <class 'ir.PrintStat'> to 132180401782688
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401780672 of type <class 'ir.PrintStat'> to 132180401782688
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401782688 : [ 132180401781200 132180401780960 132180401780672 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401780000 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401779856 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88887
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401779664 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 100
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401779472 of type <class 'ir.AssignStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99998
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180401779328 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident r
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int r' and body_symtab for 'r'
FOR LOOP - Variable symbol: auto int r
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 3
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 132180401778992
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
getsym: ident r
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up r
Looking up r
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180402208928 of type <class 'ir.AssignStat'> to 132180401778992
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180402209072 of type <class 'ir.PrintStat'> to 132180401778992
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 132180401778992 : [ 132180402208928 132180402209072 ]
end <function Parser.statement at 0x7837a5ebf700>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180402209552 of type <class 'ir.ForStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180402209936 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7837a5ebf700>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88888
start <function Parser.expression at 0x7837a5ebf4c0>
start <function Parser.term at 0x7837a5ebf3a0>
start <function Parser.factor at 0x7837a5ebf280>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7837a5ebf280>
end <function Parser.term at 0x7837a5ebf3a0>
end <function Parser.expression at 0x7837a5ebf4c0>
end <function Parser.statement at 0x7837a5ebf700>
StatList: appending 132180402210128 of type <class 'ir.PrintStat'> to 132180401786832
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: period .
StatList
end <function Parser.statement at 0x7837a5ebf700>
end <function Parser.block at 0x7837a5ebf820>
expecting period
accepting period == period
end <function Parser.program at 0x7837a5ebfb80>

 <class 'ir.Block'> 132180402210224 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 132180402449280 {
	parent = 132180402210224
		children:
		<class 'ir.FunctionDef'> 132180401784048 {
		parent = 132180402449280
			body: 	<class 'ir.Block'> 132180401786400 {
			parent = 132180401784048
				defs: 	<class 'ir.DefinitionList'> 132180401786016 {
				parent = 132180401786400
				}
				body: 	<class 'ir.StatList'> 132180401786160 {
				parent = 132180401786400
					children:
					<class 'ir.AssignStat'> 132180401786592 {
					parent = 132180401786160
						expr: 	<class 'ir.Const'> 132180401786304 {
						parent = 132180401786592
							value: 	1234
							symbol: 	None
						}
						offset: 	None
						symbol: 	auto int test
					}
					<class 'ir.AssignStat'> 132180401786496 {
					parent = 132180401786160
						expr: 	<class 'ir.BinExpr'> 132180401786784 {
						parent = 132180401786496
							children:
							'times'
							<class 'ir.Var'> 132180401786640 {
							parent = 132180401786784
								symbol: 	global int x
							}
							<class 'ir.Var'> 132180401786208 {
							parent = 132180401786784
								symbol: 	global int x
							}
						}
						offset: 	None
						symbol: 	global int squ
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				auto function square
				
			}
			symbol: 	auto function square
		}
	}
	body: 	<class 'ir.StatList'> 132180401786832 {
	parent = 132180402210224
		children:
		<class 'ir.AssignStat'> 132180401795376 {
		parent = 132180401786832
			expr: 	<class 'ir.UnExpr'> 132180401795280 {
			parent = 132180401795376
				children:
				'minus'
				<class 'ir.Const'> 132180401795184 {
				parent = 132180401795280
					value: 	1
					symbol: 	None
				}
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 132180401795472 {
		parent = 132180401786832
			expr: 	<class 'ir.ReadStat'> 132180401783664 {
			parent = 132180401795472
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.IfStat'> 132180401796480 {
		parent = 132180401786832
			thenpart: 	<class 'ir.StatList'> 132180401795808 {
			parent = 132180401796480
				children:
				<class 'ir.PrintStat'> 132180401796096 {
				parent = 132180401795808
					children:
					<class 'ir.UnExpr'> 132180401796000 {
					parent = 132180401796096
						children:
						'minus'
						<class 'ir.Var'> 132180401795904 {
						parent = 132180401796000
							symbol: 	global int x
						}
					}
					expr: 	<class 'ir.UnExpr'> 132180401796000 {
					parent = 132180401796096
						children:
						'minus'
						<class 'ir.Var'> 132180401795904 {
						parent = 132180401796000
							symbol: 	global int x
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 132180401795712 {
			parent = 132180401796480
				children:
				'gtr'
				<class 'ir.Var'> 132180401795520 {
				parent = 132180401795712
					symbol: 	global int x
				}
				<class 'ir.Const'> 132180401795616 {
				parent = 132180401795712
					value: 	100
					symbol: 	None
				}
			}
			elsepart: 	<class 'ir.StatList'> 132180401796192 {
			parent = 132180401796480
				children:
				<class 'ir.PrintStat'> 132180401796384 {
				parent = 132180401796192
					children:
					<class 'ir.Var'> 132180401796288 {
					parent = 132180401796384
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 132180401796288 {
					parent = 132180401796384
						symbol: 	global int x
					}
				}
			}
		}
		<class 'ir.AssignStat'> 132180401796624 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401796528 {
			parent = 132180401796624
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 132180401797776 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401796960 {
			parent = 132180401797776
				children:
				<class 'ir.CallStat'> 132180401797248 {
				parent = 132180401796960
					call: 	<class 'ir.CallExpr'> 132180401797056 {
					parent = 132180401797248
						symbol: 	auto function square
					}
				}
				<class 'ir.AssignStat'> 132180401797536 {
				parent = 132180401796960
					expr: 	<class 'ir.BinExpr'> 132180401797440 {
					parent = 132180401797536
						children:
						'plus'
						<class 'ir.Var'> 132180401797296 {
						parent = 132180401797440
							symbol: 	global int x
						}
						<class 'ir.Const'> 132180401797152 {
						parent = 132180401797440
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 132180401797680 {
				parent = 132180401796960
					children:
					<class 'ir.Var'> 132180401797584 {
					parent = 132180401797680
						symbol: 	global int squ
					}
					expr: 	<class 'ir.Var'> 132180401797584 {
					parent = 132180401797680
						symbol: 	global int squ
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 132180401796864 {
			parent = 132180401797776
				children:
				'leq'
				<class 'ir.Var'> 132180401796672 {
				parent = 132180401796864
					symbol: 	global int x
				}
				<class 'ir.Const'> 132180401796768 {
				parent = 132180401796864
					value: 	10
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 132180401797920 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401797824 {
			parent = 132180401797920
				value: 	101
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 132180401800096 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401798256 {
			parent = 132180401800096
				children:
				<class 'ir.AssignStat'> 132180401798976 {
				parent = 132180401798256
					expr: 	<class 'ir.Var'> 132180401798736 {
					parent = 132180401798976
						symbol: 	global int x
					}
					offset: 	<class 'ir.BinExpr'> 132180401798832 {
					parent = 132180401798976
						children:
						'times'
						<class 'ir.BinExpr'> 132180401798640 {
						parent = 132180401798832
							children:
							'minus'
							<class 'ir.Var'> 132180401798352 {
							parent = 132180401798640
								symbol: 	global int x
							}
							<class 'ir.Const'> 132180401798544 {
							parent = 132180401798640
								value: 	100
								symbol: 	None
							}
						}
						<class 'ir.Const'> 132180401798448 {
						parent = 132180401798832
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global char[5] arr
				}
				<class 'ir.PrintStat'> 132180401799616 {
				parent = 132180401798256
					children:
					<class 'ir.ArrayElement'> 132180401799376 {
					parent = 132180401799616
						children:
						<class 'ir.BinExpr'> 132180401799520 {
						parent = 132180401799376
							children:
							'times'
							<class 'ir.BinExpr'> 132180401799280 {
							parent = 132180401799520
								children:
								'minus'
								<class 'ir.Var'> 132180401784864 {
								parent = 132180401799280
									symbol: 	global int x
								}
								<class 'ir.Const'> 132180401799120 {
								parent = 132180401799280
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 132180401799024 {
							parent = 132180401799520
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 132180401799520 {
						parent = 132180401799376
							children:
							'times'
							<class 'ir.BinExpr'> 132180401799280 {
							parent = 132180401799520
								children:
								'minus'
								<class 'ir.Var'> 132180401784864 {
								parent = 132180401799280
									symbol: 	global int x
								}
								<class 'ir.Const'> 132180401799120 {
								parent = 132180401799280
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 132180401799024 {
							parent = 132180401799520
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
					expr: 	<class 'ir.ArrayElement'> 132180401799376 {
					parent = 132180401799616
						children:
						<class 'ir.BinExpr'> 132180401799520 {
						parent = 132180401799376
							children:
							'times'
							<class 'ir.BinExpr'> 132180401799280 {
							parent = 132180401799520
								children:
								'minus'
								<class 'ir.Var'> 132180401784864 {
								parent = 132180401799280
									symbol: 	global int x
								}
								<class 'ir.Const'> 132180401799120 {
								parent = 132180401799280
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 132180401799024 {
							parent = 132180401799520
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 132180401799520 {
						parent = 132180401799376
							children:
							'times'
							<class 'ir.BinExpr'> 132180401799280 {
							parent = 132180401799520
								children:
								'minus'
								<class 'ir.Var'> 132180401784864 {
								parent = 132180401799280
									symbol: 	global int x
								}
								<class 'ir.Const'> 132180401799120 {
								parent = 132180401799280
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 132180401799024 {
							parent = 132180401799520
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
				}
				<class 'ir.AssignStat'> 132180401800048 {
				parent = 132180401798256
					expr: 	<class 'ir.BinExpr'> 132180401799952 {
					parent = 132180401800048
						children:
						'plus'
						<class 'ir.Var'> 132180401799760 {
						parent = 132180401799952
							symbol: 	global int x
						}
						<class 'ir.Const'> 132180401799856 {
						parent = 132180401799952
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
					symbol: 	global int x
				}
			}
			cond: 	<class 'ir.BinExpr'> 132180401798160 {
			parent = 132180401800096
				children:
				'leq'
				<class 'ir.Var'> 132180401797968 {
				parent = 132180401798160
					symbol: 	global int x
				}
				<class 'ir.Const'> 132180401798064 {
				parent = 132180401798160
					value: 	105
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 132180401800240 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401800144 {
			parent = 132180401800240
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 132180401800384 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401800288 {
			parent = 132180401800384
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int y
		}
		<class 'ir.WhileStat'> 132180401943120 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401800672 {
			parent = 132180401943120
				children:
				<class 'ir.WhileStat'> 132180401943072 {
				parent = 132180401800672
					body: 	<class 'ir.StatList'> 132180401801056 {
					parent = 132180401943072
						children:
						<class 'ir.AssignStat'> 132180401802160 {
						parent = 132180401801056
							expr: 	<class 'ir.ArrayElement'> 132180401801968 {
							parent = 132180401802160
								children:
								<class 'ir.BinExpr'> 132180401802064 {
								parent = 132180401801968
									children:
									'times'
									<class 'ir.Var'> 132180401801392 {
									parent = 132180401802064
										symbol: 	global int x
									}
									<class 'ir.Const'> 132180401801872 {
									parent = 132180401802064
										value: 	1
										symbol: 	None
									}
								}
								offset: 	<class 'ir.BinExpr'> 132180401802064 {
								parent = 132180401801968
									children:
									'times'
									<class 'ir.Var'> 132180401801392 {
									parent = 132180401802064
										symbol: 	global int x
									}
									<class 'ir.Const'> 132180401801872 {
									parent = 132180401802064
										value: 	1
										symbol: 	None
									}
								}
								symbol: 	global char[5] arr
							}
							offset: 	<class 'ir.BinExpr'> 132180401801776 {
							parent = 132180401802160
								children:
								'plus'
								<class 'ir.BinExpr'> 132180401801488 {
								parent = 132180401801776
									children:
									'times'
									<class 'ir.Var'> 132180401801152 {
									parent = 132180401801488
										symbol: 	global int x
									}
									<class 'ir.Const'> 132180401801200 {
									parent = 132180401801488
										value: 	10
										symbol: 	None
									}
								}
								<class 'ir.BinExpr'> 132180401801680 {
								parent = 132180401801776
									children:
									'times'
									<class 'ir.Var'> 132180401801296 {
									parent = 132180401801680
										symbol: 	global int y
									}
									<class 'ir.Const'> 132180401801584 {
									parent = 132180401801680
										value: 	2
										symbol: 	None
									}
								}
							}
							symbol: 	global short[5, 5] multid
						}
						<class 'ir.PrintStat'> 132180401802928 {
						parent = 132180401801056
							children:
							<class 'ir.ArrayElement'> 132180401802496 {
							parent = 132180401802928
								children:
								<class 'ir.BinExpr'> 132180401802832 {
								parent = 132180401802496
									children:
									'plus'
									<class 'ir.BinExpr'> 132180401802400 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401785056 {
										parent = 132180401802400
											symbol: 	global int x
										}
										<class 'ir.Const'> 132180401802256 {
										parent = 132180401802400
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 132180401802736 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401802352 {
										parent = 132180401802736
											symbol: 	global int y
										}
										<class 'ir.Const'> 132180401802640 {
										parent = 132180401802736
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 132180401802832 {
								parent = 132180401802496
									children:
									'plus'
									<class 'ir.BinExpr'> 132180401802400 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401785056 {
										parent = 132180401802400
											symbol: 	global int x
										}
										<class 'ir.Const'> 132180401802256 {
										parent = 132180401802400
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 132180401802736 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401802352 {
										parent = 132180401802736
											symbol: 	global int y
										}
										<class 'ir.Const'> 132180401802640 {
										parent = 132180401802736
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
							expr: 	<class 'ir.ArrayElement'> 132180401802496 {
							parent = 132180401802928
								children:
								<class 'ir.BinExpr'> 132180401802832 {
								parent = 132180401802496
									children:
									'plus'
									<class 'ir.BinExpr'> 132180401802400 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401785056 {
										parent = 132180401802400
											symbol: 	global int x
										}
										<class 'ir.Const'> 132180401802256 {
										parent = 132180401802400
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 132180401802736 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401802352 {
										parent = 132180401802736
											symbol: 	global int y
										}
										<class 'ir.Const'> 132180401802640 {
										parent = 132180401802736
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 132180401802832 {
								parent = 132180401802496
									children:
									'plus'
									<class 'ir.BinExpr'> 132180401802400 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401785056 {
										parent = 132180401802400
											symbol: 	global int x
										}
										<class 'ir.Const'> 132180401802256 {
										parent = 132180401802400
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 132180401802736 {
									parent = 132180401802832
										children:
										'times'
										<class 'ir.Var'> 132180401802352 {
										parent = 132180401802736
											symbol: 	global int y
										}
										<class 'ir.Const'> 132180401802640 {
										parent = 132180401802736
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
						}
						<class 'ir.AssignStat'> 132180401942688 {
						parent = 132180401801056
							expr: 	<class 'ir.BinExpr'> 132180401942592 {
							parent = 132180401942688
								children:
								'plus'
								<class 'ir.Var'> 132180401803168 {
								parent = 132180401942592
									symbol: 	global int x
								}
								<class 'ir.Const'> 132180401803120 {
								parent = 132180401942592
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
							symbol: 	global int x
						}
						<class 'ir.AssignStat'> 132180401943024 {
						parent = 132180401801056
							expr: 	<class 'ir.BinExpr'> 132180401942928 {
							parent = 132180401943024
								children:
								'plus'
								<class 'ir.Var'> 132180401942736 {
								parent = 132180401942928
									symbol: 	global int y
								}
								<class 'ir.Const'> 132180401942832 {
								parent = 132180401942928
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
							symbol: 	global int y
						}
					}
					cond: 	<class 'ir.BinExpr'> 132180401800960 {
					parent = 132180401943072
						children:
						'leq'
						<class 'ir.Var'> 132180401800768 {
						parent = 132180401800960
							symbol: 	global int y
						}
						<class 'ir.Const'> 132180401800864 {
						parent = 132180401800960
							value: 	5
							symbol: 	None
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 132180401800576 {
			parent = 132180401943120
				children:
				'leq'
				<class 'ir.Var'> 132180401784528 {
				parent = 132180401800576
					symbol: 	global int x
				}
				<class 'ir.Const'> 132180401800480 {
				parent = 132180401800576
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.ForStat'> 132180401944320 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401943408 {
			parent = 132180401944320
				children:
				<class 'ir.PrintStat'> 132180401943648 {
				parent = 132180401943408
					children:
					<class 'ir.Var'> 132180401943552 {
					parent = 132180401943648
						symbol: 	auto int a
					}
					expr: 	<class 'ir.Var'> 132180401943552 {
					parent = 132180401943648
						symbol: 	auto int a
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401944272 {
			parent = 132180401944320
				expr: 	<class 'ir.BinExpr'> 132180401944080 {
				parent = 132180401944272
					children:
					'plus'
					<class 'ir.Var'> 132180401943696 {
					parent = 132180401944080
						symbol: 	auto int a
					}
					<class 'ir.Const'> 132180401943888 {
					parent = 132180401944080
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int a
			}
			cond: 	<class 'ir.BinExpr'> 132180401944224 {
			parent = 132180401944320
				children:
				'leq'
				<class 'ir.Var'> 132180401944032 {
				parent = 132180401944224
					symbol: 	auto int a
				}
				<class 'ir.Const'> 132180401943312 {
				parent = 132180401944224
					value: 	20
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 132180401944464 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401944368 {
			parent = 132180401944464
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int i
		}
		<class 'ir.PrintStat'> 132180401944560 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401785152 {
			parent = 132180401944560
				value: 	99991
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401785152 {
			parent = 132180401944560
				value: 	99991
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401945760 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401944896 {
			parent = 132180401945760
				children:
				<class 'ir.PrintStat'> 132180401945088 {
				parent = 132180401944896
					children:
					<class 'ir.Var'> 132180401944992 {
					parent = 132180401945088
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 132180401944992 {
					parent = 132180401945088
						symbol: 	global int i
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401945712 {
			parent = 132180401945760
				expr: 	<class 'ir.BinExpr'> 132180401945616 {
				parent = 132180401945712
					children:
					'plus'
					<class 'ir.Var'> 132180401945424 {
					parent = 132180401945616
						symbol: 	auto int i
					}
					<class 'ir.Const'> 132180401945520 {
					parent = 132180401945616
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int i
			}
			cond: 	<class 'ir.BinExpr'> 132180401945328 {
			parent = 132180401945760
				children:
				'leq'
				<class 'ir.Var'> 132180401945232 {
				parent = 132180401945328
					symbol: 	auto int i
				}
				<class 'ir.Const'> 132180401944800 {
				parent = 132180401945328
					value: 	15
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401945904 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401945808 {
			parent = 132180401945904
				value: 	88881
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401945808 {
			parent = 132180401945904
				value: 	88881
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 132180401946096 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401946000 {
			parent = 132180401946096
				value: 	99992
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401946000 {
			parent = 132180401946096
				value: 	99992
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401915264 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401946432 {
			parent = 132180401915264
				children:
				<class 'ir.PrintStat'> 132180401914400 {
				parent = 132180401946432
					children:
					<class 'ir.Var'> 132180401946528 {
					parent = 132180401914400
						symbol: 	global int j
					}
					expr: 	<class 'ir.Var'> 132180401946528 {
					parent = 132180401914400
						symbol: 	global int j
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401915120 {
			parent = 132180401915264
				expr: 	<class 'ir.BinExpr'> 132180401914928 {
				parent = 132180401915120
					children:
					'plus'
					<class 'ir.Var'> 132180401914736 {
					parent = 132180401914928
						symbol: 	auto int j
					}
					<class 'ir.Const'> 132180401914832 {
					parent = 132180401914928
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int j
			}
			cond: 	<class 'ir.BinExpr'> 132180401914640 {
			parent = 132180401915264
				children:
				'leq'
				<class 'ir.Var'> 132180401914544 {
				parent = 132180401914640
					symbol: 	auto int j
				}
				<class 'ir.Const'> 132180401946336 {
				parent = 132180401914640
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401915312 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401915360 {
			parent = 132180401915312
				value: 	88882
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401915360 {
			parent = 132180401915312
				value: 	88882
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 132180401915072 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401915456 {
			parent = 132180401915072
				value: 	99993
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401915456 {
			parent = 132180401915072
				value: 	99993
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401916848 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401915744 {
			parent = 132180401916848
				children:
				<class 'ir.PrintStat'> 132180401915936 {
				parent = 132180401915744
					children:
					<class 'ir.Const'> 132180401915840 {
					parent = 132180401915936
						value: 	77777
						symbol: 	None
					}
					expr: 	<class 'ir.Const'> 132180401915840 {
					parent = 132180401915936
						value: 	77777
						symbol: 	None
					}
				}
				<class 'ir.PrintStat'> 132180401916128 {
				parent = 132180401915744
					children:
					<class 'ir.Var'> 132180401916032 {
					parent = 132180401916128
						symbol: 	global int k
					}
					expr: 	<class 'ir.Var'> 132180401916032 {
					parent = 132180401916128
						symbol: 	global int k
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401916800 {
			parent = 132180401916848
				expr: 	<class 'ir.BinExpr'> 132180401916704 {
				parent = 132180401916800
					children:
					'plus'
					<class 'ir.Var'> 132180401916512 {
					parent = 132180401916704
						symbol: 	auto int k
					}
					<class 'ir.Const'> 132180401916608 {
					parent = 132180401916704
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int k
			}
			cond: 	<class 'ir.BinExpr'> 132180401916416 {
			parent = 132180401916848
				children:
				'leq'
				<class 'ir.Var'> 132180401916320 {
				parent = 132180401916416
					symbol: 	auto int k
				}
				<class 'ir.Const'> 132180401915648 {
				parent = 132180401916416
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401916992 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401916896 {
			parent = 132180401916992
				value: 	88883
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401916896 {
			parent = 132180401916992
				value: 	88883
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 132180401917184 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401917088 {
			parent = 132180401917184
				value: 	99994
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401917088 {
			parent = 132180401917184
				value: 	99994
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401812576 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401917760 {
			parent = 132180401812576
				children:
				<class 'ir.PrintStat'> 132180401917664 {
				parent = 132180401917760
					children:
					<class 'ir.Var'> 132180401917424 {
					parent = 132180401917664
						symbol: 	global int m
					}
					expr: 	<class 'ir.Var'> 132180401917424 {
					parent = 132180401917664
						symbol: 	global int m
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401812240 {
			parent = 132180401812576
				expr: 	<class 'ir.BinExpr'> 132180401811904 {
				parent = 132180401812240
					children:
					'plus'
					<class 'ir.Var'> 132180401811568 {
					parent = 132180401811904
						symbol: 	auto int m
					}
					<class 'ir.Const'> 132180401811712 {
					parent = 132180401811904
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int m
			}
			cond: 	<class 'ir.BinExpr'> 132180401914352 {
			parent = 132180401812576
				children:
				'leq'
				<class 'ir.Var'> 132180401917856 {
				parent = 132180401914352
					symbol: 	auto int m
				}
				<class 'ir.Const'> 132180401917616 {
				parent = 132180401914352
					value: 	6
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401812288 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401812432 {
			parent = 132180401812288
				value: 	88884
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401812432 {
			parent = 132180401812288
				value: 	88884
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 132180401812528 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401812384 {
			parent = 132180401812528
				value: 	99995
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401812384 {
			parent = 132180401812528
				value: 	99995
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401813392 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401811856 {
			parent = 132180401813392
				children:
				<class 'ir.PrintStat'> 132180401812720 {
				parent = 132180401811856
					children:
					<class 'ir.Var'> 132180401812048 {
					parent = 132180401812720
						symbol: 	global int n
					}
					expr: 	<class 'ir.Var'> 132180401812048 {
					parent = 132180401812720
						symbol: 	global int n
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401813344 {
			parent = 132180401813392
				expr: 	<class 'ir.BinExpr'> 132180401813152 {
				parent = 132180401813344
					children:
					'plus'
					<class 'ir.Var'> 132180401812816 {
					parent = 132180401813152
						symbol: 	auto int n
					}
					<class 'ir.Const'> 132180401813008 {
					parent = 132180401813152
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int n
			}
			cond: 	<class 'ir.BinExpr'> 132180401813200 {
			parent = 132180401813392
				children:
				'leq'
				<class 'ir.Var'> 132180401812864 {
				parent = 132180401813200
					symbol: 	auto int n
				}
				<class 'ir.Const'> 132180401811616 {
				parent = 132180401813200
					value: 	7
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401813536 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401813440 {
			parent = 132180401813536
				value: 	88885
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401813440 {
			parent = 132180401813536
				value: 	88885
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 132180401813728 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401813632 {
			parent = 132180401813728
				value: 	99996
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401813632 {
			parent = 132180401813728
				value: 	99996
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401781920 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401814064 {
			parent = 132180401781920
				children:
				<class 'ir.PrintStat'> 132180401814256 {
				parent = 132180401814064
					children:
					<class 'ir.Var'> 132180401814160 {
					parent = 132180401814256
						symbol: 	global int p
					}
					expr: 	<class 'ir.Var'> 132180401814160 {
					parent = 132180401814256
						symbol: 	global int p
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401781872 {
			parent = 132180401781920
				expr: 	<class 'ir.BinExpr'> 132180401814496 {
				parent = 132180401781872
					children:
					'plus'
					<class 'ir.Var'> 132180401814976 {
					parent = 132180401814496
						symbol: 	auto int p
					}
					<class 'ir.Const'> 132180401814784 {
					parent = 132180401814496
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int p
			}
			cond: 	<class 'ir.BinExpr'> 132180401815072 {
			parent = 132180401781920
				children:
				'leq'
				<class 'ir.Var'> 132180401814400 {
				parent = 132180401815072
					symbol: 	auto int p
				}
				<class 'ir.Const'> 132180401813968 {
				parent = 132180401815072
					value: 	12
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401782064 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401781968 {
			parent = 132180401782064
				value: 	88886
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401781968 {
			parent = 132180401782064
				value: 	88886
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 132180401782256 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401782160 {
			parent = 132180401782256
				value: 	0
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int sum
		}
		<class 'ir.PrintStat'> 132180401782352 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401785824 {
			parent = 132180401782352
				value: 	99997
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401785824 {
			parent = 132180401782352
				value: 	99997
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180401780000 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401782688 {
			parent = 132180401780000
				children:
				<class 'ir.AssignStat'> 132180401781200 {
				parent = 132180401782688
					expr: 	<class 'ir.BinExpr'> 132180401781392 {
					parent = 132180401781200
						children:
						'plus'
						<class 'ir.Var'> 132180401781680 {
						parent = 132180401781392
							symbol: 	global int sum
						}
						<class 'ir.Var'> 132180401781488 {
						parent = 132180401781392
							symbol: 	global int q
						}
					}
					offset: 	None
					symbol: 	global int sum
				}
				<class 'ir.PrintStat'> 132180401780960 {
				parent = 132180401782688
					children:
					<class 'ir.Var'> 132180401781152 {
					parent = 132180401780960
						symbol: 	global int q
					}
					expr: 	<class 'ir.Var'> 132180401781152 {
					parent = 132180401780960
						symbol: 	global int q
					}
				}
				<class 'ir.PrintStat'> 132180401780672 {
				parent = 132180401782688
					children:
					<class 'ir.Var'> 132180401780864 {
					parent = 132180401780672
						symbol: 	global int sum
					}
					expr: 	<class 'ir.Var'> 132180401780864 {
					parent = 132180401780672
						symbol: 	global int sum
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180401780048 {
			parent = 132180401780000
				expr: 	<class 'ir.BinExpr'> 132180401780144 {
				parent = 132180401780048
					children:
					'plus'
					<class 'ir.Var'> 132180401780336 {
					parent = 132180401780144
						symbol: 	auto int q
					}
					<class 'ir.Const'> 132180401780240 {
					parent = 132180401780144
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int q
			}
			cond: 	<class 'ir.BinExpr'> 132180401780432 {
			parent = 132180401780000
				children:
				'leq'
				<class 'ir.Var'> 132180401780528 {
				parent = 132180401780432
					symbol: 	auto int q
				}
				<class 'ir.Const'> 132180401782592 {
				parent = 132180401780432
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180401779856 {
		parent = 132180401786832
			children:
			<class 'ir.Var'> 132180401779952 {
			parent = 132180401779856
				symbol: 	global int sum
			}
			expr: 	<class 'ir.Var'> 132180401779952 {
			parent = 132180401779856
				symbol: 	global int sum
			}
		}
		<class 'ir.PrintStat'> 132180401779664 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401779760 {
			parent = 132180401779664
				value: 	88887
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401779760 {
			parent = 132180401779664
				value: 	88887
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 132180401779472 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401779568 {
			parent = 132180401779472
				value: 	100
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.PrintStat'> 132180401779328 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180401779424 {
			parent = 132180401779328
				value: 	99998
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180401779424 {
			parent = 132180401779328
				value: 	99998
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 132180402209552 {
		parent = 132180401786832
			body: 	<class 'ir.StatList'> 132180401778992 {
			parent = 132180402209552
				children:
				<class 'ir.AssignStat'> 132180402208928 {
				parent = 132180401778992
					expr: 	<class 'ir.BinExpr'> 132180402208832 {
					parent = 132180402208928
						children:
						'plus'
						<class 'ir.Var'> 132180401778896 {
						parent = 132180402208832
							symbol: 	global int x
						}
						<class 'ir.Var'> 132180401778800 {
						parent = 132180402208832
							symbol: 	global int r
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 132180402209072 {
				parent = 132180401778992
					children:
					<class 'ir.Var'> 132180402208976 {
					parent = 132180402209072
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 132180402208976 {
					parent = 132180402209072
						symbol: 	global int x
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 132180402209600 {
			parent = 132180402209552
				expr: 	<class 'ir.BinExpr'> 132180402209744 {
				parent = 132180402209600
					children:
					'plus'
					<class 'ir.Var'> 132180402209504 {
					parent = 132180402209744
						symbol: 	auto int r
					}
					<class 'ir.Const'> 132180402209840 {
					parent = 132180402209744
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
				symbol: 	auto int r
			}
			cond: 	<class 'ir.BinExpr'> 132180402209312 {
			parent = 132180402209552
				children:
				'leq'
				<class 'ir.Var'> 132180402209216 {
				parent = 132180402209312
					symbol: 	auto int r
				}
				<class 'ir.Const'> 132180401779088 {
				parent = 132180402209312
					value: 	3
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 132180402209936 {
		parent = 132180401786832
			children:
			<class 'ir.Var'> 132180402209456 {
			parent = 132180402209936
				symbol: 	global int x
			}
			expr: 	<class 'ir.Var'> 132180402209456 {
			parent = 132180402209936
				symbol: 	global int x
			}
		}
		<class 'ir.PrintStat'> 132180402210128 {
		parent = 132180401786832
			children:
			<class 'ir.Const'> 132180402210032 {
			parent = 132180402210128
				value: 	88888
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 132180402210032 {
			parent = 132180402210128
				value: 	88888
				symbol: 	None
			}
		}
	}
	global_symtab: 	SymbolTable:
	
} 

navigating children of <class 'ir.DefinitionList'> 132180402449280 1
<class 'ir.DefinitionList'> 132180401786016
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 2
<class 'ir.Const'> 132180401786304
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786592
<class 'ir.AssignStat'> 132180401786592
navigating children of <class 'ir.BinExpr'> 132180401786784 3
<class 'ir.Var'> 132180401786640
<class 'ir.Var'> 132180401786208
<class 'ir.BinExpr'> 132180401786784
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786496
<class 'ir.AssignStat'> 132180401786496
<class 'ir.StatList'> 132180401786160
StatList 132180401786160 : [ 132180401786592 132180401786496 ]
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
<class 'ir.Block'> 132180401786400
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
<class 'ir.FunctionDef'> 132180401784048
<class 'ir.DefinitionList'> 132180402449280
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 40
navigating children of <class 'ir.UnExpr'> 132180401795280 2
<class 'ir.Const'> 132180401795184
<class 'ir.UnExpr'> 132180401795280
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795376
<class 'ir.AssignStat'> 132180401795376
<class 'ir.ReadStat'> 132180401783664
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795472
<class 'ir.AssignStat'> 132180401795472
navigating children of <class 'ir.StatList'> 132180401795808 1
navigating children of <class 'ir.PrintStat'> 132180401796096 1
navigating children of <class 'ir.UnExpr'> 132180401796000 2
<class 'ir.Var'> 132180401795904
<class 'ir.UnExpr'> 132180401796000
navigating children of <class 'ir.UnExpr'> 132180401796000 2
<class 'ir.Var'> 132180401795904
<class 'ir.UnExpr'> 132180401796000
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796096
<class 'ir.PrintStat'> 132180401796096
<class 'ir.StatList'> 132180401795808
StatList 132180401795808 : [ 132180401796096 ]
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.BinExpr'> 132180401795712 3
<class 'ir.Var'> 132180401795520
<class 'ir.Const'> 132180401795616
<class 'ir.BinExpr'> 132180401795712
successfully navigated attr  cond  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.StatList'> 132180401796192 1
navigating children of <class 'ir.PrintStat'> 132180401796384 1
<class 'ir.Var'> 132180401796288
<class 'ir.Var'> 132180401796288
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796384
<class 'ir.PrintStat'> 132180401796384
<class 'ir.StatList'> 132180401796192
StatList 132180401796192 : [ 132180401796384 ]
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 132180401796480
<class 'ir.IfStat'> 132180401796480
<class 'ir.Const'> 132180401796528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401796624
<class 'ir.AssignStat'> 132180401796624
navigating children of <class 'ir.StatList'> 132180401796960 3
<class 'ir.CallExpr'> 132180401797056
successfully navigated attr  call  of <class 'ir.CallStat'> 132180401797248
<class 'ir.CallStat'> 132180401797248
navigating children of <class 'ir.BinExpr'> 132180401797440 3
<class 'ir.Var'> 132180401797296
<class 'ir.Const'> 132180401797152
<class 'ir.BinExpr'> 132180401797440
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797536
<class 'ir.AssignStat'> 132180401797536
navigating children of <class 'ir.PrintStat'> 132180401797680 1
<class 'ir.Var'> 132180401797584
<class 'ir.Var'> 132180401797584
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401797680
<class 'ir.PrintStat'> 132180401797680
<class 'ir.StatList'> 132180401796960
StatList 132180401796960 : [ 132180401797248 132180401797536 132180401797680 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401797776
navigating children of <class 'ir.BinExpr'> 132180401796864 3
<class 'ir.Var'> 132180401796672
<class 'ir.Const'> 132180401796768
<class 'ir.BinExpr'> 132180401796864
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401797776
<class 'ir.WhileStat'> 132180401797776
<class 'ir.Const'> 132180401797824
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797920
<class 'ir.AssignStat'> 132180401797920
navigating children of <class 'ir.StatList'> 132180401798256 3
<class 'ir.Var'> 132180401798736
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.BinExpr'> 132180401798832 3
navigating children of <class 'ir.BinExpr'> 132180401798640 3
<class 'ir.Var'> 132180401798352
<class 'ir.Const'> 132180401798544
<class 'ir.BinExpr'> 132180401798640
<class 'ir.Const'> 132180401798448
<class 'ir.BinExpr'> 132180401798832
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401798976
<class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.PrintStat'> 132180401799616 1
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
<class 'ir.Var'> 132180401784864
<class 'ir.Const'> 132180401799120
<class 'ir.BinExpr'> 132180401799280
<class 'ir.Const'> 132180401799024
<class 'ir.BinExpr'> 132180401799520
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
<class 'ir.Var'> 132180401784864
<class 'ir.Const'> 132180401799120
<class 'ir.BinExpr'> 132180401799280
<class 'ir.Const'> 132180401799024
<class 'ir.BinExpr'> 132180401799520
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
<class 'ir.ArrayElement'> 132180401799376
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
<class 'ir.Var'> 132180401784864
<class 'ir.Const'> 132180401799120
<class 'ir.BinExpr'> 132180401799280
<class 'ir.Const'> 132180401799024
<class 'ir.BinExpr'> 132180401799520
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
<class 'ir.Var'> 132180401784864
<class 'ir.Const'> 132180401799120
<class 'ir.BinExpr'> 132180401799280
<class 'ir.Const'> 132180401799024
<class 'ir.BinExpr'> 132180401799520
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
<class 'ir.ArrayElement'> 132180401799376
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401799616
<class 'ir.PrintStat'> 132180401799616
navigating children of <class 'ir.BinExpr'> 132180401799952 3
<class 'ir.Var'> 132180401799760
<class 'ir.Const'> 132180401799856
<class 'ir.BinExpr'> 132180401799952
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800048
<class 'ir.AssignStat'> 132180401800048
<class 'ir.StatList'> 132180401798256
StatList 132180401798256 : [ 132180401798976 132180401799616 132180401800048 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401800096
navigating children of <class 'ir.BinExpr'> 132180401798160 3
<class 'ir.Var'> 132180401797968
<class 'ir.Const'> 132180401798064
<class 'ir.BinExpr'> 132180401798160
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401800096
<class 'ir.WhileStat'> 132180401800096
<class 'ir.Const'> 132180401800144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800240
<class 'ir.AssignStat'> 132180401800240
<class 'ir.Const'> 132180401800288
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800384
<class 'ir.AssignStat'> 132180401800384
navigating children of <class 'ir.StatList'> 132180401800672 1
navigating children of <class 'ir.StatList'> 132180401801056 4
navigating children of <class 'ir.ArrayElement'> 132180401801968 1
navigating children of <class 'ir.BinExpr'> 132180401802064 3
<class 'ir.Var'> 132180401801392
<class 'ir.Const'> 132180401801872
<class 'ir.BinExpr'> 132180401802064
navigating children of <class 'ir.BinExpr'> 132180401802064 3
<class 'ir.Var'> 132180401801392
<class 'ir.Const'> 132180401801872
<class 'ir.BinExpr'> 132180401802064
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401801968
<class 'ir.ArrayElement'> 132180401801968
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.BinExpr'> 132180401801776 3
navigating children of <class 'ir.BinExpr'> 132180401801488 3
<class 'ir.Var'> 132180401801152
<class 'ir.Const'> 132180401801200
<class 'ir.BinExpr'> 132180401801488
navigating children of <class 'ir.BinExpr'> 132180401801680 3
<class 'ir.Var'> 132180401801296
<class 'ir.Const'> 132180401801584
<class 'ir.BinExpr'> 132180401801680
<class 'ir.BinExpr'> 132180401801776
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401802160
<class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.PrintStat'> 132180401802928 1
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
<class 'ir.Var'> 132180401785056
<class 'ir.Const'> 132180401802256
<class 'ir.BinExpr'> 132180401802400
navigating children of <class 'ir.BinExpr'> 132180401802736 3
<class 'ir.Var'> 132180401802352
<class 'ir.Const'> 132180401802640
<class 'ir.BinExpr'> 132180401802736
<class 'ir.BinExpr'> 132180401802832
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
<class 'ir.Var'> 132180401785056
<class 'ir.Const'> 132180401802256
<class 'ir.BinExpr'> 132180401802400
navigating children of <class 'ir.BinExpr'> 132180401802736 3
<class 'ir.Var'> 132180401802352
<class 'ir.Const'> 132180401802640
<class 'ir.BinExpr'> 132180401802736
<class 'ir.BinExpr'> 132180401802832
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
<class 'ir.ArrayElement'> 132180401802496
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
<class 'ir.Var'> 132180401785056
<class 'ir.Const'> 132180401802256
<class 'ir.BinExpr'> 132180401802400
navigating children of <class 'ir.BinExpr'> 132180401802736 3
<class 'ir.Var'> 132180401802352
<class 'ir.Const'> 132180401802640
<class 'ir.BinExpr'> 132180401802736
<class 'ir.BinExpr'> 132180401802832
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
<class 'ir.Var'> 132180401785056
<class 'ir.Const'> 132180401802256
<class 'ir.BinExpr'> 132180401802400
navigating children of <class 'ir.BinExpr'> 132180401802736 3
<class 'ir.Var'> 132180401802352
<class 'ir.Const'> 132180401802640
<class 'ir.BinExpr'> 132180401802736
<class 'ir.BinExpr'> 132180401802832
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
<class 'ir.ArrayElement'> 132180401802496
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401802928
<class 'ir.PrintStat'> 132180401802928
navigating children of <class 'ir.BinExpr'> 132180401942592 3
<class 'ir.Var'> 132180401803168
<class 'ir.Const'> 132180401803120
<class 'ir.BinExpr'> 132180401942592
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401942688
<class 'ir.AssignStat'> 132180401942688
navigating children of <class 'ir.BinExpr'> 132180401942928 3
<class 'ir.Var'> 132180401942736
<class 'ir.Const'> 132180401942832
<class 'ir.BinExpr'> 132180401942928
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943024
<class 'ir.AssignStat'> 132180401943024
<class 'ir.StatList'> 132180401801056
StatList 132180401801056 : [ 132180401802160 132180401802928 132180401942688 132180401943024 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943072
navigating children of <class 'ir.BinExpr'> 132180401800960 3
<class 'ir.Var'> 132180401800768
<class 'ir.Const'> 132180401800864
<class 'ir.BinExpr'> 132180401800960
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943072
<class 'ir.WhileStat'> 132180401943072
<class 'ir.StatList'> 132180401800672
StatList 132180401800672 : [ 132180401943072 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.BinExpr'> 132180401800576 3
<class 'ir.Var'> 132180401784528
<class 'ir.Const'> 132180401800480
<class 'ir.BinExpr'> 132180401800576
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943120
<class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.StatList'> 132180401943408 1
navigating children of <class 'ir.PrintStat'> 132180401943648 1
<class 'ir.Var'> 132180401943552
<class 'ir.Var'> 132180401943552
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401943648
<class 'ir.PrintStat'> 132180401943648
<class 'ir.StatList'> 132180401943408
StatList 132180401943408 : [ 132180401943648 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944080 3
<class 'ir.Var'> 132180401943696
<class 'ir.Const'> 132180401943888
<class 'ir.BinExpr'> 132180401944080
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944272
<class 'ir.AssignStat'> 132180401944272
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944224 3
<class 'ir.Var'> 132180401944032
<class 'ir.Const'> 132180401943312
<class 'ir.BinExpr'> 132180401944224
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401944320
<class 'ir.ForStat'> 132180401944320
<class 'ir.Const'> 132180401944368
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944464
<class 'ir.AssignStat'> 132180401944464
navigating children of <class 'ir.PrintStat'> 132180401944560 1
<class 'ir.Const'> 132180401785152
<class 'ir.Const'> 132180401785152
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401944560
<class 'ir.PrintStat'> 132180401944560
navigating children of <class 'ir.StatList'> 132180401944896 1
navigating children of <class 'ir.PrintStat'> 132180401945088 1
<class 'ir.Var'> 132180401944992
<class 'ir.Var'> 132180401944992
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945088
<class 'ir.PrintStat'> 132180401945088
<class 'ir.StatList'> 132180401944896
StatList 132180401944896 : [ 132180401945088 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945616 3
<class 'ir.Var'> 132180401945424
<class 'ir.Const'> 132180401945520
<class 'ir.BinExpr'> 132180401945616
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945712
<class 'ir.AssignStat'> 132180401945712
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945328 3
<class 'ir.Var'> 132180401945232
<class 'ir.Const'> 132180401944800
<class 'ir.BinExpr'> 132180401945328
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401945760
<class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.PrintStat'> 132180401945904 1
<class 'ir.Const'> 132180401945808
<class 'ir.Const'> 132180401945808
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945904
<class 'ir.PrintStat'> 132180401945904
navigating children of <class 'ir.PrintStat'> 132180401946096 1
<class 'ir.Const'> 132180401946000
<class 'ir.Const'> 132180401946000
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401946096
<class 'ir.PrintStat'> 132180401946096
navigating children of <class 'ir.StatList'> 132180401946432 1
navigating children of <class 'ir.PrintStat'> 132180401914400 1
<class 'ir.Var'> 132180401946528
<class 'ir.Var'> 132180401946528
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401914400
<class 'ir.PrintStat'> 132180401914400
<class 'ir.StatList'> 132180401946432
StatList 132180401946432 : [ 132180401914400 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914928 3
<class 'ir.Var'> 132180401914736
<class 'ir.Const'> 132180401914832
<class 'ir.BinExpr'> 132180401914928
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401915120
<class 'ir.AssignStat'> 132180401915120
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914640 3
<class 'ir.Var'> 132180401914544
<class 'ir.Const'> 132180401946336
<class 'ir.BinExpr'> 132180401914640
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401915264
<class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.PrintStat'> 132180401915312 1
<class 'ir.Const'> 132180401915360
<class 'ir.Const'> 132180401915360
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915312
<class 'ir.PrintStat'> 132180401915312
navigating children of <class 'ir.PrintStat'> 132180401915072 1
<class 'ir.Const'> 132180401915456
<class 'ir.Const'> 132180401915456
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915072
<class 'ir.PrintStat'> 132180401915072
navigating children of <class 'ir.StatList'> 132180401915744 2
navigating children of <class 'ir.PrintStat'> 132180401915936 1
<class 'ir.Const'> 132180401915840
<class 'ir.Const'> 132180401915840
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915936
<class 'ir.PrintStat'> 132180401915936
navigating children of <class 'ir.PrintStat'> 132180401916128 1
<class 'ir.Var'> 132180401916032
<class 'ir.Var'> 132180401916032
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916128
<class 'ir.PrintStat'> 132180401916128
<class 'ir.StatList'> 132180401915744
StatList 132180401915744 : [ 132180401915936 132180401916128 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916704 3
<class 'ir.Var'> 132180401916512
<class 'ir.Const'> 132180401916608
<class 'ir.BinExpr'> 132180401916704
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916800
<class 'ir.AssignStat'> 132180401916800
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916416 3
<class 'ir.Var'> 132180401916320
<class 'ir.Const'> 132180401915648
<class 'ir.BinExpr'> 132180401916416
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401916848
<class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.PrintStat'> 132180401916992 1
<class 'ir.Const'> 132180401916896
<class 'ir.Const'> 132180401916896
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916992
<class 'ir.PrintStat'> 132180401916992
navigating children of <class 'ir.PrintStat'> 132180401917184 1
<class 'ir.Const'> 132180401917088
<class 'ir.Const'> 132180401917088
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917184
<class 'ir.PrintStat'> 132180401917184
navigating children of <class 'ir.StatList'> 132180401917760 1
navigating children of <class 'ir.PrintStat'> 132180401917664 1
<class 'ir.Var'> 132180401917424
<class 'ir.Var'> 132180401917424
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917664
<class 'ir.PrintStat'> 132180401917664
<class 'ir.StatList'> 132180401917760
StatList 132180401917760 : [ 132180401917664 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401811904 3
<class 'ir.Var'> 132180401811568
<class 'ir.Const'> 132180401811712
<class 'ir.BinExpr'> 132180401811904
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401812240
<class 'ir.AssignStat'> 132180401812240
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401914352 3
<class 'ir.Var'> 132180401917856
<class 'ir.Const'> 132180401917616
<class 'ir.BinExpr'> 132180401914352
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401812576
<class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.PrintStat'> 132180401812288 1
<class 'ir.Const'> 132180401812432
<class 'ir.Const'> 132180401812432
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812288
<class 'ir.PrintStat'> 132180401812288
navigating children of <class 'ir.PrintStat'> 132180401812528 1
<class 'ir.Const'> 132180401812384
<class 'ir.Const'> 132180401812384
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812528
<class 'ir.PrintStat'> 132180401812528
navigating children of <class 'ir.StatList'> 132180401811856 1
navigating children of <class 'ir.PrintStat'> 132180401812720 1
<class 'ir.Var'> 132180401812048
<class 'ir.Var'> 132180401812048
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812720
<class 'ir.PrintStat'> 132180401812720
<class 'ir.StatList'> 132180401811856
StatList 132180401811856 : [ 132180401812720 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813152 3
<class 'ir.Var'> 132180401812816
<class 'ir.Const'> 132180401813008
<class 'ir.BinExpr'> 132180401813152
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813344
<class 'ir.AssignStat'> 132180401813344
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813200 3
<class 'ir.Var'> 132180401812864
<class 'ir.Const'> 132180401811616
<class 'ir.BinExpr'> 132180401813200
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401813392
<class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.PrintStat'> 132180401813536 1
<class 'ir.Const'> 132180401813440
<class 'ir.Const'> 132180401813440
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813536
<class 'ir.PrintStat'> 132180401813536
navigating children of <class 'ir.PrintStat'> 132180401813728 1
<class 'ir.Const'> 132180401813632
<class 'ir.Const'> 132180401813632
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813728
<class 'ir.PrintStat'> 132180401813728
navigating children of <class 'ir.StatList'> 132180401814064 1
navigating children of <class 'ir.PrintStat'> 132180401814256 1
<class 'ir.Var'> 132180401814160
<class 'ir.Var'> 132180401814160
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401814256
<class 'ir.PrintStat'> 132180401814256
<class 'ir.StatList'> 132180401814064
StatList 132180401814064 : [ 132180401814256 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401814496 3
<class 'ir.Var'> 132180401814976
<class 'ir.Const'> 132180401814784
<class 'ir.BinExpr'> 132180401814496
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781872
<class 'ir.AssignStat'> 132180401781872
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401815072 3
<class 'ir.Var'> 132180401814400
<class 'ir.Const'> 132180401813968
<class 'ir.BinExpr'> 132180401815072
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401781920
<class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.PrintStat'> 132180401782064 1
<class 'ir.Const'> 132180401781968
<class 'ir.Const'> 132180401781968
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782064
<class 'ir.PrintStat'> 132180401782064
<class 'ir.Const'> 132180401782160
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401782256
<class 'ir.AssignStat'> 132180401782256
navigating children of <class 'ir.PrintStat'> 132180401782352 1
<class 'ir.Const'> 132180401785824
<class 'ir.Const'> 132180401785824
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782352
<class 'ir.PrintStat'> 132180401782352
navigating children of <class 'ir.StatList'> 132180401782688 3
navigating children of <class 'ir.BinExpr'> 132180401781392 3
<class 'ir.Var'> 132180401781680
<class 'ir.Var'> 132180401781488
<class 'ir.BinExpr'> 132180401781392
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781200
<class 'ir.AssignStat'> 132180401781200
navigating children of <class 'ir.PrintStat'> 132180401780960 1
<class 'ir.Var'> 132180401781152
<class 'ir.Var'> 132180401781152
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780960
<class 'ir.PrintStat'> 132180401780960
navigating children of <class 'ir.PrintStat'> 132180401780672 1
<class 'ir.Var'> 132180401780864
<class 'ir.Var'> 132180401780864
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780672
<class 'ir.PrintStat'> 132180401780672
<class 'ir.StatList'> 132180401782688
StatList 132180401782688 : [ 132180401781200 132180401780960 132180401780672 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780144 3
<class 'ir.Var'> 132180401780336
<class 'ir.Const'> 132180401780240
<class 'ir.BinExpr'> 132180401780144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780048
<class 'ir.AssignStat'> 132180401780048
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780432 3
<class 'ir.Var'> 132180401780528
<class 'ir.Const'> 132180401782592
<class 'ir.BinExpr'> 132180401780432
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401780000
<class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.PrintStat'> 132180401779856 1
<class 'ir.Var'> 132180401779952
<class 'ir.Var'> 132180401779952
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779856
<class 'ir.PrintStat'> 132180401779856
navigating children of <class 'ir.PrintStat'> 132180401779664 1
<class 'ir.Const'> 132180401779760
<class 'ir.Const'> 132180401779760
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779664
<class 'ir.PrintStat'> 132180401779664
<class 'ir.Const'> 132180401779568
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401779472
<class 'ir.AssignStat'> 132180401779472
navigating children of <class 'ir.PrintStat'> 132180401779328 1
<class 'ir.Const'> 132180401779424
<class 'ir.Const'> 132180401779424
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779328
<class 'ir.PrintStat'> 132180401779328
navigating children of <class 'ir.StatList'> 132180401778992 2
navigating children of <class 'ir.BinExpr'> 132180402208832 3
<class 'ir.Var'> 132180401778896
<class 'ir.Var'> 132180401778800
<class 'ir.BinExpr'> 132180402208832
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402208928
<class 'ir.AssignStat'> 132180402208928
navigating children of <class 'ir.PrintStat'> 132180402209072 1
<class 'ir.Var'> 132180402208976
<class 'ir.Var'> 132180402208976
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209072
<class 'ir.PrintStat'> 132180402209072
<class 'ir.StatList'> 132180401778992
StatList 132180401778992 : [ 132180402208928 132180402209072 ]
successfully navigated attr  body  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209744 3
<class 'ir.Var'> 132180402209504
<class 'ir.Const'> 132180402209840
<class 'ir.BinExpr'> 132180402209744
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209600
<class 'ir.AssignStat'> 132180402209600
successfully navigated attr  step  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209312 3
<class 'ir.Var'> 132180402209216
<class 'ir.Const'> 132180401779088
<class 'ir.BinExpr'> 132180402209312
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180402209552
<class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.PrintStat'> 132180402209936 1
<class 'ir.Var'> 132180402209456
<class 'ir.Var'> 132180402209456
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209936
<class 'ir.PrintStat'> 132180402209936
navigating children of <class 'ir.PrintStat'> 132180402210128 1
<class 'ir.Const'> 132180402210032
<class 'ir.Const'> 132180402210032
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402210128
<class 'ir.PrintStat'> 132180402210128
<class 'ir.StatList'> 132180401786832
StatList
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224
<class 'ir.Block'> 132180402210224
navigating children of <class 'ir.DefinitionList'> 132180402449280 1
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786592
navigating children of <class 'ir.BinExpr'> 132180401786784 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786496
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 40
navigating children of <class 'ir.UnExpr'> 132180401795280 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795376
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795472
navigating children of <class 'ir.StatList'> 132180401795808 1
navigating children of <class 'ir.PrintStat'> 132180401796096 1
navigating children of <class 'ir.UnExpr'> 132180401796000 2
navigating children of <class 'ir.UnExpr'> 132180401796000 2
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796096
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.BinExpr'> 132180401795712 3
successfully navigated attr  cond  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.StatList'> 132180401796192 1
navigating children of <class 'ir.PrintStat'> 132180401796384 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796384
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 132180401796480
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401796624
navigating children of <class 'ir.StatList'> 132180401796960 3
successfully navigated attr  call  of <class 'ir.CallStat'> 132180401797248
navigating children of <class 'ir.BinExpr'> 132180401797440 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797536
navigating children of <class 'ir.PrintStat'> 132180401797680 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401797680
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401797776
navigating children of <class 'ir.BinExpr'> 132180401796864 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401797776
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797920
navigating children of <class 'ir.StatList'> 132180401798256 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.BinExpr'> 132180401798832 3
navigating children of <class 'ir.BinExpr'> 132180401798640 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.PrintStat'> 132180401799616 1
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401799616
navigating children of <class 'ir.BinExpr'> 132180401799952 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800048
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401800096
navigating children of <class 'ir.BinExpr'> 132180401798160 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401800096
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800240
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800384
navigating children of <class 'ir.StatList'> 132180401800672 1
navigating children of <class 'ir.StatList'> 132180401801056 4
navigating children of <class 'ir.ArrayElement'> 132180401801968 1
navigating children of <class 'ir.BinExpr'> 132180401802064 3
navigating children of <class 'ir.BinExpr'> 132180401802064 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401801968
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.BinExpr'> 132180401801776 3
navigating children of <class 'ir.BinExpr'> 132180401801488 3
navigating children of <class 'ir.BinExpr'> 132180401801680 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.PrintStat'> 132180401802928 1
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
navigating children of <class 'ir.BinExpr'> 132180401802736 3
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
navigating children of <class 'ir.BinExpr'> 132180401802736 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
navigating children of <class 'ir.BinExpr'> 132180401802736 3
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
navigating children of <class 'ir.BinExpr'> 132180401802736 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401802928
navigating children of <class 'ir.BinExpr'> 132180401942592 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401942688
navigating children of <class 'ir.BinExpr'> 132180401942928 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943024
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943072
navigating children of <class 'ir.BinExpr'> 132180401800960 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943072
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.BinExpr'> 132180401800576 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.StatList'> 132180401943408 1
navigating children of <class 'ir.PrintStat'> 132180401943648 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401943648
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944080 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944272
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944224 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401944320
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944464
navigating children of <class 'ir.PrintStat'> 132180401944560 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401944560
navigating children of <class 'ir.StatList'> 132180401944896 1
navigating children of <class 'ir.PrintStat'> 132180401945088 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945088
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945616 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945712
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945328 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.PrintStat'> 132180401945904 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945904
navigating children of <class 'ir.PrintStat'> 132180401946096 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401946096
navigating children of <class 'ir.StatList'> 132180401946432 1
navigating children of <class 'ir.PrintStat'> 132180401914400 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401914400
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914928 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401915120
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914640 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.PrintStat'> 132180401915312 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915312
navigating children of <class 'ir.PrintStat'> 132180401915072 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915072
navigating children of <class 'ir.StatList'> 132180401915744 2
navigating children of <class 'ir.PrintStat'> 132180401915936 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915936
navigating children of <class 'ir.PrintStat'> 132180401916128 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916128
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916704 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916800
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916416 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.PrintStat'> 132180401916992 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916992
navigating children of <class 'ir.PrintStat'> 132180401917184 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917184
navigating children of <class 'ir.StatList'> 132180401917760 1
navigating children of <class 'ir.PrintStat'> 132180401917664 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917664
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401811904 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401812240
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401914352 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.PrintStat'> 132180401812288 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812288
navigating children of <class 'ir.PrintStat'> 132180401812528 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812528
navigating children of <class 'ir.StatList'> 132180401811856 1
navigating children of <class 'ir.PrintStat'> 132180401812720 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812720
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813152 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813344
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813200 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.PrintStat'> 132180401813536 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813536
navigating children of <class 'ir.PrintStat'> 132180401813728 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813728
navigating children of <class 'ir.StatList'> 132180401814064 1
navigating children of <class 'ir.PrintStat'> 132180401814256 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401814256
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401814496 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781872
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401815072 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.PrintStat'> 132180401782064 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782064
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401782256
navigating children of <class 'ir.PrintStat'> 132180401782352 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782352
navigating children of <class 'ir.StatList'> 132180401782688 3
navigating children of <class 'ir.BinExpr'> 132180401781392 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781200
navigating children of <class 'ir.PrintStat'> 132180401780960 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780960
navigating children of <class 'ir.PrintStat'> 132180401780672 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780672
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780144 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780048
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780432 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.PrintStat'> 132180401779856 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779856
navigating children of <class 'ir.PrintStat'> 132180401779664 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779664
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401779472
navigating children of <class 'ir.PrintStat'> 132180401779328 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779328
navigating children of <class 'ir.StatList'> 132180401778992 2
navigating children of <class 'ir.BinExpr'> 132180402208832 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402208928
navigating children of <class 'ir.PrintStat'> 132180402209072 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209072
successfully navigated attr  body  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209744 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209600
successfully navigated attr  step  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209312 3
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.PrintStat'> 132180402209936 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209936
navigating children of <class 'ir.PrintStat'> 132180402210128 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402210128
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224
<class 'ir.DefinitionList'> 132180401786016 -> <class 'ir.Block'> 132180401786400
<class 'ir.Const'> 132180401786304 -> <class 'ir.AssignStat'> 132180401786592
<class 'ir.AssignStat'> 132180401786592 -> <class 'ir.StatList'> 132180401786160
<class 'ir.Var'> 132180401786640 -> <class 'ir.BinExpr'> 132180401786784
<class 'ir.Var'> 132180401786208 -> <class 'ir.BinExpr'> 132180401786784
<class 'ir.BinExpr'> 132180401786784 -> <class 'ir.AssignStat'> 132180401786496
<class 'ir.AssignStat'> 132180401786496 -> <class 'ir.StatList'> 132180401786160
<class 'ir.StatList'> 132180401786160 -> <class 'ir.Block'> 132180401786400
<class 'ir.Block'> 132180401786400 -> <class 'ir.FunctionDef'> 132180401784048
<class 'ir.FunctionDef'> 132180401784048 -> <class 'ir.DefinitionList'> 132180402449280
<class 'ir.DefinitionList'> 132180402449280 -> <class 'ir.Block'> 132180402210224
<class 'ir.Const'> 132180401795184 -> <class 'ir.UnExpr'> 132180401795280
<class 'ir.UnExpr'> 132180401795280 -> <class 'ir.AssignStat'> 132180401795376
<class 'ir.AssignStat'> 132180401795376 -> <class 'ir.StatList'> 132180401786832
<class 'ir.ReadStat'> 132180401783664 -> <class 'ir.AssignStat'> 132180401795472
<class 'ir.AssignStat'> 132180401795472 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401795904 -> <class 'ir.UnExpr'> 132180401796000
<class 'ir.UnExpr'> 132180401796000 -> <class 'ir.PrintStat'> 132180401796096
<class 'ir.PrintStat'> 132180401796096 -> <class 'ir.StatList'> 132180401795808
<class 'ir.StatList'> 132180401795808 -> <class 'ir.IfStat'> 132180401796480
<class 'ir.Var'> 132180401795520 -> <class 'ir.BinExpr'> 132180401795712
<class 'ir.Const'> 132180401795616 -> <class 'ir.BinExpr'> 132180401795712
<class 'ir.BinExpr'> 132180401795712 -> <class 'ir.IfStat'> 132180401796480
<class 'ir.Var'> 132180401796288 -> <class 'ir.PrintStat'> 132180401796384
<class 'ir.PrintStat'> 132180401796384 -> <class 'ir.StatList'> 132180401796192
<class 'ir.StatList'> 132180401796192 -> <class 'ir.IfStat'> 132180401796480
<class 'ir.IfStat'> 132180401796480 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401796528 -> <class 'ir.AssignStat'> 132180401796624
<class 'ir.AssignStat'> 132180401796624 -> <class 'ir.StatList'> 132180401786832
<class 'ir.CallExpr'> 132180401797056 -> <class 'ir.CallStat'> 132180401797248
<class 'ir.CallStat'> 132180401797248 -> <class 'ir.StatList'> 132180401796960
<class 'ir.Var'> 132180401797296 -> <class 'ir.BinExpr'> 132180401797440
<class 'ir.Const'> 132180401797152 -> <class 'ir.BinExpr'> 132180401797440
<class 'ir.BinExpr'> 132180401797440 -> <class 'ir.AssignStat'> 132180401797536
<class 'ir.AssignStat'> 132180401797536 -> <class 'ir.StatList'> 132180401796960
<class 'ir.Var'> 132180401797584 -> <class 'ir.PrintStat'> 132180401797680
<class 'ir.PrintStat'> 132180401797680 -> <class 'ir.StatList'> 132180401796960
<class 'ir.StatList'> 132180401796960 -> <class 'ir.WhileStat'> 132180401797776
<class 'ir.Var'> 132180401796672 -> <class 'ir.BinExpr'> 132180401796864
<class 'ir.Const'> 132180401796768 -> <class 'ir.BinExpr'> 132180401796864
<class 'ir.BinExpr'> 132180401796864 -> <class 'ir.WhileStat'> 132180401797776
<class 'ir.WhileStat'> 132180401797776 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401797824 -> <class 'ir.AssignStat'> 132180401797920
<class 'ir.AssignStat'> 132180401797920 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401798736 -> <class 'ir.AssignStat'> 132180401798976
<class 'ir.Var'> 132180401798352 -> <class 'ir.BinExpr'> 132180401798640
<class 'ir.Const'> 132180401798544 -> <class 'ir.BinExpr'> 132180401798640
<class 'ir.BinExpr'> 132180401798640 -> <class 'ir.BinExpr'> 132180401798832
<class 'ir.Const'> 132180401798448 -> <class 'ir.BinExpr'> 132180401798832
<class 'ir.BinExpr'> 132180401798832 -> <class 'ir.AssignStat'> 132180401798976
<class 'ir.AssignStat'> 132180401798976 -> <class 'ir.StatList'> 132180401798256
<class 'ir.Var'> 132180401784864 -> <class 'ir.BinExpr'> 132180401799280
<class 'ir.Const'> 132180401799120 -> <class 'ir.BinExpr'> 132180401799280
<class 'ir.BinExpr'> 132180401799280 -> <class 'ir.BinExpr'> 132180401799520
<class 'ir.Const'> 132180401799024 -> <class 'ir.BinExpr'> 132180401799520
<class 'ir.BinExpr'> 132180401799520 -> <class 'ir.ArrayElement'> 132180401799376
<class 'ir.ArrayElement'> 132180401799376 -> <class 'ir.PrintStat'> 132180401799616
<class 'ir.PrintStat'> 132180401799616 -> <class 'ir.StatList'> 132180401798256
<class 'ir.Var'> 132180401799760 -> <class 'ir.BinExpr'> 132180401799952
<class 'ir.Const'> 132180401799856 -> <class 'ir.BinExpr'> 132180401799952
<class 'ir.BinExpr'> 132180401799952 -> <class 'ir.AssignStat'> 132180401800048
<class 'ir.AssignStat'> 132180401800048 -> <class 'ir.StatList'> 132180401798256
<class 'ir.StatList'> 132180401798256 -> <class 'ir.WhileStat'> 132180401800096
<class 'ir.Var'> 132180401797968 -> <class 'ir.BinExpr'> 132180401798160
<class 'ir.Const'> 132180401798064 -> <class 'ir.BinExpr'> 132180401798160
<class 'ir.BinExpr'> 132180401798160 -> <class 'ir.WhileStat'> 132180401800096
<class 'ir.WhileStat'> 132180401800096 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401800144 -> <class 'ir.AssignStat'> 132180401800240
<class 'ir.AssignStat'> 132180401800240 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401800288 -> <class 'ir.AssignStat'> 132180401800384
<class 'ir.AssignStat'> 132180401800384 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401801392 -> <class 'ir.BinExpr'> 132180401802064
<class 'ir.Const'> 132180401801872 -> <class 'ir.BinExpr'> 132180401802064
<class 'ir.BinExpr'> 132180401802064 -> <class 'ir.ArrayElement'> 132180401801968
<class 'ir.ArrayElement'> 132180401801968 -> <class 'ir.AssignStat'> 132180401802160
<class 'ir.Var'> 132180401801152 -> <class 'ir.BinExpr'> 132180401801488
<class 'ir.Const'> 132180401801200 -> <class 'ir.BinExpr'> 132180401801488
<class 'ir.BinExpr'> 132180401801488 -> <class 'ir.BinExpr'> 132180401801776
<class 'ir.Var'> 132180401801296 -> <class 'ir.BinExpr'> 132180401801680
<class 'ir.Const'> 132180401801584 -> <class 'ir.BinExpr'> 132180401801680
<class 'ir.BinExpr'> 132180401801680 -> <class 'ir.BinExpr'> 132180401801776
<class 'ir.BinExpr'> 132180401801776 -> <class 'ir.AssignStat'> 132180401802160
<class 'ir.AssignStat'> 132180401802160 -> <class 'ir.StatList'> 132180401801056
<class 'ir.Var'> 132180401785056 -> <class 'ir.BinExpr'> 132180401802400
<class 'ir.Const'> 132180401802256 -> <class 'ir.BinExpr'> 132180401802400
<class 'ir.BinExpr'> 132180401802400 -> <class 'ir.BinExpr'> 132180401802832
<class 'ir.Var'> 132180401802352 -> <class 'ir.BinExpr'> 132180401802736
<class 'ir.Const'> 132180401802640 -> <class 'ir.BinExpr'> 132180401802736
<class 'ir.BinExpr'> 132180401802736 -> <class 'ir.BinExpr'> 132180401802832
<class 'ir.BinExpr'> 132180401802832 -> <class 'ir.ArrayElement'> 132180401802496
<class 'ir.ArrayElement'> 132180401802496 -> <class 'ir.PrintStat'> 132180401802928
<class 'ir.PrintStat'> 132180401802928 -> <class 'ir.StatList'> 132180401801056
<class 'ir.Var'> 132180401803168 -> <class 'ir.BinExpr'> 132180401942592
<class 'ir.Const'> 132180401803120 -> <class 'ir.BinExpr'> 132180401942592
<class 'ir.BinExpr'> 132180401942592 -> <class 'ir.AssignStat'> 132180401942688
<class 'ir.AssignStat'> 132180401942688 -> <class 'ir.StatList'> 132180401801056
<class 'ir.Var'> 132180401942736 -> <class 'ir.BinExpr'> 132180401942928
<class 'ir.Const'> 132180401942832 -> <class 'ir.BinExpr'> 132180401942928
<class 'ir.BinExpr'> 132180401942928 -> <class 'ir.AssignStat'> 132180401943024
<class 'ir.AssignStat'> 132180401943024 -> <class 'ir.StatList'> 132180401801056
<class 'ir.StatList'> 132180401801056 -> <class 'ir.WhileStat'> 132180401943072
<class 'ir.Var'> 132180401800768 -> <class 'ir.BinExpr'> 132180401800960
<class 'ir.Const'> 132180401800864 -> <class 'ir.BinExpr'> 132180401800960
<class 'ir.BinExpr'> 132180401800960 -> <class 'ir.WhileStat'> 132180401943072
<class 'ir.WhileStat'> 132180401943072 -> <class 'ir.StatList'> 132180401800672
<class 'ir.StatList'> 132180401800672 -> <class 'ir.WhileStat'> 132180401943120
<class 'ir.Var'> 132180401784528 -> <class 'ir.BinExpr'> 132180401800576
<class 'ir.Const'> 132180401800480 -> <class 'ir.BinExpr'> 132180401800576
<class 'ir.BinExpr'> 132180401800576 -> <class 'ir.WhileStat'> 132180401943120
<class 'ir.WhileStat'> 132180401943120 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401943552 -> <class 'ir.PrintStat'> 132180401943648
<class 'ir.PrintStat'> 132180401943648 -> <class 'ir.StatList'> 132180401943408
<class 'ir.StatList'> 132180401943408 -> <class 'ir.ForStat'> 132180401944320
<class 'ir.Var'> 132180401943696 -> <class 'ir.BinExpr'> 132180401944080
<class 'ir.Const'> 132180401943888 -> <class 'ir.BinExpr'> 132180401944080
<class 'ir.BinExpr'> 132180401944080 -> <class 'ir.AssignStat'> 132180401944272
<class 'ir.AssignStat'> 132180401944272 -> <class 'ir.ForStat'> 132180401944320
<class 'ir.Var'> 132180401944032 -> <class 'ir.BinExpr'> 132180401944224
<class 'ir.Const'> 132180401943312 -> <class 'ir.BinExpr'> 132180401944224
<class 'ir.BinExpr'> 132180401944224 -> <class 'ir.ForStat'> 132180401944320
<class 'ir.ForStat'> 132180401944320 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401944368 -> <class 'ir.AssignStat'> 132180401944464
<class 'ir.AssignStat'> 132180401944464 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401785152 -> <class 'ir.PrintStat'> 132180401944560
<class 'ir.PrintStat'> 132180401944560 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401944992 -> <class 'ir.PrintStat'> 132180401945088
<class 'ir.PrintStat'> 132180401945088 -> <class 'ir.StatList'> 132180401944896
<class 'ir.StatList'> 132180401944896 -> <class 'ir.ForStat'> 132180401945760
<class 'ir.Var'> 132180401945424 -> <class 'ir.BinExpr'> 132180401945616
<class 'ir.Const'> 132180401945520 -> <class 'ir.BinExpr'> 132180401945616
<class 'ir.BinExpr'> 132180401945616 -> <class 'ir.AssignStat'> 132180401945712
<class 'ir.AssignStat'> 132180401945712 -> <class 'ir.ForStat'> 132180401945760
<class 'ir.Var'> 132180401945232 -> <class 'ir.BinExpr'> 132180401945328
<class 'ir.Const'> 132180401944800 -> <class 'ir.BinExpr'> 132180401945328
<class 'ir.BinExpr'> 132180401945328 -> <class 'ir.ForStat'> 132180401945760
<class 'ir.ForStat'> 132180401945760 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401945808 -> <class 'ir.PrintStat'> 132180401945904
<class 'ir.PrintStat'> 132180401945904 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401946000 -> <class 'ir.PrintStat'> 132180401946096
<class 'ir.PrintStat'> 132180401946096 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401946528 -> <class 'ir.PrintStat'> 132180401914400
<class 'ir.PrintStat'> 132180401914400 -> <class 'ir.StatList'> 132180401946432
<class 'ir.StatList'> 132180401946432 -> <class 'ir.ForStat'> 132180401915264
<class 'ir.Var'> 132180401914736 -> <class 'ir.BinExpr'> 132180401914928
<class 'ir.Const'> 132180401914832 -> <class 'ir.BinExpr'> 132180401914928
<class 'ir.BinExpr'> 132180401914928 -> <class 'ir.AssignStat'> 132180401915120
<class 'ir.AssignStat'> 132180401915120 -> <class 'ir.ForStat'> 132180401915264
<class 'ir.Var'> 132180401914544 -> <class 'ir.BinExpr'> 132180401914640
<class 'ir.Const'> 132180401946336 -> <class 'ir.BinExpr'> 132180401914640
<class 'ir.BinExpr'> 132180401914640 -> <class 'ir.ForStat'> 132180401915264
<class 'ir.ForStat'> 132180401915264 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401915360 -> <class 'ir.PrintStat'> 132180401915312
<class 'ir.PrintStat'> 132180401915312 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401915456 -> <class 'ir.PrintStat'> 132180401915072
<class 'ir.PrintStat'> 132180401915072 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401915840 -> <class 'ir.PrintStat'> 132180401915936
<class 'ir.PrintStat'> 132180401915936 -> <class 'ir.StatList'> 132180401915744
<class 'ir.Var'> 132180401916032 -> <class 'ir.PrintStat'> 132180401916128
<class 'ir.PrintStat'> 132180401916128 -> <class 'ir.StatList'> 132180401915744
<class 'ir.StatList'> 132180401915744 -> <class 'ir.ForStat'> 132180401916848
<class 'ir.Var'> 132180401916512 -> <class 'ir.BinExpr'> 132180401916704
<class 'ir.Const'> 132180401916608 -> <class 'ir.BinExpr'> 132180401916704
<class 'ir.BinExpr'> 132180401916704 -> <class 'ir.AssignStat'> 132180401916800
<class 'ir.AssignStat'> 132180401916800 -> <class 'ir.ForStat'> 132180401916848
<class 'ir.Var'> 132180401916320 -> <class 'ir.BinExpr'> 132180401916416
<class 'ir.Const'> 132180401915648 -> <class 'ir.BinExpr'> 132180401916416
<class 'ir.BinExpr'> 132180401916416 -> <class 'ir.ForStat'> 132180401916848
<class 'ir.ForStat'> 132180401916848 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401916896 -> <class 'ir.PrintStat'> 132180401916992
<class 'ir.PrintStat'> 132180401916992 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401917088 -> <class 'ir.PrintStat'> 132180401917184
<class 'ir.PrintStat'> 132180401917184 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401917424 -> <class 'ir.PrintStat'> 132180401917664
<class 'ir.PrintStat'> 132180401917664 -> <class 'ir.StatList'> 132180401917760
<class 'ir.StatList'> 132180401917760 -> <class 'ir.ForStat'> 132180401812576
<class 'ir.Var'> 132180401811568 -> <class 'ir.BinExpr'> 132180401811904
<class 'ir.Const'> 132180401811712 -> <class 'ir.BinExpr'> 132180401811904
<class 'ir.BinExpr'> 132180401811904 -> <class 'ir.AssignStat'> 132180401812240
<class 'ir.AssignStat'> 132180401812240 -> <class 'ir.ForStat'> 132180401812576
<class 'ir.Var'> 132180401917856 -> <class 'ir.BinExpr'> 132180401914352
<class 'ir.Const'> 132180401917616 -> <class 'ir.BinExpr'> 132180401914352
<class 'ir.BinExpr'> 132180401914352 -> <class 'ir.ForStat'> 132180401812576
<class 'ir.ForStat'> 132180401812576 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401812432 -> <class 'ir.PrintStat'> 132180401812288
<class 'ir.PrintStat'> 132180401812288 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401812384 -> <class 'ir.PrintStat'> 132180401812528
<class 'ir.PrintStat'> 132180401812528 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401812048 -> <class 'ir.PrintStat'> 132180401812720
<class 'ir.PrintStat'> 132180401812720 -> <class 'ir.StatList'> 132180401811856
<class 'ir.StatList'> 132180401811856 -> <class 'ir.ForStat'> 132180401813392
<class 'ir.Var'> 132180401812816 -> <class 'ir.BinExpr'> 132180401813152
<class 'ir.Const'> 132180401813008 -> <class 'ir.BinExpr'> 132180401813152
<class 'ir.BinExpr'> 132180401813152 -> <class 'ir.AssignStat'> 132180401813344
<class 'ir.AssignStat'> 132180401813344 -> <class 'ir.ForStat'> 132180401813392
<class 'ir.Var'> 132180401812864 -> <class 'ir.BinExpr'> 132180401813200
<class 'ir.Const'> 132180401811616 -> <class 'ir.BinExpr'> 132180401813200
<class 'ir.BinExpr'> 132180401813200 -> <class 'ir.ForStat'> 132180401813392
<class 'ir.ForStat'> 132180401813392 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401813440 -> <class 'ir.PrintStat'> 132180401813536
<class 'ir.PrintStat'> 132180401813536 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401813632 -> <class 'ir.PrintStat'> 132180401813728
<class 'ir.PrintStat'> 132180401813728 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401814160 -> <class 'ir.PrintStat'> 132180401814256
<class 'ir.PrintStat'> 132180401814256 -> <class 'ir.StatList'> 132180401814064
<class 'ir.StatList'> 132180401814064 -> <class 'ir.ForStat'> 132180401781920
<class 'ir.Var'> 132180401814976 -> <class 'ir.BinExpr'> 132180401814496
<class 'ir.Const'> 132180401814784 -> <class 'ir.BinExpr'> 132180401814496
<class 'ir.BinExpr'> 132180401814496 -> <class 'ir.AssignStat'> 132180401781872
<class 'ir.AssignStat'> 132180401781872 -> <class 'ir.ForStat'> 132180401781920
<class 'ir.Var'> 132180401814400 -> <class 'ir.BinExpr'> 132180401815072
<class 'ir.Const'> 132180401813968 -> <class 'ir.BinExpr'> 132180401815072
<class 'ir.BinExpr'> 132180401815072 -> <class 'ir.ForStat'> 132180401781920
<class 'ir.ForStat'> 132180401781920 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401781968 -> <class 'ir.PrintStat'> 132180401782064
<class 'ir.PrintStat'> 132180401782064 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401782160 -> <class 'ir.AssignStat'> 132180401782256
<class 'ir.AssignStat'> 132180401782256 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401785824 -> <class 'ir.PrintStat'> 132180401782352
<class 'ir.PrintStat'> 132180401782352 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401781680 -> <class 'ir.BinExpr'> 132180401781392
<class 'ir.Var'> 132180401781488 -> <class 'ir.BinExpr'> 132180401781392
<class 'ir.BinExpr'> 132180401781392 -> <class 'ir.AssignStat'> 132180401781200
<class 'ir.AssignStat'> 132180401781200 -> <class 'ir.StatList'> 132180401782688
<class 'ir.Var'> 132180401781152 -> <class 'ir.PrintStat'> 132180401780960
<class 'ir.PrintStat'> 132180401780960 -> <class 'ir.StatList'> 132180401782688
<class 'ir.Var'> 132180401780864 -> <class 'ir.PrintStat'> 132180401780672
<class 'ir.PrintStat'> 132180401780672 -> <class 'ir.StatList'> 132180401782688
<class 'ir.StatList'> 132180401782688 -> <class 'ir.ForStat'> 132180401780000
<class 'ir.Var'> 132180401780336 -> <class 'ir.BinExpr'> 132180401780144
<class 'ir.Const'> 132180401780240 -> <class 'ir.BinExpr'> 132180401780144
<class 'ir.BinExpr'> 132180401780144 -> <class 'ir.AssignStat'> 132180401780048
<class 'ir.AssignStat'> 132180401780048 -> <class 'ir.ForStat'> 132180401780000
<class 'ir.Var'> 132180401780528 -> <class 'ir.BinExpr'> 132180401780432
<class 'ir.Const'> 132180401782592 -> <class 'ir.BinExpr'> 132180401780432
<class 'ir.BinExpr'> 132180401780432 -> <class 'ir.ForStat'> 132180401780000
<class 'ir.ForStat'> 132180401780000 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401779952 -> <class 'ir.PrintStat'> 132180401779856
<class 'ir.PrintStat'> 132180401779856 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401779760 -> <class 'ir.PrintStat'> 132180401779664
<class 'ir.PrintStat'> 132180401779664 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401779568 -> <class 'ir.AssignStat'> 132180401779472
<class 'ir.AssignStat'> 132180401779472 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180401779424 -> <class 'ir.PrintStat'> 132180401779328
<class 'ir.PrintStat'> 132180401779328 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180401778896 -> <class 'ir.BinExpr'> 132180402208832
<class 'ir.Var'> 132180401778800 -> <class 'ir.BinExpr'> 132180402208832
<class 'ir.BinExpr'> 132180402208832 -> <class 'ir.AssignStat'> 132180402208928
<class 'ir.AssignStat'> 132180402208928 -> <class 'ir.StatList'> 132180401778992
<class 'ir.Var'> 132180402208976 -> <class 'ir.PrintStat'> 132180402209072
<class 'ir.PrintStat'> 132180402209072 -> <class 'ir.StatList'> 132180401778992
<class 'ir.StatList'> 132180401778992 -> <class 'ir.ForStat'> 132180402209552
<class 'ir.Var'> 132180402209504 -> <class 'ir.BinExpr'> 132180402209744
<class 'ir.Const'> 132180402209840 -> <class 'ir.BinExpr'> 132180402209744
<class 'ir.BinExpr'> 132180402209744 -> <class 'ir.AssignStat'> 132180402209600
<class 'ir.AssignStat'> 132180402209600 -> <class 'ir.ForStat'> 132180402209552
<class 'ir.Var'> 132180402209216 -> <class 'ir.BinExpr'> 132180402209312
<class 'ir.Const'> 132180401779088 -> <class 'ir.BinExpr'> 132180402209312
<class 'ir.BinExpr'> 132180402209312 -> <class 'ir.ForStat'> 132180402209552
<class 'ir.ForStat'> 132180402209552 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Var'> 132180402209456 -> <class 'ir.PrintStat'> 132180402209936
<class 'ir.PrintStat'> 132180402209936 -> <class 'ir.StatList'> 132180401786832
<class 'ir.Const'> 132180402210032 -> <class 'ir.PrintStat'> 132180402210128
<class 'ir.PrintStat'> 132180402210128 -> <class 'ir.StatList'> 132180401786832
<class 'ir.StatList'> 132180401786832 -> <class 'ir.Block'> 132180402210224
<class 'ir.Block'> 132180402210224 -> <class 'NoneType'> 132180415169568

Total nodes in IR: 265 

navigating children of <class 'ir.DefinitionList'> 132180402449280 1
Cannot lower 132180401786016 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 2
StatList : new 132180402210608
Lowering <class 'ir.Const'> 132180401786304
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786592
StatList : new 132180402210272
Lowering <class 'ir.AssignStat'> 132180401786592
navigating children of <class 'ir.BinExpr'> 132180401786784 3
StatList : new 132180402210800
Lowering <class 'ir.Var'> 132180401786640
StatList : new 132180402211040
Lowering <class 'ir.Var'> 132180401786208
StatList : new 132180402211280
Lowering <class 'ir.BinExpr'> 132180401786784
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401786496
StatList : new 132180402211376
Lowering <class 'ir.AssignStat'> 132180401786496
Cannot lower 132180401786160 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
Cannot lower 132180401786400 <class 'ir.Block'> 'Block' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
Cannot lower 132180401784048 <class 'ir.FunctionDef'> 'FunctionDef' object has no attribute 'lower'
Cannot lower 132180402449280 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 40
navigating children of <class 'ir.UnExpr'> 132180401795280 2
StatList : new 132180402210368
Lowering <class 'ir.Const'> 132180401795184
StatList : new 132180402212816
Lowering <class 'ir.UnExpr'> 132180401795280
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795376
StatList : new 132180402212768
Lowering <class 'ir.AssignStat'> 132180401795376
StatList : new 132180402212480
Lowering <class 'ir.ReadStat'> 132180401783664
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401795472
StatList : new 132180402212384
Lowering <class 'ir.AssignStat'> 132180401795472
navigating children of <class 'ir.StatList'> 132180401795808 1
navigating children of <class 'ir.PrintStat'> 132180401796096 1
navigating children of <class 'ir.UnExpr'> 132180401796000 2
StatList : new 132180402212144
Lowering <class 'ir.Var'> 132180401795904
StatList : new 132180402211808
Lowering <class 'ir.UnExpr'> 132180401796000
navigating children of <class 'ir.UnExpr'> 132180401796000 2
navigating children of <class 'ir.StatList'> 132180402212144 1
Cannot lower 132180402212192 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180402212144 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 132180402192640
Lowering <class 'ir.UnExpr'> 132180401796000
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796096
StatList : new 132180402192880
Lowering <class 'ir.PrintStat'> 132180401796096
Cannot lower 132180401795808 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.BinExpr'> 132180401795712 3
StatList : new 132180402192592
Lowering <class 'ir.Var'> 132180401795520
StatList : new 132180402193120
Lowering <class 'ir.Const'> 132180401795616
StatList : new 132180402193360
Lowering <class 'ir.BinExpr'> 132180401795712
successfully navigated attr  cond  of <class 'ir.IfStat'> 132180401796480
navigating children of <class 'ir.StatList'> 132180401796192 1
navigating children of <class 'ir.PrintStat'> 132180401796384 1
StatList : new 132180402193504
Lowering <class 'ir.Var'> 132180401796288
StatList : new 132180402193792
Lowering <class 'ir.Var'> 132180401796288
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401796384
StatList : new 132180402193936
Lowering <class 'ir.PrintStat'> 132180401796384
Cannot lower 132180401796192 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 132180401796480
StatList : new 132180402194800
Lowering <class 'ir.IfStat'> 132180401796480
StatList : new 132180402194512
Lowering <class 'ir.Const'> 132180401796528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401796624
StatList : new 132180402196432
Lowering <class 'ir.AssignStat'> 132180401796624
navigating children of <class 'ir.StatList'> 132180401796960 3
Cannot lower 132180401797056 <class 'ir.CallExpr'> 'CallExpr' object has no attribute 'lower'
successfully navigated attr  call  of <class 'ir.CallStat'> 132180401797248
Lowering <class 'ir.CallStat'> 132180401797248
navigating children of <class 'ir.BinExpr'> 132180401797440 3
StatList : new 132180402196096
Lowering <class 'ir.Var'> 132180401797296
StatList : new 132180402195856
Lowering <class 'ir.Const'> 132180401797152
StatList : new 132180402195616
Lowering <class 'ir.BinExpr'> 132180401797440
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797536
StatList : new 132180402195520
Lowering <class 'ir.AssignStat'> 132180401797536
navigating children of <class 'ir.PrintStat'> 132180401797680 1
StatList : new 132180402195280
Lowering <class 'ir.Var'> 132180401797584
StatList : new 132180402195088
Lowering <class 'ir.Var'> 132180401797584
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401797680
StatList : new 132180402194416
Lowering <class 'ir.PrintStat'> 132180401797680
Cannot lower 132180401796960 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401797776
navigating children of <class 'ir.BinExpr'> 132180401796864 3
StatList : new 132180402194032
Lowering <class 'ir.Var'> 132180401796672
StatList : new 132180402176928
Lowering <class 'ir.Const'> 132180401796768
StatList : new 132180402177552
Lowering <class 'ir.BinExpr'> 132180401796864
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401797776
StatList : new 132180402178752
Lowering <class 'ir.WhileStat'> 132180401797776
StatList : new 132180402179904
Lowering <class 'ir.Const'> 132180401797824
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401797920
StatList : new 132180402179808
Lowering <class 'ir.AssignStat'> 132180401797920
navigating children of <class 'ir.StatList'> 132180401798256 3
StatList : new 132180402179568
Lowering <class 'ir.Var'> 132180401798736
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.BinExpr'> 132180401798832 3
navigating children of <class 'ir.BinExpr'> 132180401798640 3
StatList : new 132180402179376
Lowering <class 'ir.Var'> 132180401798352
StatList : new 132180402179040
Lowering <class 'ir.Const'> 132180401798544
StatList : new 132180402178800
Lowering <class 'ir.BinExpr'> 132180401798640
StatList : new 132180402178272
Lowering <class 'ir.Const'> 132180401798448
StatList : new 132180402178032
Lowering <class 'ir.BinExpr'> 132180401798832
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401798976
StatList : new 132180402177216
Lowering <class 'ir.AssignStat'> 132180401798976
navigating children of <class 'ir.PrintStat'> 132180401799616 1
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.BinExpr'> 132180401799280 3
StatList : new 132180402176784
Lowering <class 'ir.Var'> 132180401784864
StatList : new 132180401967168
Lowering <class 'ir.Const'> 132180401799120
StatList : new 132180401967408
Lowering <class 'ir.BinExpr'> 132180401799280
StatList : new 132180401967936
Lowering <class 'ir.Const'> 132180401799024
StatList : new 132180401967648
Lowering <class 'ir.BinExpr'> 132180401799520
navigating children of <class 'ir.BinExpr'> 132180401799520 3
navigating children of <class 'ir.StatList'> 132180401967408 3
navigating children of <class 'ir.StatList'> 132180402176784 1
Cannot lower 132180402177024 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180402176784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967168 1
Cannot lower 132180402176496 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967168 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401967264 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401967408 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967936 1
Cannot lower 132180401967744 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 132180401968368
Lowering <class 'ir.BinExpr'> 132180401799520
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
StatList : new 132180401967504
Lowering <class 'ir.ArrayElement'> 132180401799376
navigating children of <class 'ir.ArrayElement'> 132180401799376 1
navigating children of <class 'ir.StatList'> 132180401967648 3
navigating children of <class 'ir.StatList'> 132180401967408 3
navigating children of <class 'ir.StatList'> 132180402176784 1
Cannot lower 132180402177024 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180402176784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967168 1
Cannot lower 132180402176496 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967168 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401967264 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401967408 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967936 1
Cannot lower 132180401967744 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401967840 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401967648 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401968368 3
navigating children of <class 'ir.StatList'> 132180401967408 3
navigating children of <class 'ir.StatList'> 132180402176784 1
Cannot lower 132180402177024 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180402176784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967168 1
Cannot lower 132180402176496 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967168 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401967264 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401967408 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401967936 1
Cannot lower 132180401967744 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401967936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401968752 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401968368 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401799376
StatList : new 132180401969328
Lowering <class 'ir.ArrayElement'> 132180401799376
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401799616
StatList : new 132180401969616
Lowering <class 'ir.PrintStat'> 132180401799616
navigating children of <class 'ir.BinExpr'> 132180401799952 3
StatList : new 132180401969280
Lowering <class 'ir.Var'> 132180401799760
StatList : new 132180401970048
Lowering <class 'ir.Const'> 132180401799856
StatList : new 132180401970000
Lowering <class 'ir.BinExpr'> 132180401799952
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800048
StatList : new 132180401969856
Lowering <class 'ir.AssignStat'> 132180401800048
Cannot lower 132180401798256 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401800096
navigating children of <class 'ir.BinExpr'> 132180401798160 3
StatList : new 132180401970576
Lowering <class 'ir.Var'> 132180401797968
StatList : new 132180401970288
Lowering <class 'ir.Const'> 132180401798064
StatList : new 132180401970864
Lowering <class 'ir.BinExpr'> 132180401798160
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401800096
StatList : new 132180401590432
Lowering <class 'ir.WhileStat'> 132180401800096
StatList : new 132180401590624
Lowering <class 'ir.Const'> 132180401800144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800240
StatList : new 132180401590720
Lowering <class 'ir.AssignStat'> 132180401800240
StatList : new 132180401590960
Lowering <class 'ir.Const'> 132180401800288
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401800384
StatList : new 132180401591056
Lowering <class 'ir.AssignStat'> 132180401800384
navigating children of <class 'ir.StatList'> 132180401800672 1
navigating children of <class 'ir.StatList'> 132180401801056 4
navigating children of <class 'ir.ArrayElement'> 132180401801968 1
navigating children of <class 'ir.BinExpr'> 132180401802064 3
StatList : new 132180401591296
Lowering <class 'ir.Var'> 132180401801392
StatList : new 132180401591680
Lowering <class 'ir.Const'> 132180401801872
StatList : new 132180401591920
Lowering <class 'ir.BinExpr'> 132180401802064
navigating children of <class 'ir.BinExpr'> 132180401802064 3
navigating children of <class 'ir.StatList'> 132180401591296 1
Cannot lower 132180401591248 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401591296 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401591680 1
Cannot lower 132180401591632 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401591680 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 132180401592160
Lowering <class 'ir.BinExpr'> 132180401802064
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401801968
StatList : new 132180401592736
Lowering <class 'ir.ArrayElement'> 132180401801968
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.BinExpr'> 132180401801776 3
navigating children of <class 'ir.BinExpr'> 132180401801488 3
StatList : new 132180401592880
Lowering <class 'ir.Var'> 132180401801152
StatList : new 132180401593216
Lowering <class 'ir.Const'> 132180401801200
StatList : new 132180401593456
Lowering <class 'ir.BinExpr'> 132180401801488
navigating children of <class 'ir.BinExpr'> 132180401801680 3
StatList : new 132180401593648
Lowering <class 'ir.Var'> 132180401801296
StatList : new 132180401593888
Lowering <class 'ir.Const'> 132180401801584
StatList : new 132180401594128
Lowering <class 'ir.BinExpr'> 132180401801680
StatList : new 132180401614912
Lowering <class 'ir.BinExpr'> 132180401801776
successfully navigated attr  offset  of <class 'ir.AssignStat'> 132180401802160
StatList : new 132180401615440
Lowering <class 'ir.AssignStat'> 132180401802160
navigating children of <class 'ir.PrintStat'> 132180401802928 1
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.BinExpr'> 132180401802400 3
StatList : new 132180401615680
Lowering <class 'ir.Var'> 132180401785056
StatList : new 132180401616064
Lowering <class 'ir.Const'> 132180401802256
StatList : new 132180401616304
Lowering <class 'ir.BinExpr'> 132180401802400
navigating children of <class 'ir.BinExpr'> 132180401802736 3
StatList : new 132180401616496
Lowering <class 'ir.Var'> 132180401802352
StatList : new 132180401616736
Lowering <class 'ir.Const'> 132180401802640
StatList : new 132180401616976
Lowering <class 'ir.BinExpr'> 132180401802736
StatList : new 132180401617216
Lowering <class 'ir.BinExpr'> 132180401802832
navigating children of <class 'ir.BinExpr'> 132180401802832 3
navigating children of <class 'ir.StatList'> 132180401616304 3
navigating children of <class 'ir.StatList'> 132180401615680 1
Cannot lower 132180401615632 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401615680 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616064 1
Cannot lower 132180401616016 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616160 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616976 3
navigating children of <class 'ir.StatList'> 132180401616496 1
Cannot lower 132180401616448 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401616496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616736 1
Cannot lower 132180401616688 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616736 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616832 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 132180401617312
Lowering <class 'ir.BinExpr'> 132180401802832
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
StatList : new 132180401618032
Lowering <class 'ir.ArrayElement'> 132180401802496
navigating children of <class 'ir.ArrayElement'> 132180401802496 1
navigating children of <class 'ir.StatList'> 132180401617216 3
navigating children of <class 'ir.StatList'> 132180401616304 3
navigating children of <class 'ir.StatList'> 132180401615680 1
Cannot lower 132180401615632 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401615680 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616064 1
Cannot lower 132180401616016 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616160 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616976 3
navigating children of <class 'ir.StatList'> 132180401616496 1
Cannot lower 132180401616448 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401616496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616736 1
Cannot lower 132180401616688 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616736 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616832 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401617072 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401617216 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401617312 3
navigating children of <class 'ir.StatList'> 132180401616304 3
navigating children of <class 'ir.StatList'> 132180401615680 1
Cannot lower 132180401615632 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401615680 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616064 1
Cannot lower 132180401616016 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616160 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616976 3
navigating children of <class 'ir.StatList'> 132180401616496 1
Cannot lower 132180401616448 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 132180401616496 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 132180401616736 1
Cannot lower 132180401616688 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 132180401616736 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401616832 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401616976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 132180401615728 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 132180401617312 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 132180401802496
StatList : new 132180401618560
Lowering <class 'ir.ArrayElement'> 132180401802496
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401802928
StatList : new 132180401618704
Lowering <class 'ir.PrintStat'> 132180401802928
navigating children of <class 'ir.BinExpr'> 132180401942592 3
StatList : new 132180401635440
Lowering <class 'ir.Var'> 132180401803168
StatList : new 132180401635632
Lowering <class 'ir.Const'> 132180401803120
StatList : new 132180401635872
Lowering <class 'ir.BinExpr'> 132180401942592
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401942688
StatList : new 132180401635968
Lowering <class 'ir.AssignStat'> 132180401942688
navigating children of <class 'ir.BinExpr'> 132180401942928 3
StatList : new 132180401636208
Lowering <class 'ir.Var'> 132180401942736
StatList : new 132180401636448
Lowering <class 'ir.Const'> 132180401942832
StatList : new 132180401636688
Lowering <class 'ir.BinExpr'> 132180401942928
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943024
StatList : new 132180401636784
Lowering <class 'ir.AssignStat'> 132180401943024
Cannot lower 132180401801056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943072
navigating children of <class 'ir.BinExpr'> 132180401800960 3
StatList : new 132180401637024
Lowering <class 'ir.Var'> 132180401800768
StatList : new 132180401637216
Lowering <class 'ir.Const'> 132180401800864
StatList : new 132180401637456
Lowering <class 'ir.BinExpr'> 132180401800960
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943072
StatList : new 132180401637888
Lowering <class 'ir.WhileStat'> 132180401943072
Cannot lower 132180401800672 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.BinExpr'> 132180401800576 3
StatList : new 132180401638080
Lowering <class 'ir.Var'> 132180401784528
StatList : new 132180401638272
Lowering <class 'ir.Const'> 132180401800480
StatList : new 132180401638512
Lowering <class 'ir.BinExpr'> 132180401800576
successfully navigated attr  cond  of <class 'ir.WhileStat'> 132180401943120
StatList : new 132180401638944
Lowering <class 'ir.WhileStat'> 132180401943120
navigating children of <class 'ir.StatList'> 132180401943408 1
navigating children of <class 'ir.PrintStat'> 132180401943648 1
StatList : new 132180401639136
Lowering <class 'ir.Var'> 132180401943552
StatList : new 132180401639376
Lowering <class 'ir.Var'> 132180401943552
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401943648
StatList : new 132180401647776
Lowering <class 'ir.PrintStat'> 132180401943648
Cannot lower 132180401943408 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944080 3
StatList : new 132180401648016
Lowering <class 'ir.Var'> 132180401943696
StatList : new 132180401648208
Lowering <class 'ir.Const'> 132180401943888
StatList : new 132180401648448
Lowering <class 'ir.BinExpr'> 132180401944080
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944272
StatList : new 132180401648544
Lowering <class 'ir.AssignStat'> 132180401944272
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401944320
navigating children of <class 'ir.BinExpr'> 132180401944224 3
StatList : new 132180401648736
Lowering <class 'ir.Var'> 132180401944032
StatList : new 132180401649024
Lowering <class 'ir.Const'> 132180401943312
StatList : new 132180401649264
Lowering <class 'ir.BinExpr'> 132180401944224
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401944320
StatList : new 132180401649600
Lowering ForStat 132180401944320 into StatList
StatList : new 132180401649792
Lowering <class 'ir.ForStat'> 132180401944320
StatList : new 132180401649696
Lowering <class 'ir.Const'> 132180401944368
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401944464
StatList : new 132180401649984
Lowering <class 'ir.AssignStat'> 132180401944464
navigating children of <class 'ir.PrintStat'> 132180401944560 1
StatList : new 132180401650176
Lowering <class 'ir.Const'> 132180401785152
StatList : new 132180401650368
Lowering <class 'ir.Const'> 132180401785152
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401944560
StatList : new 132180401650512
Lowering <class 'ir.PrintStat'> 132180401944560
navigating children of <class 'ir.StatList'> 132180401944896 1
navigating children of <class 'ir.PrintStat'> 132180401945088 1
StatList : new 132180401650752
Lowering <class 'ir.Var'> 132180401944992
StatList : new 132180401650992
Lowering <class 'ir.Var'> 132180401944992
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945088
StatList : new 132180401651136
Lowering <class 'ir.PrintStat'> 132180401945088
Cannot lower 132180401944896 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945616 3
StatList : new 132180401651328
Lowering <class 'ir.Var'> 132180401945424
StatList : new 132180401651568
Lowering <class 'ir.Const'> 132180401945520
StatList : new 132180401455264
Lowering <class 'ir.BinExpr'> 132180401945616
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945712
StatList : new 132180401455360
Lowering <class 'ir.AssignStat'> 132180401945712
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.BinExpr'> 132180401945328 3
StatList : new 132180401455552
Lowering <class 'ir.Var'> 132180401945232
StatList : new 132180401455840
Lowering <class 'ir.Const'> 132180401944800
StatList : new 132180401456080
Lowering <class 'ir.BinExpr'> 132180401945328
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401945760
StatList : new 132180401456416
Lowering ForStat 132180401945760 into StatList
StatList : new 132180401456608
Lowering <class 'ir.ForStat'> 132180401945760
navigating children of <class 'ir.PrintStat'> 132180401945904 1
StatList : new 132180401456512
Lowering <class 'ir.Const'> 132180401945808
StatList : new 132180401456848
Lowering <class 'ir.Const'> 132180401945808
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401945904
StatList : new 132180401456992
Lowering <class 'ir.PrintStat'> 132180401945904
navigating children of <class 'ir.PrintStat'> 132180401946096 1
StatList : new 132180401457232
Lowering <class 'ir.Const'> 132180401946000
StatList : new 132180401457424
Lowering <class 'ir.Const'> 132180401946000
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401946096
StatList : new 132180401457568
Lowering <class 'ir.PrintStat'> 132180401946096
navigating children of <class 'ir.StatList'> 132180401946432 1
navigating children of <class 'ir.PrintStat'> 132180401914400 1
StatList : new 132180401457808
Lowering <class 'ir.Var'> 132180401946528
StatList : new 132180401458048
Lowering <class 'ir.Var'> 132180401946528
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401914400
StatList : new 132180401458192
Lowering <class 'ir.PrintStat'> 132180401914400
Cannot lower 132180401946432 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914928 3
StatList : new 132180401458384
Lowering <class 'ir.Var'> 132180401914736
StatList : new 132180401458624
Lowering <class 'ir.Const'> 132180401914832
StatList : new 132180401458864
Lowering <class 'ir.BinExpr'> 132180401914928
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401915120
StatList : new 132180401458960
Lowering <class 'ir.AssignStat'> 132180401915120
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.BinExpr'> 132180401914640 3
StatList : new 132180401479792
Lowering <class 'ir.Var'> 132180401914544
StatList : new 132180401479984
Lowering <class 'ir.Const'> 132180401946336
StatList : new 132180401480224
Lowering <class 'ir.BinExpr'> 132180401914640
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401915264
StatList : new 132180401480560
Lowering ForStat 132180401915264 into StatList
StatList : new 132180401480752
Lowering <class 'ir.ForStat'> 132180401915264
navigating children of <class 'ir.PrintStat'> 132180401915312 1
StatList : new 132180401480656
Lowering <class 'ir.Const'> 132180401915360
StatList : new 132180401480992
Lowering <class 'ir.Const'> 132180401915360
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915312
StatList : new 132180401481136
Lowering <class 'ir.PrintStat'> 132180401915312
navigating children of <class 'ir.PrintStat'> 132180401915072 1
StatList : new 132180401481376
Lowering <class 'ir.Const'> 132180401915456
StatList : new 132180401481568
Lowering <class 'ir.Const'> 132180401915456
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915072
StatList : new 132180401481712
Lowering <class 'ir.PrintStat'> 132180401915072
navigating children of <class 'ir.StatList'> 132180401915744 2
navigating children of <class 'ir.PrintStat'> 132180401915936 1
StatList : new 132180401481952
Lowering <class 'ir.Const'> 132180401915840
StatList : new 132180401482192
Lowering <class 'ir.Const'> 132180401915840
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401915936
StatList : new 132180401482336
Lowering <class 'ir.PrintStat'> 132180401915936
navigating children of <class 'ir.PrintStat'> 132180401916128 1
StatList : new 132180401482576
Lowering <class 'ir.Var'> 132180401916032
StatList : new 132180401482768
Lowering <class 'ir.Var'> 132180401916032
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916128
StatList : new 132180401482912
Lowering <class 'ir.PrintStat'> 132180401916128
Cannot lower 132180401915744 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916704 3
StatList : new 132180401483104
Lowering <class 'ir.Var'> 132180401916512
StatList : new 132180401483344
Lowering <class 'ir.Const'> 132180401916608
StatList : new 132180401483584
Lowering <class 'ir.BinExpr'> 132180401916704
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916800
StatList : new 132180401483680
Lowering <class 'ir.AssignStat'> 132180401916800
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.BinExpr'> 132180401916416 3
StatList : new 132180401488032
Lowering <class 'ir.Var'> 132180401916320
StatList : new 132180401488320
Lowering <class 'ir.Const'> 132180401915648
StatList : new 132180401488560
Lowering <class 'ir.BinExpr'> 132180401916416
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401916848
StatList : new 132180401488896
Lowering ForStat 132180401916848 into StatList
StatList : new 132180401489088
Lowering <class 'ir.ForStat'> 132180401916848
navigating children of <class 'ir.PrintStat'> 132180401916992 1
StatList : new 132180401488992
Lowering <class 'ir.Const'> 132180401916896
StatList : new 132180401489328
Lowering <class 'ir.Const'> 132180401916896
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401916992
StatList : new 132180401489472
Lowering <class 'ir.PrintStat'> 132180401916992
navigating children of <class 'ir.PrintStat'> 132180401917184 1
StatList : new 132180401489712
Lowering <class 'ir.Const'> 132180401917088
StatList : new 132180401489904
Lowering <class 'ir.Const'> 132180401917088
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917184
StatList : new 132180401490048
Lowering <class 'ir.PrintStat'> 132180401917184
navigating children of <class 'ir.StatList'> 132180401917760 1
navigating children of <class 'ir.PrintStat'> 132180401917664 1
StatList : new 132180401490288
Lowering <class 'ir.Var'> 132180401917424
StatList : new 132180401490528
Lowering <class 'ir.Var'> 132180401917424
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401917664
StatList : new 132180401490672
Lowering <class 'ir.PrintStat'> 132180401917664
Cannot lower 132180401917760 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401811904 3
StatList : new 132180401490864
Lowering <class 'ir.Var'> 132180401811568
StatList : new 132180401491104
Lowering <class 'ir.Const'> 132180401811712
StatList : new 132180401491344
Lowering <class 'ir.BinExpr'> 132180401811904
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401812240
StatList : new 132180401491440
Lowering <class 'ir.AssignStat'> 132180401812240
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.BinExpr'> 132180401914352 3
StatList : new 132180401491632
Lowering <class 'ir.Var'> 132180401917856
StatList : new 132180401491920
Lowering <class 'ir.Const'> 132180401917616
StatList : new 132180401504512
Lowering <class 'ir.BinExpr'> 132180401914352
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401812576
StatList : new 132180401504848
Lowering ForStat 132180401812576 into StatList
StatList : new 132180401505040
Lowering <class 'ir.ForStat'> 132180401812576
navigating children of <class 'ir.PrintStat'> 132180401812288 1
StatList : new 132180401504944
Lowering <class 'ir.Const'> 132180401812432
StatList : new 132180401505280
Lowering <class 'ir.Const'> 132180401812432
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812288
StatList : new 132180401505424
Lowering <class 'ir.PrintStat'> 132180401812288
navigating children of <class 'ir.PrintStat'> 132180401812528 1
StatList : new 132180401505664
Lowering <class 'ir.Const'> 132180401812384
StatList : new 132180401505856
Lowering <class 'ir.Const'> 132180401812384
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812528
StatList : new 132180401506000
Lowering <class 'ir.PrintStat'> 132180401812528
navigating children of <class 'ir.StatList'> 132180401811856 1
navigating children of <class 'ir.PrintStat'> 132180401812720 1
StatList : new 132180401506240
Lowering <class 'ir.Var'> 132180401812048
StatList : new 132180401506480
Lowering <class 'ir.Var'> 132180401812048
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401812720
StatList : new 132180401506624
Lowering <class 'ir.PrintStat'> 132180401812720
Cannot lower 132180401811856 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813152 3
StatList : new 132180401506816
Lowering <class 'ir.Var'> 132180401812816
StatList : new 132180401507056
Lowering <class 'ir.Const'> 132180401813008
StatList : new 132180401507296
Lowering <class 'ir.BinExpr'> 132180401813152
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813344
StatList : new 132180401507392
Lowering <class 'ir.AssignStat'> 132180401813344
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.BinExpr'> 132180401813200 3
StatList : new 132180401507584
Lowering <class 'ir.Var'> 132180401812864
StatList : new 132180401507872
Lowering <class 'ir.Const'> 132180401811616
StatList : new 132180401508112
Lowering <class 'ir.BinExpr'> 132180401813200
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401813392
StatList : new 132180401528992
Lowering ForStat 132180401813392 into StatList
StatList : new 132180401529184
Lowering <class 'ir.ForStat'> 132180401813392
navigating children of <class 'ir.PrintStat'> 132180401813536 1
StatList : new 132180401529088
Lowering <class 'ir.Const'> 132180401813440
StatList : new 132180401529472
Lowering <class 'ir.Const'> 132180401813440
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813536
StatList : new 132180401529568
Lowering <class 'ir.PrintStat'> 132180401813536
navigating children of <class 'ir.PrintStat'> 132180401813728 1
StatList : new 132180401529808
Lowering <class 'ir.Const'> 132180401813632
StatList : new 132180401530000
Lowering <class 'ir.Const'> 132180401813632
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401813728
StatList : new 132180401530144
Lowering <class 'ir.PrintStat'> 132180401813728
navigating children of <class 'ir.StatList'> 132180401814064 1
navigating children of <class 'ir.PrintStat'> 132180401814256 1
StatList : new 132180401530384
Lowering <class 'ir.Var'> 132180401814160
StatList : new 132180401530624
Lowering <class 'ir.Var'> 132180401814160
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401814256
StatList : new 132180401530768
Lowering <class 'ir.PrintStat'> 132180401814256
Cannot lower 132180401814064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401814496 3
StatList : new 132180401530960
Lowering <class 'ir.Var'> 132180401814976
StatList : new 132180401531200
Lowering <class 'ir.Const'> 132180401814784
StatList : new 132180401531440
Lowering <class 'ir.BinExpr'> 132180401814496
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781872
StatList : new 132180401531536
Lowering <class 'ir.AssignStat'> 132180401781872
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.BinExpr'> 132180401815072 3
StatList : new 132180401531728
Lowering <class 'ir.Var'> 132180401814400
StatList : new 132180401532016
Lowering <class 'ir.Const'> 132180401813968
StatList : new 132180401532256
Lowering <class 'ir.BinExpr'> 132180401815072
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401781920
StatList : new 132180401532592
Lowering ForStat 132180401781920 into StatList
StatList : new 132180401532784
Lowering <class 'ir.ForStat'> 132180401781920
navigating children of <class 'ir.PrintStat'> 132180401782064 1
StatList : new 132180401532688
Lowering <class 'ir.Const'> 132180401781968
StatList : new 132180401668304
Lowering <class 'ir.Const'> 132180401781968
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782064
StatList : new 132180401668400
Lowering <class 'ir.PrintStat'> 132180401782064
StatList : new 132180401668640
Lowering <class 'ir.Const'> 132180401782160
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401782256
StatList : new 132180401668736
Lowering <class 'ir.AssignStat'> 132180401782256
navigating children of <class 'ir.PrintStat'> 132180401782352 1
StatList : new 132180401668976
Lowering <class 'ir.Const'> 132180401785824
StatList : new 132180401669168
Lowering <class 'ir.Const'> 132180401785824
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401782352
StatList : new 132180401669312
Lowering <class 'ir.PrintStat'> 132180401782352
navigating children of <class 'ir.StatList'> 132180401782688 3
navigating children of <class 'ir.BinExpr'> 132180401781392 3
StatList : new 132180401669552
Lowering <class 'ir.Var'> 132180401781680
StatList : new 132180401669840
Lowering <class 'ir.Var'> 132180401781488
StatList : new 132180401670080
Lowering <class 'ir.BinExpr'> 132180401781392
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401781200
StatList : new 132180401670176
Lowering <class 'ir.AssignStat'> 132180401781200
navigating children of <class 'ir.PrintStat'> 132180401780960 1
StatList : new 132180401670416
Lowering <class 'ir.Var'> 132180401781152
StatList : new 132180401670608
Lowering <class 'ir.Var'> 132180401781152
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780960
StatList : new 132180401670752
Lowering <class 'ir.PrintStat'> 132180401780960
navigating children of <class 'ir.PrintStat'> 132180401780672 1
StatList : new 132180401670992
Lowering <class 'ir.Var'> 132180401780864
StatList : new 132180401671184
Lowering <class 'ir.Var'> 132180401780864
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401780672
StatList : new 132180401671328
Lowering <class 'ir.PrintStat'> 132180401780672
Cannot lower 132180401782688 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780144 3
StatList : new 132180401671520
Lowering <class 'ir.Var'> 132180401780336
StatList : new 132180401671760
Lowering <class 'ir.Const'> 132180401780240
StatList : new 132180401672000
Lowering <class 'ir.BinExpr'> 132180401780144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780048
StatList : new 132180401672096
Lowering <class 'ir.AssignStat'> 132180401780048
successfully navigated attr  step  of <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.BinExpr'> 132180401780432 3
StatList : new 132180401680544
Lowering <class 'ir.Var'> 132180401780528
StatList : new 132180401680832
Lowering <class 'ir.Const'> 132180401782592
StatList : new 132180401681072
Lowering <class 'ir.BinExpr'> 132180401780432
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180401780000
StatList : new 132180401681408
Lowering ForStat 132180401780000 into StatList
StatList : new 132180401681600
Lowering <class 'ir.ForStat'> 132180401780000
navigating children of <class 'ir.PrintStat'> 132180401779856 1
StatList : new 132180401681504
Lowering <class 'ir.Var'> 132180401779952
StatList : new 132180401681840
Lowering <class 'ir.Var'> 132180401779952
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779856
StatList : new 132180401681984
Lowering <class 'ir.PrintStat'> 132180401779856
navigating children of <class 'ir.PrintStat'> 132180401779664 1
StatList : new 132180401682224
Lowering <class 'ir.Const'> 132180401779760
StatList : new 132180401682416
Lowering <class 'ir.Const'> 132180401779760
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779664
StatList : new 132180401682560
Lowering <class 'ir.PrintStat'> 132180401779664
StatList : new 132180401682800
Lowering <class 'ir.Const'> 132180401779568
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401779472
StatList : new 132180401682896
Lowering <class 'ir.AssignStat'> 132180401779472
navigating children of <class 'ir.PrintStat'> 132180401779328 1
StatList : new 132180401683136
Lowering <class 'ir.Const'> 132180401779424
StatList : new 132180401683328
Lowering <class 'ir.Const'> 132180401779424
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180401779328
StatList : new 132180401683472
Lowering <class 'ir.PrintStat'> 132180401779328
navigating children of <class 'ir.StatList'> 132180401778992 2
navigating children of <class 'ir.BinExpr'> 132180402208832 3
StatList : new 132180401683712
Lowering <class 'ir.Var'> 132180401778896
StatList : new 132180401684000
Lowering <class 'ir.Var'> 132180401778800
StatList : new 132180401684240
Lowering <class 'ir.BinExpr'> 132180402208832
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402208928
StatList : new 132180401684336
Lowering <class 'ir.AssignStat'> 132180402208928
navigating children of <class 'ir.PrintStat'> 132180402209072 1
StatList : new 132180401705120
Lowering <class 'ir.Var'> 132180402208976
StatList : new 132180401705312
Lowering <class 'ir.Var'> 132180402208976
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209072
StatList : new 132180401705456
Lowering <class 'ir.PrintStat'> 132180402209072
Cannot lower 132180401778992 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209744 3
StatList : new 132180401705696
Lowering <class 'ir.Var'> 132180402209504
StatList : new 132180401705888
Lowering <class 'ir.Const'> 132180402209840
StatList : new 132180401706128
Lowering <class 'ir.BinExpr'> 132180402209744
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209600
StatList : new 132180401706224
Lowering <class 'ir.AssignStat'> 132180402209600
successfully navigated attr  step  of <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.BinExpr'> 132180402209312 3
StatList : new 132180401706416
Lowering <class 'ir.Var'> 132180402209216
StatList : new 132180401706704
Lowering <class 'ir.Const'> 132180401779088
StatList : new 132180401706944
Lowering <class 'ir.BinExpr'> 132180402209312
successfully navigated attr  cond  of <class 'ir.ForStat'> 132180402209552
StatList : new 132180401707280
Lowering ForStat 132180402209552 into StatList
StatList : new 132180401707472
Lowering <class 'ir.ForStat'> 132180402209552
navigating children of <class 'ir.PrintStat'> 132180402209936 1
StatList : new 132180401707376
Lowering <class 'ir.Var'> 132180402209456
StatList : new 132180401707712
Lowering <class 'ir.Var'> 132180402209456
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402209936
StatList : new 132180401707856
Lowering <class 'ir.PrintStat'> 132180402209936
navigating children of <class 'ir.PrintStat'> 132180402210128 1
StatList : new 132180401708096
Lowering <class 'ir.Const'> 132180402210032
StatList : new 132180401708288
Lowering <class 'ir.Const'> 132180402210032
successfully navigated attr  expr  of <class 'ir.PrintStat'> 132180402210128
StatList : new 132180401708432
Lowering <class 'ir.PrintStat'> 132180402210128
Cannot lower 132180401786832 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224
Cannot lower 132180402210224 <class 'ir.Block'> 'Block' object has no attribute 'lower'
navigating children of <class 'ir.DefinitionList'> 132180402449280 1
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 2
navigating children of <class 'ir.StatList'> 132180402210272 2
navigating children of <class 'ir.StatList'> 132180402210608 1
navigating children of <class 'ir.StatList'> 132180402211376 2
navigating children of <class 'ir.StatList'> 132180402211280 3
navigating children of <class 'ir.StatList'> 132180402210800 1
navigating children of <class 'ir.StatList'> 132180402211040 1
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 40
navigating children of <class 'ir.StatList'> 132180402212768 2
navigating children of <class 'ir.StatList'> 132180402212816 2
navigating children of <class 'ir.StatList'> 132180402210368 1
navigating children of <class 'ir.StatList'> 132180402212384 2
navigating children of <class 'ir.StatList'> 132180402212480 1
navigating children of <class 'ir.StatList'> 132180402194800 6
navigating children of <class 'ir.StatList'> 132180402193360 3
navigating children of <class 'ir.StatList'> 132180402192592 1
navigating children of <class 'ir.StatList'> 132180402193120 1
navigating children of <class 'ir.StatList'> 132180401796192 1
navigating children of <class 'ir.StatList'> 132180402193936 2
navigating children of <class 'ir.StatList'> 132180402193792 1
navigating children of <class 'ir.StatList'> 132180401795808 1
navigating children of <class 'ir.StatList'> 132180402192880 2
navigating children of <class 'ir.StatList'> 132180402192640 2
navigating children of <class 'ir.StatList'> 132180402212144 1
navigating children of <class 'ir.StatList'> 132180402196432 2
navigating children of <class 'ir.StatList'> 132180402194512 1
navigating children of <class 'ir.StatList'> 132180402178752 5
navigating children of <class 'ir.StatList'> 132180402177552 3
navigating children of <class 'ir.StatList'> 132180402194032 1
navigating children of <class 'ir.StatList'> 132180402176928 1
navigating children of <class 'ir.StatList'> 132180401796960 3
navigating children of <class 'ir.StatList'> 132180402195520 2
navigating children of <class 'ir.StatList'> 132180402195616 3
navigating children of <class 'ir.StatList'> 132180402196096 1
navigating children of <class 'ir.StatList'> 132180402195856 1
navigating children of <class 'ir.StatList'> 132180402194416 2
navigating children of <class 'ir.StatList'> 132180402195088 1
navigating children of <class 'ir.StatList'> 132180402179808 2
navigating children of <class 'ir.StatList'> 132180402179904 1
navigating children of <class 'ir.StatList'> 132180401590432 5
navigating children of <class 'ir.StatList'> 132180401970864 3
navigating children of <class 'ir.StatList'> 132180401970576 1
navigating children of <class 'ir.StatList'> 132180401970288 1
navigating children of <class 'ir.StatList'> 132180401798256 3
navigating children of <class 'ir.StatList'> 132180402177216 5
navigating children of <class 'ir.StatList'> 132180402179568 1
navigating children of <class 'ir.StatList'> 132180402178032 3
navigating children of <class 'ir.StatList'> 132180402178800 3
navigating children of <class 'ir.StatList'> 132180402179376 1
navigating children of <class 'ir.StatList'> 132180402179040 1
navigating children of <class 'ir.StatList'> 132180402178272 1
navigating children of <class 'ir.StatList'> 132180401969616 2
navigating children of <class 'ir.StatList'> 132180401969328 4
navigating children of <class 'ir.StatList'> 132180401968368 3
navigating children of <class 'ir.StatList'> 132180401967408 3
navigating children of <class 'ir.StatList'> 132180402176784 1
navigating children of <class 'ir.StatList'> 132180401967168 1
navigating children of <class 'ir.StatList'> 132180401967936 1
navigating children of <class 'ir.StatList'> 132180401969856 2
navigating children of <class 'ir.StatList'> 132180401970000 3
navigating children of <class 'ir.StatList'> 132180401969280 1
navigating children of <class 'ir.StatList'> 132180401970048 1
navigating children of <class 'ir.StatList'> 132180401590720 2
navigating children of <class 'ir.StatList'> 132180401590624 1
navigating children of <class 'ir.StatList'> 132180401591056 2
navigating children of <class 'ir.StatList'> 132180401590960 1
navigating children of <class 'ir.StatList'> 132180401638944 5
navigating children of <class 'ir.StatList'> 132180401638512 3
navigating children of <class 'ir.StatList'> 132180401638080 1
navigating children of <class 'ir.StatList'> 132180401638272 1
navigating children of <class 'ir.StatList'> 132180401800672 1
navigating children of <class 'ir.StatList'> 132180401637888 5
navigating children of <class 'ir.StatList'> 132180401637456 3
navigating children of <class 'ir.StatList'> 132180401637024 1
navigating children of <class 'ir.StatList'> 132180401637216 1
navigating children of <class 'ir.StatList'> 132180401801056 4
navigating children of <class 'ir.StatList'> 132180401615440 5
navigating children of <class 'ir.StatList'> 132180401592736 4
navigating children of <class 'ir.StatList'> 132180401592160 3
navigating children of <class 'ir.StatList'> 132180401591296 1
navigating children of <class 'ir.StatList'> 132180401591680 1
navigating children of <class 'ir.StatList'> 132180401614912 3
navigating children of <class 'ir.StatList'> 132180401593456 3
navigating children of <class 'ir.StatList'> 132180401592880 1
navigating children of <class 'ir.StatList'> 132180401593216 1
navigating children of <class 'ir.StatList'> 132180401594128 3
navigating children of <class 'ir.StatList'> 132180401593648 1
navigating children of <class 'ir.StatList'> 132180401593888 1
navigating children of <class 'ir.StatList'> 132180401618704 2
navigating children of <class 'ir.StatList'> 132180401618560 4
navigating children of <class 'ir.StatList'> 132180401617312 3
navigating children of <class 'ir.StatList'> 132180401616304 3
navigating children of <class 'ir.StatList'> 132180401615680 1
navigating children of <class 'ir.StatList'> 132180401616064 1
navigating children of <class 'ir.StatList'> 132180401616976 3
navigating children of <class 'ir.StatList'> 132180401616496 1
navigating children of <class 'ir.StatList'> 132180401616736 1
navigating children of <class 'ir.StatList'> 132180401635968 2
navigating children of <class 'ir.StatList'> 132180401635872 3
navigating children of <class 'ir.StatList'> 132180401635440 1
navigating children of <class 'ir.StatList'> 132180401635632 1
navigating children of <class 'ir.StatList'> 132180401636784 2
navigating children of <class 'ir.StatList'> 132180401636688 3
navigating children of <class 'ir.StatList'> 132180401636208 1
navigating children of <class 'ir.StatList'> 132180401636448 1
navigating children of <class 'ir.StatList'> 132180401649792 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943936
navigating children of <class 'ir.StatList'> 132180401649264 3
navigating children of <class 'ir.StatList'> 132180401648736 1
navigating children of <class 'ir.StatList'> 132180401649024 1
navigating children of <class 'ir.StatList'> 132180401647776 2
navigating children of <class 'ir.StatList'> 132180401639376 1
navigating children of <class 'ir.StatList'> 132180401648448 3
navigating children of <class 'ir.StatList'> 132180401648016 1
navigating children of <class 'ir.StatList'> 132180401648208 1
navigating children of <class 'ir.StatList'> 132180401649984 2
navigating children of <class 'ir.StatList'> 132180401649696 1
navigating children of <class 'ir.StatList'> 132180401650512 2
navigating children of <class 'ir.StatList'> 132180401650368 1
navigating children of <class 'ir.StatList'> 132180401456608 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945184
navigating children of <class 'ir.StatList'> 132180401456080 3
navigating children of <class 'ir.StatList'> 132180401455552 1
navigating children of <class 'ir.StatList'> 132180401455840 1
navigating children of <class 'ir.StatList'> 132180401651136 2
navigating children of <class 'ir.StatList'> 132180401650992 1
navigating children of <class 'ir.StatList'> 132180401455264 3
navigating children of <class 'ir.StatList'> 132180401651328 1
navigating children of <class 'ir.StatList'> 132180401651568 1
navigating children of <class 'ir.StatList'> 132180401456992 2
navigating children of <class 'ir.StatList'> 132180401456848 1
navigating children of <class 'ir.StatList'> 132180401457568 2
navigating children of <class 'ir.StatList'> 132180401457424 1
navigating children of <class 'ir.StatList'> 132180401480752 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401914496
navigating children of <class 'ir.StatList'> 132180401480224 3
navigating children of <class 'ir.StatList'> 132180401479792 1
navigating children of <class 'ir.StatList'> 132180401479984 1
navigating children of <class 'ir.StatList'> 132180401458192 2
navigating children of <class 'ir.StatList'> 132180401458048 1
navigating children of <class 'ir.StatList'> 132180401458864 3
navigating children of <class 'ir.StatList'> 132180401458384 1
navigating children of <class 'ir.StatList'> 132180401458624 1
navigating children of <class 'ir.StatList'> 132180401481136 2
navigating children of <class 'ir.StatList'> 132180401480992 1
navigating children of <class 'ir.StatList'> 132180401481712 2
navigating children of <class 'ir.StatList'> 132180401481568 1
navigating children of <class 'ir.StatList'> 132180401489088 9
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916224
navigating children of <class 'ir.StatList'> 132180401488560 3
navigating children of <class 'ir.StatList'> 132180401488032 1
navigating children of <class 'ir.StatList'> 132180401488320 1
navigating children of <class 'ir.StatList'> 132180401482336 2
navigating children of <class 'ir.StatList'> 132180401482192 1
navigating children of <class 'ir.StatList'> 132180401482912 2
navigating children of <class 'ir.StatList'> 132180401482768 1
navigating children of <class 'ir.StatList'> 132180401483584 3
navigating children of <class 'ir.StatList'> 132180401483104 1
navigating children of <class 'ir.StatList'> 132180401483344 1
navigating children of <class 'ir.StatList'> 132180401489472 2
navigating children of <class 'ir.StatList'> 132180401489328 1
navigating children of <class 'ir.StatList'> 132180401490048 2
navigating children of <class 'ir.StatList'> 132180401489904 1
navigating children of <class 'ir.StatList'> 132180401505040 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401917376
navigating children of <class 'ir.StatList'> 132180401504512 3
navigating children of <class 'ir.StatList'> 132180401491632 1
navigating children of <class 'ir.StatList'> 132180401491920 1
navigating children of <class 'ir.StatList'> 132180401490672 2
navigating children of <class 'ir.StatList'> 132180401490528 1
navigating children of <class 'ir.StatList'> 132180401491344 3
navigating children of <class 'ir.StatList'> 132180401490864 1
navigating children of <class 'ir.StatList'> 132180401491104 1
navigating children of <class 'ir.StatList'> 132180401505424 2
navigating children of <class 'ir.StatList'> 132180401505280 1
navigating children of <class 'ir.StatList'> 132180401506000 2
navigating children of <class 'ir.StatList'> 132180401505856 1
navigating children of <class 'ir.StatList'> 132180401529184 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813056
navigating children of <class 'ir.StatList'> 132180401508112 3
navigating children of <class 'ir.StatList'> 132180401507584 1
navigating children of <class 'ir.StatList'> 132180401507872 1
navigating children of <class 'ir.StatList'> 132180401506624 2
navigating children of <class 'ir.StatList'> 132180401506480 1
navigating children of <class 'ir.StatList'> 132180401507296 3
navigating children of <class 'ir.StatList'> 132180401506816 1
navigating children of <class 'ir.StatList'> 132180401507056 1
navigating children of <class 'ir.StatList'> 132180401529568 2
navigating children of <class 'ir.StatList'> 132180401529472 1
navigating children of <class 'ir.StatList'> 132180401530144 2
navigating children of <class 'ir.StatList'> 132180401530000 1
navigating children of <class 'ir.StatList'> 132180401532784 8
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401814352
navigating children of <class 'ir.StatList'> 132180401532256 3
navigating children of <class 'ir.StatList'> 132180401531728 1
navigating children of <class 'ir.StatList'> 132180401532016 1
navigating children of <class 'ir.StatList'> 132180401530768 2
navigating children of <class 'ir.StatList'> 132180401530624 1
navigating children of <class 'ir.StatList'> 132180401531440 3
navigating children of <class 'ir.StatList'> 132180401530960 1
navigating children of <class 'ir.StatList'> 132180401531200 1
navigating children of <class 'ir.StatList'> 132180401668400 2
navigating children of <class 'ir.StatList'> 132180401668304 1
navigating children of <class 'ir.StatList'> 132180401668736 2
navigating children of <class 'ir.StatList'> 132180401668640 1
navigating children of <class 'ir.StatList'> 132180401669312 2
navigating children of <class 'ir.StatList'> 132180401669168 1
navigating children of <class 'ir.StatList'> 132180401681600 10
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780576
navigating children of <class 'ir.StatList'> 132180401681072 3
navigating children of <class 'ir.StatList'> 132180401680544 1
navigating children of <class 'ir.StatList'> 132180401680832 1
navigating children of <class 'ir.StatList'> 132180401670176 2
navigating children of <class 'ir.StatList'> 132180401670080 3
navigating children of <class 'ir.StatList'> 132180401669552 1
navigating children of <class 'ir.StatList'> 132180401669840 1
navigating children of <class 'ir.StatList'> 132180401670752 2
navigating children of <class 'ir.StatList'> 132180401670608 1
navigating children of <class 'ir.StatList'> 132180401671328 2
navigating children of <class 'ir.StatList'> 132180401671184 1
navigating children of <class 'ir.StatList'> 132180401672000 3
navigating children of <class 'ir.StatList'> 132180401671520 1
navigating children of <class 'ir.StatList'> 132180401671760 1
navigating children of <class 'ir.StatList'> 132180401681984 2
navigating children of <class 'ir.StatList'> 132180401681840 1
navigating children of <class 'ir.StatList'> 132180401682560 2
navigating children of <class 'ir.StatList'> 132180401682416 1
navigating children of <class 'ir.StatList'> 132180401682896 2
navigating children of <class 'ir.StatList'> 132180401682800 1
navigating children of <class 'ir.StatList'> 132180401683472 2
navigating children of <class 'ir.StatList'> 132180401683328 1
navigating children of <class 'ir.StatList'> 132180401707472 9
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209168
navigating children of <class 'ir.StatList'> 132180401706944 3
navigating children of <class 'ir.StatList'> 132180401706416 1
navigating children of <class 'ir.StatList'> 132180401706704 1
navigating children of <class 'ir.StatList'> 132180401684336 2
navigating children of <class 'ir.StatList'> 132180401684240 3
navigating children of <class 'ir.StatList'> 132180401683712 1
navigating children of <class 'ir.StatList'> 132180401684000 1
navigating children of <class 'ir.StatList'> 132180401705456 2
navigating children of <class 'ir.StatList'> 132180401705312 1
navigating children of <class 'ir.StatList'> 132180401706128 3
navigating children of <class 'ir.StatList'> 132180401705696 1
navigating children of <class 'ir.StatList'> 132180401705888 1
navigating children of <class 'ir.StatList'> 132180401707856 2
navigating children of <class 'ir.StatList'> 132180401707712 1
navigating children of <class 'ir.StatList'> 132180401708432 2
navigating children of <class 'ir.StatList'> 132180401708288 1
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224

 <class 'ir.Block'> 132180402210224 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 132180402449280 {
	parent = 132180402210224
		children:
		<class 'ir.FunctionDef'> 132180401784048 {
		parent = 132180402449280
			body: 	<class 'ir.Block'> 132180401786400 {
			parent = 132180401784048
				defs: 	<class 'ir.DefinitionList'> 132180401786016 {
				parent = 132180401786400
				}
				body: 	<class 'ir.StatList'> 132180401786160 {
				parent = 132180401786400
					children:
					<class 'ir.StatList'> 132180402210272 {
					parent = 132180401786160
						children:
						<class 'ir.StatList'> 132180402210608 {
						parent = 132180402210272
							children:
							reg int t0 <- 1234
						}
						auto int test <- reg int t0
					}
					<class 'ir.StatList'> 132180402211376 {
					parent = 132180401786160
						children:
						<class 'ir.StatList'> 132180402211280 {
						parent = 132180402211376
							children:
							<class 'ir.StatList'> 132180402210800 {
							parent = 132180402211280
								children:
								reg int t1 <- global int x
							}
							<class 'ir.StatList'> 132180402211040 {
							parent = 132180402211280
								children:
								reg int t2 <- global int x
							}
							reg int32_t t3 <- reg int t1 times reg int t2
						}
						global int squ <- reg int32_t t3
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				auto function square
				
			}
			symbol: 	auto function square
		}
	}
	body: 	<class 'ir.StatList'> 132180401786832 {
	parent = 132180402210224
		children:
		<class 'ir.StatList'> 132180402212768 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180402212816 {
			parent = 132180402212768
				children:
				<class 'ir.StatList'> 132180402210368 {
				parent = 132180402212816
					children:
					reg int t4 <- 1
				}
				reg int t5 <- minus reg int t4
			}
			global int x <- reg int t5
		}
		<class 'ir.StatList'> 132180402212384 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180402212480 {
			parent = 132180402212384
				children:
				read reg int t6
			}
			global int x <- reg int t6
		}
		<class 'ir.StatList'> 132180402194800 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180402193360 {
			parent = 132180402194800
				children:
				<class 'ir.StatList'> 132180402192592 {
				parent = 132180402193360
					children:
					reg int t10 <- global int x
				}
				<class 'ir.StatList'> 132180402193120 {
				parent = 132180402193360
					children:
					reg int t11 <- 100
				}
				reg int32_t t12 <- reg int t10 gtr reg int t11
			}
			branch on reg int32_t t12 to auto label label2
			<class 'ir.StatList'> 132180401796192 {
			parent = 132180402194800
				children:
				<class 'ir.StatList'> 132180402193936 {
				parent = 132180401796192
					children:
					<class 'ir.StatList'> 132180402193792 {
					parent = 132180402193936
						children:
						reg int t14 <- global int x
					}
					print reg int t14
				}
			}
			branch  to auto label label1
			label2: <class 'ir.StatList'> 132180401795808 {
			parent = 132180402194800
				children:
				<class 'ir.StatList'> 132180402192880 {
				parent = 132180401795808
					children:
					<class 'ir.StatList'> 132180402192640 {
					parent = 132180402192880
						children:
						<class 'ir.StatList'> 132180402212144 {
						parent = 132180402192640
							children:
							reg int t7 <- global int x
						}
						reg int t9 <- minus reg int t7
					}
					print reg int t9
				}
			}
			label1: <class 'ir.EmptyStat'> 132180402194128 {
			parent = 132180402194800
			}
		}
		<class 'ir.StatList'> 132180402196432 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180402194512 {
			parent = 132180402196432
				children:
				reg int t15 <- 1
			}
			global int x <- reg int t15
		}
		<class 'ir.StatList'> 132180402178752 {
		parent = 132180401786832
			children:
			label3: <class 'ir.StatList'> 132180402177552 {
			parent = 132180402178752
				children:
				<class 'ir.StatList'> 132180402194032 {
				parent = 132180402177552
					children:
					reg int t21 <- global int x
				}
				<class 'ir.StatList'> 132180402176928 {
				parent = 132180402177552
					children:
					reg int t22 <- 10
				}
				reg int32_t t23 <- reg int t21 leq reg int t22
			}
			branch on not reg int32_t t23 to auto label label4
			<class 'ir.StatList'> 132180401796960 {
			parent = 132180402178752
				children:
				call  to auto function square
				<class 'ir.StatList'> 132180402195520 {
				parent = 132180401796960
					children:
					<class 'ir.StatList'> 132180402195616 {
					parent = 132180402195520
						children:
						<class 'ir.StatList'> 132180402196096 {
						parent = 132180402195616
							children:
							reg int t16 <- global int x
						}
						<class 'ir.StatList'> 132180402195856 {
						parent = 132180402195616
							children:
							reg int t17 <- 1
						}
						reg int32_t t18 <- reg int t16 plus reg int t17
					}
					global int x <- reg int32_t t18
				}
				<class 'ir.StatList'> 132180402194416 {
				parent = 132180401796960
					children:
					<class 'ir.StatList'> 132180402195088 {
					parent = 132180402194416
						children:
						reg int t20 <- global int squ
					}
					print reg int t20
				}
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 132180402178512 {
			parent = 132180402178752
			}
		}
		<class 'ir.StatList'> 132180402179808 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180402179904 {
			parent = 132180402179808
				children:
				reg int t24 <- 101
			}
			global int x <- reg int t24
		}
		<class 'ir.StatList'> 132180401590432 {
		parent = 132180401786832
			children:
			label5: <class 'ir.StatList'> 132180401970864 {
			parent = 132180401590432
				children:
				<class 'ir.StatList'> 132180401970576 {
				parent = 132180401970864
					children:
					reg int t48 <- global int x
				}
				<class 'ir.StatList'> 132180401970288 {
				parent = 132180401970864
					children:
					reg int t49 <- 105
				}
				reg int32_t t50 <- reg int t48 leq reg int t49
			}
			branch on not reg int32_t t50 to auto label label6
			<class 'ir.StatList'> 132180401798256 {
			parent = 132180401590432
				children:
				<class 'ir.StatList'> 132180402177216 {
				parent = 132180401798256
					children:
					<class 'ir.StatList'> 132180402179568 {
					parent = 132180402177216
						children:
						reg int t25 <- global int x
					}
					<class 'ir.StatList'> 132180402178032 {
					parent = 132180402177216
						children:
						<class 'ir.StatList'> 132180402178800 {
						parent = 132180402178032
							children:
							<class 'ir.StatList'> 132180402179376 {
							parent = 132180402178800
								children:
								reg int t26 <- global int x
							}
							<class 'ir.StatList'> 132180402179040 {
							parent = 132180402178800
								children:
								reg int t27 <- 100
							}
							reg int32_t t28 <- reg int t26 minus reg int t27
						}
						<class 'ir.StatList'> 132180402178272 {
						parent = 132180402178032
							children:
							reg int t29 <- 1
						}
						reg int32_t t30 <- reg int32_t t28 times reg int t29
					}
					reg &char t31 <- &(global char[5] arr)
					reg &char t32 <- reg &char t31 plus reg int32_t t30
					[reg &char t32] <- reg int t25
				}
				<class 'ir.StatList'> 132180401969616 {
				parent = 132180401798256
					children:
					<class 'ir.StatList'> 132180401969328 {
					parent = 132180401969616
						children:
						<class 'ir.StatList'> 132180401968368 {
						parent = 132180401969328
							children:
							<class 'ir.StatList'> 132180401967408 {
							parent = 132180401968368
								children:
								<class 'ir.StatList'> 132180402176784 {
								parent = 132180401967408
									children:
									reg int t33 <- global int x
								}
								<class 'ir.StatList'> 132180401967168 {
								parent = 132180401967408
									children:
									reg int t34 <- 100
								}
								reg int32_t t35 <- reg int t33 minus reg int t34
							}
							<class 'ir.StatList'> 132180401967936 {
							parent = 132180401968368
								children:
								reg int t36 <- 1
							}
							reg int32_t t38 <- reg int32_t t35 times reg int t36
						}
						reg &char t43 <- &(global char[5] arr)
						reg &char t44 <- reg &char t43 plus reg int32_t t38
						reg char t42 <- [reg &char t44]
					}
					print reg char t42
				}
				<class 'ir.StatList'> 132180401969856 {
				parent = 132180401798256
					children:
					<class 'ir.StatList'> 132180401970000 {
					parent = 132180401969856
						children:
						<class 'ir.StatList'> 132180401969280 {
						parent = 132180401970000
							children:
							reg int t45 <- global int x
						}
						<class 'ir.StatList'> 132180401970048 {
						parent = 132180401970000
							children:
							reg int t46 <- 1
						}
						reg int32_t t47 <- reg int t45 plus reg int t46
					}
					global int x <- reg int32_t t47
				}
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 132180401971056 {
			parent = 132180401590432
			}
		}
		<class 'ir.StatList'> 132180401590720 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401590624 {
			parent = 132180401590720
				children:
				reg int t51 <- 1
			}
			global int x <- reg int t51
		}
		<class 'ir.StatList'> 132180401591056 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401590960 {
			parent = 132180401591056
				children:
				reg int t52 <- 1
			}
			global int y <- reg int t52
		}
		<class 'ir.StatList'> 132180401638944 {
		parent = 132180401786832
			children:
			label9: <class 'ir.StatList'> 132180401638512 {
			parent = 132180401638944
				children:
				<class 'ir.StatList'> 132180401638080 {
				parent = 132180401638512
					children:
					reg int t92 <- global int x
				}
				<class 'ir.StatList'> 132180401638272 {
				parent = 132180401638512
					children:
					reg int t93 <- 5
				}
				reg int32_t t94 <- reg int t92 leq reg int t93
			}
			branch on not reg int32_t t94 to auto label label10
			<class 'ir.StatList'> 132180401800672 {
			parent = 132180401638944
				children:
				<class 'ir.StatList'> 132180401637888 {
				parent = 132180401800672
					children:
					label7: <class 'ir.StatList'> 132180401637456 {
					parent = 132180401637888
						children:
						<class 'ir.StatList'> 132180401637024 {
						parent = 132180401637456
							children:
							reg int t89 <- global int y
						}
						<class 'ir.StatList'> 132180401637216 {
						parent = 132180401637456
							children:
							reg int t90 <- 5
						}
						reg int32_t t91 <- reg int t89 leq reg int t90
					}
					branch on not reg int32_t t91 to auto label label8
					<class 'ir.StatList'> 132180401801056 {
					parent = 132180401637888
						children:
						<class 'ir.StatList'> 132180401615440 {
						parent = 132180401801056
							children:
							<class 'ir.StatList'> 132180401592736 {
							parent = 132180401615440
								children:
								<class 'ir.StatList'> 132180401592160 {
								parent = 132180401592736
									children:
									<class 'ir.StatList'> 132180401591296 {
									parent = 132180401592160
										children:
										reg int t53 <- global int x
									}
									<class 'ir.StatList'> 132180401591680 {
									parent = 132180401592160
										children:
										reg int t54 <- 1
									}
									reg int32_t t56 <- reg int t53 times reg int t54
								}
								reg &char t58 <- &(global char[5] arr)
								reg &char t59 <- reg &char t58 plus reg int32_t t56
								reg char t57 <- [reg &char t59]
							}
							<class 'ir.StatList'> 132180401614912 {
							parent = 132180401615440
								children:
								<class 'ir.StatList'> 132180401593456 {
								parent = 132180401614912
									children:
									<class 'ir.StatList'> 132180401592880 {
									parent = 132180401593456
										children:
										reg int t60 <- global int x
									}
									<class 'ir.StatList'> 132180401593216 {
									parent = 132180401593456
										children:
										reg int t61 <- 10
									}
									reg int32_t t62 <- reg int t60 times reg int t61
								}
								<class 'ir.StatList'> 132180401594128 {
								parent = 132180401614912
									children:
									<class 'ir.StatList'> 132180401593648 {
									parent = 132180401594128
										children:
										reg int t63 <- global int y
									}
									<class 'ir.StatList'> 132180401593888 {
									parent = 132180401594128
										children:
										reg int t64 <- 2
									}
									reg int32_t t65 <- reg int t63 times reg int t64
								}
								reg int32_t t66 <- reg int32_t t62 plus reg int32_t t65
							}
							reg &short t67 <- &(global short[5, 5] multid)
							reg &short t68 <- reg &short t67 plus reg int32_t t66
							[reg &short t68] <- reg char t57
						}
						<class 'ir.StatList'> 132180401618704 {
						parent = 132180401801056
							children:
							<class 'ir.StatList'> 132180401618560 {
							parent = 132180401618704
								children:
								<class 'ir.StatList'> 132180401617312 {
								parent = 132180401618560
									children:
									<class 'ir.StatList'> 132180401616304 {
									parent = 132180401617312
										children:
										<class 'ir.StatList'> 132180401615680 {
										parent = 132180401616304
											children:
											reg int t69 <- global int x
										}
										<class 'ir.StatList'> 132180401616064 {
										parent = 132180401616304
											children:
											reg int t70 <- 10
										}
										reg int32_t t71 <- reg int t69 times reg int t70
									}
									<class 'ir.StatList'> 132180401616976 {
									parent = 132180401617312
										children:
										<class 'ir.StatList'> 132180401616496 {
										parent = 132180401616976
											children:
											reg int t72 <- global int y
										}
										<class 'ir.StatList'> 132180401616736 {
										parent = 132180401616976
											children:
											reg int t73 <- 2
										}
										reg int32_t t74 <- reg int t72 times reg int t73
									}
									reg int32_t t76 <- reg int32_t t71 plus reg int32_t t74
								}
								reg &short t81 <- &(global short[5, 5] multid)
								reg &short t82 <- reg &short t81 plus reg int32_t t76
								reg short t80 <- [reg &short t82]
							}
							print reg short t80
						}
						<class 'ir.StatList'> 132180401635968 {
						parent = 132180401801056
							children:
							<class 'ir.StatList'> 132180401635872 {
							parent = 132180401635968
								children:
								<class 'ir.StatList'> 132180401635440 {
								parent = 132180401635872
									children:
									reg int t83 <- global int x
								}
								<class 'ir.StatList'> 132180401635632 {
								parent = 132180401635872
									children:
									reg int t84 <- 1
								}
								reg int32_t t85 <- reg int t83 plus reg int t84
							}
							global int x <- reg int32_t t85
						}
						<class 'ir.StatList'> 132180401636784 {
						parent = 132180401801056
							children:
							<class 'ir.StatList'> 132180401636688 {
							parent = 132180401636784
								children:
								<class 'ir.StatList'> 132180401636208 {
								parent = 132180401636688
									children:
									reg int t86 <- global int y
								}
								<class 'ir.StatList'> 132180401636448 {
								parent = 132180401636688
									children:
									reg int t87 <- 1
								}
								reg int32_t t88 <- reg int t86 plus reg int t87
							}
							global int y <- reg int32_t t88
						}
					}
					branch  to auto label label7
					label8: <class 'ir.EmptyStat'> 132180401637648 {
					parent = 132180401637888
					}
				}
			}
			branch  to auto label label9
			label10: <class 'ir.EmptyStat'> 132180401638704 {
			parent = 132180401638944
			}
		}
		<class 'ir.StatList'> 132180401649792 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401943936 {
			parent = 132180401649792
				expr: 	<class 'ir.Const'> 132180401943216 {
				parent = 132180401943936
					value: 	10
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int a
			}
			label11: <class 'ir.StatList'> 132180401649264 {
			parent = 132180401649792
				children:
				<class 'ir.StatList'> 132180401648736 {
				parent = 132180401649264
					children:
					reg int t100 <- auto int a
				}
				<class 'ir.StatList'> 132180401649024 {
				parent = 132180401649264
					children:
					reg int t101 <- 20
				}
				reg int32_t t102 <- reg int t100 leq reg int t101
			}
			branch on not reg int32_t t102 to auto label label13
			<class 'ir.StatList'> 132180401647776 {
			parent = 132180401649792
				children:
				<class 'ir.StatList'> 132180401639376 {
				parent = 132180401647776
					children:
					reg int t96 <- auto int a
				}
				print reg int t96
			}
			<class 'ir.StatList'> 132180401648448 {
			parent = 132180401649792
				children:
				<class 'ir.StatList'> 132180401648016 {
				parent = 132180401648448
					children:
					reg int t97 <- auto int a
				}
				<class 'ir.StatList'> 132180401648208 {
				parent = 132180401648448
					children:
					reg int t98 <- 1
				}
				reg int32_t t99 <- reg int t97 plus reg int t98
			}
			auto int a <- reg int32_t t99
			branch  to auto label label11
			label13: <class 'ir.EmptyStat'> 132180401649504 {
			parent = 132180401649792
			}
		}
		<class 'ir.StatList'> 132180401649984 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401649696 {
			parent = 132180401649984
				children:
				reg int t103 <- 10
			}
			global int i <- reg int t103
		}
		<class 'ir.StatList'> 132180401650512 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401650368 {
			parent = 132180401650512
				children:
				reg int t105 <- 99991
			}
			print reg int t105
		}
		<class 'ir.StatList'> 132180401456608 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401945184 {
			parent = 132180401456608
				expr: 	<class 'ir.Const'> 132180401944704 {
				parent = 132180401945184
					value: 	10
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int i
			}
			label14: <class 'ir.StatList'> 132180401456080 {
			parent = 132180401456608
				children:
				<class 'ir.StatList'> 132180401455552 {
				parent = 132180401456080
					children:
					reg int t111 <- auto int i
				}
				<class 'ir.StatList'> 132180401455840 {
				parent = 132180401456080
					children:
					reg int t112 <- 15
				}
				reg int32_t t113 <- reg int t111 leq reg int t112
			}
			branch on not reg int32_t t113 to auto label label16
			<class 'ir.StatList'> 132180401651136 {
			parent = 132180401456608
				children:
				<class 'ir.StatList'> 132180401650992 {
				parent = 132180401651136
					children:
					reg int t107 <- global int i
				}
				print reg int t107
			}
			<class 'ir.StatList'> 132180401455264 {
			parent = 132180401456608
				children:
				<class 'ir.StatList'> 132180401651328 {
				parent = 132180401455264
					children:
					reg int t108 <- auto int i
				}
				<class 'ir.StatList'> 132180401651568 {
				parent = 132180401455264
					children:
					reg int t109 <- 1
				}
				reg int32_t t110 <- reg int t108 plus reg int t109
			}
			auto int i <- reg int32_t t110
			branch  to auto label label14
			label16: <class 'ir.EmptyStat'> 132180401456320 {
			parent = 132180401456608
			}
		}
		<class 'ir.StatList'> 132180401456992 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401456848 {
			parent = 132180401456992
				children:
				reg int t115 <- 88881
			}
			print reg int t115
		}
		<class 'ir.StatList'> 132180401457568 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401457424 {
			parent = 132180401457568
				children:
				reg int t117 <- 99992
			}
			print reg int t117
		}
		<class 'ir.StatList'> 132180401480752 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401914496 {
			parent = 132180401480752
				expr: 	<class 'ir.Const'> 132180401946240 {
				parent = 132180401914496
					value: 	5
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int j
			}
			label17: <class 'ir.StatList'> 132180401480224 {
			parent = 132180401480752
				children:
				<class 'ir.StatList'> 132180401479792 {
				parent = 132180401480224
					children:
					reg int t123 <- auto int j
				}
				<class 'ir.StatList'> 132180401479984 {
				parent = 132180401480224
					children:
					reg int t124 <- 5
				}
				reg int32_t t125 <- reg int t123 leq reg int t124
			}
			branch on not reg int32_t t125 to auto label label19
			<class 'ir.StatList'> 132180401458192 {
			parent = 132180401480752
				children:
				<class 'ir.StatList'> 132180401458048 {
				parent = 132180401458192
					children:
					reg int t119 <- global int j
				}
				print reg int t119
			}
			<class 'ir.StatList'> 132180401458864 {
			parent = 132180401480752
				children:
				<class 'ir.StatList'> 132180401458384 {
				parent = 132180401458864
					children:
					reg int t120 <- auto int j
				}
				<class 'ir.StatList'> 132180401458624 {
				parent = 132180401458864
					children:
					reg int t121 <- 1
				}
				reg int32_t t122 <- reg int t120 plus reg int t121
			}
			auto int j <- reg int32_t t122
			branch  to auto label label17
			label19: <class 'ir.EmptyStat'> 132180401480464 {
			parent = 132180401480752
			}
		}
		<class 'ir.StatList'> 132180401481136 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401480992 {
			parent = 132180401481136
				children:
				reg int t127 <- 88882
			}
			print reg int t127
		}
		<class 'ir.StatList'> 132180401481712 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401481568 {
			parent = 132180401481712
				children:
				reg int t129 <- 99993
			}
			print reg int t129
		}
		<class 'ir.StatList'> 132180401489088 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401916224 {
			parent = 132180401489088
				expr: 	<class 'ir.Const'> 132180401915552 {
				parent = 132180401916224
					value: 	10
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int k
			}
			label20: <class 'ir.StatList'> 132180401488560 {
			parent = 132180401489088
				children:
				<class 'ir.StatList'> 132180401488032 {
				parent = 132180401488560
					children:
					reg int t137 <- auto int k
				}
				<class 'ir.StatList'> 132180401488320 {
				parent = 132180401488560
					children:
					reg int t138 <- 5
				}
				reg int32_t t139 <- reg int t137 leq reg int t138
			}
			branch on not reg int32_t t139 to auto label label22
			<class 'ir.StatList'> 132180401482336 {
			parent = 132180401489088
				children:
				<class 'ir.StatList'> 132180401482192 {
				parent = 132180401482336
					children:
					reg int t131 <- 77777
				}
				print reg int t131
			}
			<class 'ir.StatList'> 132180401482912 {
			parent = 132180401489088
				children:
				<class 'ir.StatList'> 132180401482768 {
				parent = 132180401482912
					children:
					reg int t133 <- global int k
				}
				print reg int t133
			}
			<class 'ir.StatList'> 132180401483584 {
			parent = 132180401489088
				children:
				<class 'ir.StatList'> 132180401483104 {
				parent = 132180401483584
					children:
					reg int t134 <- auto int k
				}
				<class 'ir.StatList'> 132180401483344 {
				parent = 132180401483584
					children:
					reg int t135 <- 1
				}
				reg int32_t t136 <- reg int t134 plus reg int t135
			}
			auto int k <- reg int32_t t136
			branch  to auto label label20
			label22: <class 'ir.EmptyStat'> 132180401488800 {
			parent = 132180401489088
			}
		}
		<class 'ir.StatList'> 132180401489472 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401489328 {
			parent = 132180401489472
				children:
				reg int t141 <- 88883
			}
			print reg int t141
		}
		<class 'ir.StatList'> 132180401490048 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401489904 {
			parent = 132180401490048
				children:
				reg int t143 <- 99994
			}
			print reg int t143
		}
		<class 'ir.StatList'> 132180401505040 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401917376 {
			parent = 132180401505040
				expr: 	<class 'ir.Const'> 132180401917328 {
				parent = 132180401917376
					value: 	1
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int m
			}
			label23: <class 'ir.StatList'> 132180401504512 {
			parent = 132180401505040
				children:
				<class 'ir.StatList'> 132180401491632 {
				parent = 132180401504512
					children:
					reg int t149 <- auto int m
				}
				<class 'ir.StatList'> 132180401491920 {
				parent = 132180401504512
					children:
					reg int t150 <- 6
				}
				reg int32_t t151 <- reg int t149 leq reg int t150
			}
			branch on not reg int32_t t151 to auto label label25
			<class 'ir.StatList'> 132180401490672 {
			parent = 132180401505040
				children:
				<class 'ir.StatList'> 132180401490528 {
				parent = 132180401490672
					children:
					reg int t145 <- global int m
				}
				print reg int t145
			}
			<class 'ir.StatList'> 132180401491344 {
			parent = 132180401505040
				children:
				<class 'ir.StatList'> 132180401490864 {
				parent = 132180401491344
					children:
					reg int t146 <- auto int m
				}
				<class 'ir.StatList'> 132180401491104 {
				parent = 132180401491344
					children:
					reg int t147 <- 1
				}
				reg int32_t t148 <- reg int t146 plus reg int t147
			}
			auto int m <- reg int32_t t148
			branch  to auto label label23
			label25: <class 'ir.EmptyStat'> 132180401504752 {
			parent = 132180401505040
			}
		}
		<class 'ir.StatList'> 132180401505424 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401505280 {
			parent = 132180401505424
				children:
				reg int t153 <- 88884
			}
			print reg int t153
		}
		<class 'ir.StatList'> 132180401506000 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401505856 {
			parent = 132180401506000
				children:
				reg int t155 <- 99995
			}
			print reg int t155
		}
		<class 'ir.StatList'> 132180401529184 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401813056 {
			parent = 132180401529184
				expr: 	<class 'ir.Const'> 132180401812144 {
				parent = 132180401813056
					value: 	1
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int n
			}
			label26: <class 'ir.StatList'> 132180401508112 {
			parent = 132180401529184
				children:
				<class 'ir.StatList'> 132180401507584 {
				parent = 132180401508112
					children:
					reg int t161 <- auto int n
				}
				<class 'ir.StatList'> 132180401507872 {
				parent = 132180401508112
					children:
					reg int t162 <- 7
				}
				reg int32_t t163 <- reg int t161 leq reg int t162
			}
			branch on not reg int32_t t163 to auto label label28
			<class 'ir.StatList'> 132180401506624 {
			parent = 132180401529184
				children:
				<class 'ir.StatList'> 132180401506480 {
				parent = 132180401506624
					children:
					reg int t157 <- global int n
				}
				print reg int t157
			}
			<class 'ir.StatList'> 132180401507296 {
			parent = 132180401529184
				children:
				<class 'ir.StatList'> 132180401506816 {
				parent = 132180401507296
					children:
					reg int t158 <- auto int n
				}
				<class 'ir.StatList'> 132180401507056 {
				parent = 132180401507296
					children:
					reg int t159 <- 1
				}
				reg int32_t t160 <- reg int t158 plus reg int t159
			}
			auto int n <- reg int32_t t160
			branch  to auto label label26
			label28: <class 'ir.EmptyStat'> 132180401528896 {
			parent = 132180401529184
			}
		}
		<class 'ir.StatList'> 132180401529568 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401529472 {
			parent = 132180401529568
				children:
				reg int t165 <- 88885
			}
			print reg int t165
		}
		<class 'ir.StatList'> 132180401530144 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401530000 {
			parent = 132180401530144
				children:
				reg int t167 <- 99996
			}
			print reg int t167
		}
		<class 'ir.StatList'> 132180401532784 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401814352 {
			parent = 132180401532784
				expr: 	<class 'ir.Const'> 132180401813872 {
				parent = 132180401814352
					value: 	10
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int p
			}
			label29: <class 'ir.StatList'> 132180401532256 {
			parent = 132180401532784
				children:
				<class 'ir.StatList'> 132180401531728 {
				parent = 132180401532256
					children:
					reg int t173 <- auto int p
				}
				<class 'ir.StatList'> 132180401532016 {
				parent = 132180401532256
					children:
					reg int t174 <- 12
				}
				reg int32_t t175 <- reg int t173 leq reg int t174
			}
			branch on not reg int32_t t175 to auto label label31
			<class 'ir.StatList'> 132180401530768 {
			parent = 132180401532784
				children:
				<class 'ir.StatList'> 132180401530624 {
				parent = 132180401530768
					children:
					reg int t169 <- global int p
				}
				print reg int t169
			}
			<class 'ir.StatList'> 132180401531440 {
			parent = 132180401532784
				children:
				<class 'ir.StatList'> 132180401530960 {
				parent = 132180401531440
					children:
					reg int t170 <- auto int p
				}
				<class 'ir.StatList'> 132180401531200 {
				parent = 132180401531440
					children:
					reg int t171 <- 1
				}
				reg int32_t t172 <- reg int t170 plus reg int t171
			}
			auto int p <- reg int32_t t172
			branch  to auto label label29
			label31: <class 'ir.EmptyStat'> 132180401532496 {
			parent = 132180401532784
			}
		}
		<class 'ir.StatList'> 132180401668400 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401668304 {
			parent = 132180401668400
				children:
				reg int t177 <- 88886
			}
			print reg int t177
		}
		<class 'ir.StatList'> 132180401668736 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401668640 {
			parent = 132180401668736
				children:
				reg int t178 <- 0
			}
			global int sum <- reg int t178
		}
		<class 'ir.StatList'> 132180401669312 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401669168 {
			parent = 132180401669312
				children:
				reg int t180 <- 99997
			}
			print reg int t180
		}
		<class 'ir.StatList'> 132180401681600 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180401780576 {
			parent = 132180401681600
				expr: 	<class 'ir.Const'> 132180401782496 {
				parent = 132180401780576
					value: 	1
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int q
			}
			label32: <class 'ir.StatList'> 132180401681072 {
			parent = 132180401681600
				children:
				<class 'ir.StatList'> 132180401680544 {
				parent = 132180401681072
					children:
					reg int t191 <- auto int q
				}
				<class 'ir.StatList'> 132180401680832 {
				parent = 132180401681072
					children:
					reg int t192 <- 5
				}
				reg int32_t t193 <- reg int t191 leq reg int t192
			}
			branch on not reg int32_t t193 to auto label label34
			<class 'ir.StatList'> 132180401670176 {
			parent = 132180401681600
				children:
				<class 'ir.StatList'> 132180401670080 {
				parent = 132180401670176
					children:
					<class 'ir.StatList'> 132180401669552 {
					parent = 132180401670080
						children:
						reg int t181 <- global int sum
					}
					<class 'ir.StatList'> 132180401669840 {
					parent = 132180401670080
						children:
						reg int t182 <- global int q
					}
					reg int32_t t183 <- reg int t181 plus reg int t182
				}
				global int sum <- reg int32_t t183
			}
			<class 'ir.StatList'> 132180401670752 {
			parent = 132180401681600
				children:
				<class 'ir.StatList'> 132180401670608 {
				parent = 132180401670752
					children:
					reg int t185 <- global int q
				}
				print reg int t185
			}
			<class 'ir.StatList'> 132180401671328 {
			parent = 132180401681600
				children:
				<class 'ir.StatList'> 132180401671184 {
				parent = 132180401671328
					children:
					reg int t187 <- global int sum
				}
				print reg int t187
			}
			<class 'ir.StatList'> 132180401672000 {
			parent = 132180401681600
				children:
				<class 'ir.StatList'> 132180401671520 {
				parent = 132180401672000
					children:
					reg int t188 <- auto int q
				}
				<class 'ir.StatList'> 132180401671760 {
				parent = 132180401672000
					children:
					reg int t189 <- 1
				}
				reg int32_t t190 <- reg int t188 plus reg int t189
			}
			auto int q <- reg int32_t t190
			branch  to auto label label32
			label34: <class 'ir.EmptyStat'> 132180401681312 {
			parent = 132180401681600
			}
		}
		<class 'ir.StatList'> 132180401681984 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401681840 {
			parent = 132180401681984
				children:
				reg int t195 <- global int sum
			}
			print reg int t195
		}
		<class 'ir.StatList'> 132180401682560 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401682416 {
			parent = 132180401682560
				children:
				reg int t197 <- 88887
			}
			print reg int t197
		}
		<class 'ir.StatList'> 132180401682896 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401682800 {
			parent = 132180401682896
				children:
				reg int t198 <- 100
			}
			global int x <- reg int t198
		}
		<class 'ir.StatList'> 132180401683472 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401683328 {
			parent = 132180401683472
				children:
				reg int t200 <- 99998
			}
			print reg int t200
		}
		<class 'ir.StatList'> 132180401707472 {
		parent = 132180401786832
			children:
			<class 'ir.AssignStat'> 132180402209168 {
			parent = 132180401707472
				expr: 	<class 'ir.Const'> 132180401779184 {
				parent = 132180402209168
					value: 	1
					symbol: 	None
				}
				offset: 	None
				symbol: 	auto int r
			}
			label35: <class 'ir.StatList'> 132180401706944 {
			parent = 132180401707472
				children:
				<class 'ir.StatList'> 132180401706416 {
				parent = 132180401706944
					children:
					reg int t209 <- auto int r
				}
				<class 'ir.StatList'> 132180401706704 {
				parent = 132180401706944
					children:
					reg int t210 <- 3
				}
				reg int32_t t211 <- reg int t209 leq reg int t210
			}
			branch on not reg int32_t t211 to auto label label37
			<class 'ir.StatList'> 132180401684336 {
			parent = 132180401707472
				children:
				<class 'ir.StatList'> 132180401684240 {
				parent = 132180401684336
					children:
					<class 'ir.StatList'> 132180401683712 {
					parent = 132180401684240
						children:
						reg int t201 <- global int x
					}
					<class 'ir.StatList'> 132180401684000 {
					parent = 132180401684240
						children:
						reg int t202 <- global int r
					}
					reg int32_t t203 <- reg int t201 plus reg int t202
				}
				global int x <- reg int32_t t203
			}
			<class 'ir.StatList'> 132180401705456 {
			parent = 132180401707472
				children:
				<class 'ir.StatList'> 132180401705312 {
				parent = 132180401705456
					children:
					reg int t205 <- global int x
				}
				print reg int t205
			}
			<class 'ir.StatList'> 132180401706128 {
			parent = 132180401707472
				children:
				<class 'ir.StatList'> 132180401705696 {
				parent = 132180401706128
					children:
					reg int t206 <- auto int r
				}
				<class 'ir.StatList'> 132180401705888 {
				parent = 132180401706128
					children:
					reg int t207 <- 1
				}
				reg int32_t t208 <- reg int t206 plus reg int t207
			}
			auto int r <- reg int32_t t208
			branch  to auto label label35
			label37: <class 'ir.EmptyStat'> 132180401707184 {
			parent = 132180401707472
			}
		}
		<class 'ir.StatList'> 132180401707856 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401707712 {
			parent = 132180401707856
				children:
				reg int t213 <- global int x
			}
			print reg int t213
		}
		<class 'ir.StatList'> 132180401708432 {
		parent = 132180401786832
			children:
			<class 'ir.StatList'> 132180401708288 {
			parent = 132180401708432
				children:
				reg int t215 <- 88888
			}
			print reg int t215
		}
	}
	global_symtab: 	SymbolTable:
	
} 

<class 'ir.DefinitionList'> 132180401786016
<class 'ir.LoadImmStat'> 132180402210656
<class 'ir.StatList'> 132180402210608
Flattening 132180402210608 into 132180402210272
<class 'ir.StoreStat'> 132180402210320
<class 'ir.StatList'> 132180402210272
Flattening 132180402210272 into 132180401786160
<class 'ir.LoadStat'> 132180402210560
<class 'ir.StatList'> 132180402210800
Flattening 132180402210800 into 132180402211280
<class 'ir.LoadStat'> 132180402210992
<class 'ir.StatList'> 132180402211040
Flattening 132180402211040 into 132180402211280
<class 'ir.BinStat'> 132180402211136
<class 'ir.StatList'> 132180402211280
Flattening 132180402211280 into 132180402211376
<class 'ir.StoreStat'> 132180402211424
<class 'ir.StatList'> 132180402211376
Flattening 132180402211376 into 132180401786160
<class 'ir.StatList'> 132180401786160
Not flattening 132180401786160 into 132180401786400 of type <class 'ir.Block'>
<class 'ir.Block'> 132180401786400
<class 'ir.FunctionDef'> 132180401784048
<class 'ir.DefinitionList'> 132180402449280
<class 'ir.LoadImmStat'> 132180402210512
<class 'ir.StatList'> 132180402210368
Flattening 132180402210368 into 132180402212816
<class 'ir.UnaryStat'> 132180402211616
<class 'ir.StatList'> 132180402212816
Flattening 132180402212816 into 132180402212768
<class 'ir.StoreStat'> 132180402212720
<class 'ir.StatList'> 132180402212768
Flattening 132180402212768 into 132180401786832
<class 'ir.ReadCommand'> 132180402212576
<class 'ir.StatList'> 132180402212480
Flattening 132180402212480 into 132180402212384
<class 'ir.StoreStat'> 132180402212336
<class 'ir.StatList'> 132180402212384
Flattening 132180402212384 into 132180401786832
<class 'ir.LoadStat'> 132180402192688
<class 'ir.StatList'> 132180402192592
Flattening 132180402192592 into 132180402193360
<class 'ir.LoadImmStat'> 132180402193072
<class 'ir.StatList'> 132180402193120
Flattening 132180402193120 into 132180402193360
<class 'ir.BinStat'> 132180402193216
<class 'ir.StatList'> 132180402193360
Flattening 132180402193360 into 132180402194800
<class 'ir.BranchStat'> 132180402194896
<class 'ir.LoadStat'> 132180402193600
<class 'ir.StatList'> 132180402193792
Flattening 132180402193792 into 132180402193936
<class 'ir.PrintCommand'> 132180402193888
<class 'ir.StatList'> 132180402193936
Flattening 132180402193936 into 132180401796192
<class 'ir.StatList'> 132180401796192
Flattening 132180401796192 into 132180402194800
<class 'ir.BranchStat'> 132180402194944
<class 'ir.LoadStat'> 132180402212192
<class 'ir.StatList'> 132180402212144
Flattening 132180402212144 into 132180402192640
<class 'ir.UnaryStat'> 132180402192496
<class 'ir.StatList'> 132180402192640
Flattening 132180402192640 into 132180402192880
<class 'ir.PrintCommand'> 132180402192832
<class 'ir.StatList'> 132180402192880
Flattening 132180402192880 into 132180401795808
<class 'ir.StatList'> 132180401795808
Flattening 132180401795808 into 132180402194800
<class 'ir.EmptyStat'> 132180402194128
<class 'ir.StatList'> 132180402194800
Flattening 132180402194800 into 132180401786832
<class 'ir.LoadImmStat'> 132180402194608
<class 'ir.StatList'> 132180402194512
Flattening 132180402194512 into 132180402196432
<class 'ir.StoreStat'> 132180402196384
<class 'ir.StatList'> 132180402196432
Flattening 132180402196432 into 132180401786832
<class 'ir.LoadStat'> 132180402196288
<class 'ir.StatList'> 132180402194032
Flattening 132180402194032 into 132180402177552
<class 'ir.LoadImmStat'> 132180402176880
<class 'ir.StatList'> 132180402176928
Flattening 132180402176928 into 132180402177552
<class 'ir.BinStat'> 132180402177408
<class 'ir.StatList'> 132180402177552
Flattening 132180402177552 into 132180402178752
<class 'ir.BranchStat'> 132180402178656
<class 'ir.BranchStat'> 132180402196192
<class 'ir.LoadStat'> 132180402196240
<class 'ir.StatList'> 132180402196096
Flattening 132180402196096 into 132180402195616
<class 'ir.LoadImmStat'> 132180402195904
<class 'ir.StatList'> 132180402195856
Flattening 132180402195856 into 132180402195616
<class 'ir.BinStat'> 132180402195760
<class 'ir.StatList'> 132180402195616
Flattening 132180402195616 into 132180402195520
<class 'ir.StoreStat'> 132180402195472
<class 'ir.StatList'> 132180402195520
Flattening 132180402195520 into 132180401796960
<class 'ir.LoadStat'> 132180402195376
<class 'ir.StatList'> 132180402195088
Flattening 132180402195088 into 132180402194416
<class 'ir.PrintCommand'> 132180402194992
<class 'ir.StatList'> 132180402194416
Flattening 132180402194416 into 132180401796960
<class 'ir.StatList'> 132180401796960
Flattening 132180401796960 into 132180402178752
<class 'ir.BranchStat'> 132180402178608
<class 'ir.EmptyStat'> 132180402178512
<class 'ir.StatList'> 132180402178752
Flattening 132180402178752 into 132180401786832
<class 'ir.LoadImmStat'> 132180402179952
<class 'ir.StatList'> 132180402179904
Flattening 132180402179904 into 132180402179808
<class 'ir.StoreStat'> 132180402179760
<class 'ir.StatList'> 132180402179808
Flattening 132180402179808 into 132180401786832
<class 'ir.LoadStat'> 132180401970624
<class 'ir.StatList'> 132180401970576
Flattening 132180401970576 into 132180401970864
<class 'ir.LoadImmStat'> 132180401970384
<class 'ir.StatList'> 132180401970288
Flattening 132180401970288 into 132180401970864
<class 'ir.BinStat'> 132180401970720
<class 'ir.StatList'> 132180401970864
Flattening 132180401970864 into 132180401590432
<class 'ir.BranchStat'> 132180401971152
<class 'ir.LoadStat'> 132180402179616
<class 'ir.StatList'> 132180402179568
Flattening 132180402179568 into 132180402177216
<class 'ir.LoadStat'> 132180402179424
<class 'ir.StatList'> 132180402179376
Flattening 132180402179376 into 132180402178800
<class 'ir.LoadImmStat'> 132180402179088
<class 'ir.StatList'> 132180402179040
Flattening 132180402179040 into 132180402178800
<class 'ir.BinStat'> 132180402178944
<class 'ir.StatList'> 132180402178800
Flattening 132180402178800 into 132180402178032
<class 'ir.LoadImmStat'> 132180402178320
<class 'ir.StatList'> 132180402178272
Flattening 132180402178272 into 132180402178032
<class 'ir.BinStat'> 132180402178176
<class 'ir.StatList'> 132180402178032
Flattening 132180402178032 into 132180402177216
<class 'ir.LoadPtrToSym'> 132180402177792
<class 'ir.BinStat'> 132180402177312
<class 'ir.StoreStat'> 132180402177264
<class 'ir.StatList'> 132180402177216
Flattening 132180402177216 into 132180401798256
<class 'ir.LoadStat'> 132180402177024
<class 'ir.StatList'> 132180402176784
Flattening 132180402176784 into 132180401967408
<class 'ir.LoadImmStat'> 132180402176496
<class 'ir.StatList'> 132180401967168
Flattening 132180401967168 into 132180401967408
<class 'ir.BinStat'> 132180401967264
<class 'ir.StatList'> 132180401967408
Flattening 132180401967408 into 132180401968368
<class 'ir.LoadImmStat'> 132180401967744
<class 'ir.StatList'> 132180401967936
Flattening 132180401967936 into 132180401968368
<class 'ir.BinStat'> 132180401968752
<class 'ir.StatList'> 132180401968368
Flattening 132180401968368 into 132180401969328
<class 'ir.LoadPtrToSym'> 132180401968800
<class 'ir.BinStat'> 132180401969136
<class 'ir.LoadStat'> 132180401969184
<class 'ir.StatList'> 132180401969328
Flattening 132180401969328 into 132180401969616
<class 'ir.PrintCommand'> 132180401969664
<class 'ir.StatList'> 132180401969616
Flattening 132180401969616 into 132180401798256
<class 'ir.LoadStat'> 132180401969376
<class 'ir.StatList'> 132180401969280
Flattening 132180401969280 into 132180401970000
<class 'ir.LoadImmStat'> 132180401969904
<class 'ir.StatList'> 132180401970048
Flattening 132180401970048 into 132180401970000
<class 'ir.BinStat'> 132180401970192
<class 'ir.StatList'> 132180401970000
Flattening 132180401970000 into 132180401969856
<class 'ir.StoreStat'> 132180401970336
<class 'ir.StatList'> 132180401969856
Flattening 132180401969856 into 132180401798256
<class 'ir.StatList'> 132180401798256
Flattening 132180401798256 into 132180401590432
<class 'ir.BranchStat'> 132180401590336
<class 'ir.EmptyStat'> 132180401971056
<class 'ir.StatList'> 132180401590432
Flattening 132180401590432 into 132180401786832
<class 'ir.LoadImmStat'> 132180401590576
<class 'ir.StatList'> 132180401590624
Flattening 132180401590624 into 132180401590720
<class 'ir.StoreStat'> 132180401590768
<class 'ir.StatList'> 132180401590720
Flattening 132180401590720 into 132180401786832
<class 'ir.LoadImmStat'> 132180401590912
<class 'ir.StatList'> 132180401590960
Flattening 132180401590960 into 132180401591056
<class 'ir.StoreStat'> 132180401591104
<class 'ir.StatList'> 132180401591056
Flattening 132180401591056 into 132180401786832
<class 'ir.LoadStat'> 132180401638032
<class 'ir.StatList'> 132180401638080
Flattening 132180401638080 into 132180401638512
<class 'ir.LoadImmStat'> 132180401638224
<class 'ir.StatList'> 132180401638272
Flattening 132180401638272 into 132180401638512
<class 'ir.BinStat'> 132180401638368
<class 'ir.StatList'> 132180401638512
Flattening 132180401638512 into 132180401638944
<class 'ir.BranchStat'> 132180401638848
<class 'ir.LoadStat'> 132180401636976
<class 'ir.StatList'> 132180401637024
Flattening 132180401637024 into 132180401637456
<class 'ir.LoadImmStat'> 132180401637168
<class 'ir.StatList'> 132180401637216
Flattening 132180401637216 into 132180401637456
<class 'ir.BinStat'> 132180401637312
<class 'ir.StatList'> 132180401637456
Flattening 132180401637456 into 132180401637888
<class 'ir.BranchStat'> 132180401637792
<class 'ir.LoadStat'> 132180401591248
<class 'ir.StatList'> 132180401591296
Flattening 132180401591296 into 132180401592160
<class 'ir.LoadImmStat'> 132180401591632
<class 'ir.StatList'> 132180401591680
Flattening 132180401591680 into 132180401592160
<class 'ir.BinStat'> 132180401591392
<class 'ir.StatList'> 132180401592160
Flattening 132180401592160 into 132180401592736
<class 'ir.LoadPtrToSym'> 132180401592448
<class 'ir.BinStat'> 132180401592640
<class 'ir.LoadStat'> 132180401592688
<class 'ir.StatList'> 132180401592736
Flattening 132180401592736 into 132180401615440
<class 'ir.LoadStat'> 132180401592832
<class 'ir.StatList'> 132180401592880
Flattening 132180401592880 into 132180401593456
<class 'ir.LoadImmStat'> 132180401593168
<class 'ir.StatList'> 132180401593216
Flattening 132180401593216 into 132180401593456
<class 'ir.BinStat'> 132180401593312
<class 'ir.StatList'> 132180401593456
Flattening 132180401593456 into 132180401614912
<class 'ir.LoadStat'> 132180401593600
<class 'ir.StatList'> 132180401593648
Flattening 132180401593648 into 132180401594128
<class 'ir.LoadImmStat'> 132180401593840
<class 'ir.StatList'> 132180401593888
Flattening 132180401593888 into 132180401594128
<class 'ir.BinStat'> 132180401593984
<class 'ir.StatList'> 132180401594128
Flattening 132180401594128 into 132180401614912
<class 'ir.BinStat'> 132180401594224
<class 'ir.StatList'> 132180401614912
Flattening 132180401614912 into 132180401615440
<class 'ir.LoadPtrToSym'> 132180401615152
<class 'ir.BinStat'> 132180401615344
<class 'ir.StoreStat'> 132180401615392
<class 'ir.StatList'> 132180401615440
Flattening 132180401615440 into 132180401801056
<class 'ir.LoadStat'> 132180401615632
<class 'ir.StatList'> 132180401615680
Flattening 132180401615680 into 132180401616304
<class 'ir.LoadImmStat'> 132180401616016
<class 'ir.StatList'> 132180401616064
Flattening 132180401616064 into 132180401616304
<class 'ir.BinStat'> 132180401616160
<class 'ir.StatList'> 132180401616304
Flattening 132180401616304 into 132180401617312
<class 'ir.LoadStat'> 132180401616448
<class 'ir.StatList'> 132180401616496
Flattening 132180401616496 into 132180401616976
<class 'ir.LoadImmStat'> 132180401616688
<class 'ir.StatList'> 132180401616736
Flattening 132180401616736 into 132180401616976
<class 'ir.BinStat'> 132180401616832
<class 'ir.StatList'> 132180401616976
Flattening 132180401616976 into 132180401617312
<class 'ir.BinStat'> 132180401615728
<class 'ir.StatList'> 132180401617312
Flattening 132180401617312 into 132180401618560
<class 'ir.LoadPtrToSym'> 132180401618176
<class 'ir.BinStat'> 132180401618464
<class 'ir.LoadStat'> 132180401618512
<class 'ir.StatList'> 132180401618560
Flattening 132180401618560 into 132180401618704
<class 'ir.PrintCommand'> 132180401618656
<class 'ir.StatList'> 132180401618704
Flattening 132180401618704 into 132180401801056
<class 'ir.LoadStat'> 132180401635392
<class 'ir.StatList'> 132180401635440
Flattening 132180401635440 into 132180401635872
<class 'ir.LoadImmStat'> 132180401635584
<class 'ir.StatList'> 132180401635632
Flattening 132180401635632 into 132180401635872
<class 'ir.BinStat'> 132180401635728
<class 'ir.StatList'> 132180401635872
Flattening 132180401635872 into 132180401635968
<class 'ir.StoreStat'> 132180401636016
<class 'ir.StatList'> 132180401635968
Flattening 132180401635968 into 132180401801056
<class 'ir.LoadStat'> 132180401636160
<class 'ir.StatList'> 132180401636208
Flattening 132180401636208 into 132180401636688
<class 'ir.LoadImmStat'> 132180401636400
<class 'ir.StatList'> 132180401636448
Flattening 132180401636448 into 132180401636688
<class 'ir.BinStat'> 132180401636544
<class 'ir.StatList'> 132180401636688
Flattening 132180401636688 into 132180401636784
<class 'ir.StoreStat'> 132180401636832
<class 'ir.StatList'> 132180401636784
Flattening 132180401636784 into 132180401801056
<class 'ir.StatList'> 132180401801056
Flattening 132180401801056 into 132180401637888
<class 'ir.BranchStat'> 132180401637744
<class 'ir.EmptyStat'> 132180401637648
<class 'ir.StatList'> 132180401637888
Flattening 132180401637888 into 132180401800672
<class 'ir.StatList'> 132180401800672
Flattening 132180401800672 into 132180401638944
<class 'ir.BranchStat'> 132180401638800
<class 'ir.EmptyStat'> 132180401638704
<class 'ir.StatList'> 132180401638944
Flattening 132180401638944 into 132180401786832
<class 'ir.Const'> 132180401943216
<class 'ir.AssignStat'> 132180401943936
<class 'ir.LoadStat'> 132180401648688
<class 'ir.StatList'> 132180401648736
Flattening 132180401648736 into 132180401649264
<class 'ir.LoadImmStat'> 132180401648976
<class 'ir.StatList'> 132180401649024
Flattening 132180401649024 into 132180401649264
<class 'ir.BinStat'> 132180401649120
<class 'ir.StatList'> 132180401649264
Flattening 132180401649264 into 132180401649792
<class 'ir.BranchStat'> 132180401649648
<class 'ir.LoadStat'> 132180401639184
<class 'ir.StatList'> 132180401639376
Flattening 132180401639376 into 132180401647776
<class 'ir.PrintCommand'> 132180401647728
<class 'ir.StatList'> 132180401647776
Flattening 132180401647776 into 132180401649792
<class 'ir.LoadStat'> 132180401647968
<class 'ir.StatList'> 132180401648016
Flattening 132180401648016 into 132180401648448
<class 'ir.LoadImmStat'> 132180401648160
<class 'ir.StatList'> 132180401648208
Flattening 132180401648208 into 132180401648448
<class 'ir.BinStat'> 132180401648304
<class 'ir.StatList'> 132180401648448
Flattening 132180401648448 into 132180401649792
<class 'ir.StoreStat'> 132180401648592
<class 'ir.BranchStat'> 132180401649744
<class 'ir.EmptyStat'> 132180401649504
<class 'ir.StatList'> 132180401649792
Flattening 132180401649792 into 132180401786832
<class 'ir.LoadImmStat'> 132180401649600
<class 'ir.StatList'> 132180401649696
Flattening 132180401649696 into 132180401649984
<class 'ir.StoreStat'> 132180401649888
<class 'ir.StatList'> 132180401649984
Flattening 132180401649984 into 132180401786832
<class 'ir.LoadImmStat'> 132180401650080
<class 'ir.StatList'> 132180401650368
Flattening 132180401650368 into 132180401650512
<class 'ir.PrintCommand'> 132180401650464
<class 'ir.StatList'> 132180401650512
Flattening 132180401650512 into 132180401786832
<class 'ir.Const'> 132180401944704
<class 'ir.AssignStat'> 132180401945184
<class 'ir.LoadStat'> 132180401455504
<class 'ir.StatList'> 132180401455552
Flattening 132180401455552 into 132180401456080
<class 'ir.LoadImmStat'> 132180401455792
<class 'ir.StatList'> 132180401455840
Flattening 132180401455840 into 132180401456080
<class 'ir.BinStat'> 132180401455936
<class 'ir.StatList'> 132180401456080
Flattening 132180401456080 into 132180401456608
<class 'ir.BranchStat'> 132180401456464
<class 'ir.LoadStat'> 132180401650800
<class 'ir.StatList'> 132180401650992
Flattening 132180401650992 into 132180401651136
<class 'ir.PrintCommand'> 132180401651088
<class 'ir.StatList'> 132180401651136
Flattening 132180401651136 into 132180401456608
<class 'ir.LoadStat'> 132180401650656
<class 'ir.StatList'> 132180401651328
Flattening 132180401651328 into 132180401455264
<class 'ir.LoadImmStat'> 132180401651520
<class 'ir.StatList'> 132180401651568
Flattening 132180401651568 into 132180401455264
<class 'ir.BinStat'> 132180401455216
<class 'ir.StatList'> 132180401455264
Flattening 132180401455264 into 132180401456608
<class 'ir.StoreStat'> 132180401455408
<class 'ir.BranchStat'> 132180401456560
<class 'ir.EmptyStat'> 132180401456320
<class 'ir.StatList'> 132180401456608
Flattening 132180401456608 into 132180401786832
<class 'ir.LoadImmStat'> 132180401456224
<class 'ir.StatList'> 132180401456848
Flattening 132180401456848 into 132180401456992
<class 'ir.PrintCommand'> 132180401456944
<class 'ir.StatList'> 132180401456992
Flattening 132180401456992 into 132180401786832
<class 'ir.LoadImmStat'> 132180401457136
<class 'ir.StatList'> 132180401457424
Flattening 132180401457424 into 132180401457568
<class 'ir.PrintCommand'> 132180401457520
<class 'ir.StatList'> 132180401457568
Flattening 132180401457568 into 132180401786832
<class 'ir.Const'> 132180401946240
<class 'ir.AssignStat'> 132180401914496
<class 'ir.LoadStat'> 132180401479744
<class 'ir.StatList'> 132180401479792
Flattening 132180401479792 into 132180401480224
<class 'ir.LoadImmStat'> 132180401479936
<class 'ir.StatList'> 132180401479984
Flattening 132180401479984 into 132180401480224
<class 'ir.BinStat'> 132180401480080
<class 'ir.StatList'> 132180401480224
Flattening 132180401480224 into 132180401480752
<class 'ir.BranchStat'> 132180401480608
<class 'ir.LoadStat'> 132180401457856
<class 'ir.StatList'> 132180401458048
Flattening 132180401458048 into 132180401458192
<class 'ir.PrintCommand'> 132180401458144
<class 'ir.StatList'> 132180401458192
Flattening 132180401458192 into 132180401480752
<class 'ir.LoadStat'> 132180401457712
<class 'ir.StatList'> 132180401458384
Flattening 132180401458384 into 132180401458864
<class 'ir.LoadImmStat'> 132180401458576
<class 'ir.StatList'> 132180401458624
Flattening 132180401458624 into 132180401458864
<class 'ir.BinStat'> 132180401458720
<class 'ir.StatList'> 132180401458864
Flattening 132180401458864 into 132180401480752
<class 'ir.StoreStat'> 132180401459008
<class 'ir.BranchStat'> 132180401480704
<class 'ir.EmptyStat'> 132180401480464
<class 'ir.StatList'> 132180401480752
Flattening 132180401480752 into 132180401786832
<class 'ir.LoadImmStat'> 132180401480368
<class 'ir.StatList'> 132180401480992
Flattening 132180401480992 into 132180401481136
<class 'ir.PrintCommand'> 132180401481088
<class 'ir.StatList'> 132180401481136
Flattening 132180401481136 into 132180401786832
<class 'ir.LoadImmStat'> 132180401481280
<class 'ir.StatList'> 132180401481568
Flattening 132180401481568 into 132180401481712
<class 'ir.PrintCommand'> 132180401481664
<class 'ir.StatList'> 132180401481712
Flattening 132180401481712 into 132180401786832
<class 'ir.Const'> 132180401915552
<class 'ir.AssignStat'> 132180401916224
<class 'ir.LoadStat'> 132180401487984
<class 'ir.StatList'> 132180401488032
Flattening 132180401488032 into 132180401488560
<class 'ir.LoadImmStat'> 132180401488272
<class 'ir.StatList'> 132180401488320
Flattening 132180401488320 into 132180401488560
<class 'ir.BinStat'> 132180401488416
<class 'ir.StatList'> 132180401488560
Flattening 132180401488560 into 132180401489088
<class 'ir.BranchStat'> 132180401488944
<class 'ir.LoadImmStat'> 132180401482000
<class 'ir.StatList'> 132180401482192
Flattening 132180401482192 into 132180401482336
<class 'ir.PrintCommand'> 132180401482288
<class 'ir.StatList'> 132180401482336
Flattening 132180401482336 into 132180401489088
<class 'ir.LoadStat'> 132180401482480
<class 'ir.StatList'> 132180401482768
Flattening 132180401482768 into 132180401482912
<class 'ir.PrintCommand'> 132180401482864
<class 'ir.StatList'> 132180401482912
Flattening 132180401482912 into 132180401489088
<class 'ir.LoadStat'> 132180401481856
<class 'ir.StatList'> 132180401483104
Flattening 132180401483104 into 132180401483584
<class 'ir.LoadImmStat'> 132180401483296
<class 'ir.StatList'> 132180401483344
Flattening 132180401483344 into 132180401483584
<class 'ir.BinStat'> 132180401483440
<class 'ir.StatList'> 132180401483584
Flattening 132180401483584 into 132180401489088
<class 'ir.StoreStat'> 132180401483728
<class 'ir.BranchStat'> 132180401489040
<class 'ir.EmptyStat'> 132180401488800
<class 'ir.StatList'> 132180401489088
Flattening 132180401489088 into 132180401786832
<class 'ir.LoadImmStat'> 132180401488704
<class 'ir.StatList'> 132180401489328
Flattening 132180401489328 into 132180401489472
<class 'ir.PrintCommand'> 132180401489424
<class 'ir.StatList'> 132180401489472
Flattening 132180401489472 into 132180401786832
<class 'ir.LoadImmStat'> 132180401489616
<class 'ir.StatList'> 132180401489904
Flattening 132180401489904 into 132180401490048
<class 'ir.PrintCommand'> 132180401490000
<class 'ir.StatList'> 132180401490048
Flattening 132180401490048 into 132180401786832
<class 'ir.Const'> 132180401917328
<class 'ir.AssignStat'> 132180401917376
<class 'ir.LoadStat'> 132180401491584
<class 'ir.StatList'> 132180401491632
Flattening 132180401491632 into 132180401504512
<class 'ir.LoadImmStat'> 132180401491872
<class 'ir.StatList'> 132180401491920
Flattening 132180401491920 into 132180401504512
<class 'ir.BinStat'> 132180401504368
<class 'ir.StatList'> 132180401504512
Flattening 132180401504512 into 132180401505040
<class 'ir.BranchStat'> 132180401504896
<class 'ir.LoadStat'> 132180401490336
<class 'ir.StatList'> 132180401490528
Flattening 132180401490528 into 132180401490672
<class 'ir.PrintCommand'> 132180401490624
<class 'ir.StatList'> 132180401490672
Flattening 132180401490672 into 132180401505040
<class 'ir.LoadStat'> 132180401490192
<class 'ir.StatList'> 132180401490864
Flattening 132180401490864 into 132180401491344
<class 'ir.LoadImmStat'> 132180401491056
<class 'ir.StatList'> 132180401491104
Flattening 132180401491104 into 132180401491344
<class 'ir.BinStat'> 132180401491200
<class 'ir.StatList'> 132180401491344
Flattening 132180401491344 into 132180401505040
<class 'ir.StoreStat'> 132180401491488
<class 'ir.BranchStat'> 132180401504992
<class 'ir.EmptyStat'> 132180401504752
<class 'ir.StatList'> 132180401505040
Flattening 132180401505040 into 132180401786832
<class 'ir.LoadImmStat'> 132180401504656
<class 'ir.StatList'> 132180401505280
Flattening 132180401505280 into 132180401505424
<class 'ir.PrintCommand'> 132180401505376
<class 'ir.StatList'> 132180401505424
Flattening 132180401505424 into 132180401786832
<class 'ir.LoadImmStat'> 132180401505568
<class 'ir.StatList'> 132180401505856
Flattening 132180401505856 into 132180401506000
<class 'ir.PrintCommand'> 132180401505952
<class 'ir.StatList'> 132180401506000
Flattening 132180401506000 into 132180401786832
<class 'ir.Const'> 132180401812144
<class 'ir.AssignStat'> 132180401813056
<class 'ir.LoadStat'> 132180401507536
<class 'ir.StatList'> 132180401507584
Flattening 132180401507584 into 132180401508112
<class 'ir.LoadImmStat'> 132180401507824
<class 'ir.StatList'> 132180401507872
Flattening 132180401507872 into 132180401508112
<class 'ir.BinStat'> 132180401507968
<class 'ir.StatList'> 132180401508112
Flattening 132180401508112 into 132180401529184
<class 'ir.BranchStat'> 132180401529040
<class 'ir.LoadStat'> 132180401506288
<class 'ir.StatList'> 132180401506480
Flattening 132180401506480 into 132180401506624
<class 'ir.PrintCommand'> 132180401506576
<class 'ir.StatList'> 132180401506624
Flattening 132180401506624 into 132180401529184
<class 'ir.LoadStat'> 132180401506144
<class 'ir.StatList'> 132180401506816
Flattening 132180401506816 into 132180401507296
<class 'ir.LoadImmStat'> 132180401507008
<class 'ir.StatList'> 132180401507056
Flattening 132180401507056 into 132180401507296
<class 'ir.BinStat'> 132180401507152
<class 'ir.StatList'> 132180401507296
Flattening 132180401507296 into 132180401529184
<class 'ir.StoreStat'> 132180401507440
<class 'ir.BranchStat'> 132180401529136
<class 'ir.EmptyStat'> 132180401528896
<class 'ir.StatList'> 132180401529184
Flattening 132180401529184 into 132180401786832
<class 'ir.LoadImmStat'> 132180401529424
<class 'ir.StatList'> 132180401529472
Flattening 132180401529472 into 132180401529568
<class 'ir.PrintCommand'> 132180401529520
<class 'ir.StatList'> 132180401529568
Flattening 132180401529568 into 132180401786832
<class 'ir.LoadImmStat'> 132180401529712
<class 'ir.StatList'> 132180401530000
Flattening 132180401530000 into 132180401530144
<class 'ir.PrintCommand'> 132180401530096
<class 'ir.StatList'> 132180401530144
Flattening 132180401530144 into 132180401786832
<class 'ir.Const'> 132180401813872
<class 'ir.AssignStat'> 132180401814352
<class 'ir.LoadStat'> 132180401531680
<class 'ir.StatList'> 132180401531728
Flattening 132180401531728 into 132180401532256
<class 'ir.LoadImmStat'> 132180401531968
<class 'ir.StatList'> 132180401532016
Flattening 132180401532016 into 132180401532256
<class 'ir.BinStat'> 132180401532112
<class 'ir.StatList'> 132180401532256
Flattening 132180401532256 into 132180401532784
<class 'ir.BranchStat'> 132180401532640
<class 'ir.LoadStat'> 132180401530432
<class 'ir.StatList'> 132180401530624
Flattening 132180401530624 into 132180401530768
<class 'ir.PrintCommand'> 132180401530720
<class 'ir.StatList'> 132180401530768
Flattening 132180401530768 into 132180401532784
<class 'ir.LoadStat'> 132180401530288
<class 'ir.StatList'> 132180401530960
Flattening 132180401530960 into 132180401531440
<class 'ir.LoadImmStat'> 132180401531152
<class 'ir.StatList'> 132180401531200
Flattening 132180401531200 into 132180401531440
<class 'ir.BinStat'> 132180401531296
<class 'ir.StatList'> 132180401531440
Flattening 132180401531440 into 132180401532784
<class 'ir.StoreStat'> 132180401531584
<class 'ir.BranchStat'> 132180401532736
<class 'ir.EmptyStat'> 132180401532496
<class 'ir.StatList'> 132180401532784
Flattening 132180401532784 into 132180401786832
<class 'ir.LoadImmStat'> 132180401668256
<class 'ir.StatList'> 132180401668304
Flattening 132180401668304 into 132180401668400
<class 'ir.PrintCommand'> 132180401668352
<class 'ir.StatList'> 132180401668400
Flattening 132180401668400 into 132180401786832
<class 'ir.LoadImmStat'> 132180401668592
<class 'ir.StatList'> 132180401668640
Flattening 132180401668640 into 132180401668736
<class 'ir.StoreStat'> 132180401668784
<class 'ir.StatList'> 132180401668736
Flattening 132180401668736 into 132180401786832
<class 'ir.LoadImmStat'> 132180401668880
<class 'ir.StatList'> 132180401669168
Flattening 132180401669168 into 132180401669312
<class 'ir.PrintCommand'> 132180401669264
<class 'ir.StatList'> 132180401669312
Flattening 132180401669312 into 132180401786832
<class 'ir.Const'> 132180401782496
<class 'ir.AssignStat'> 132180401780576
<class 'ir.LoadStat'> 132180401680496
<class 'ir.StatList'> 132180401680544
Flattening 132180401680544 into 132180401681072
<class 'ir.LoadImmStat'> 132180401680784
<class 'ir.StatList'> 132180401680832
Flattening 132180401680832 into 132180401681072
<class 'ir.BinStat'> 132180401680928
<class 'ir.StatList'> 132180401681072
Flattening 132180401681072 into 132180401681600
<class 'ir.BranchStat'> 132180401681456
<class 'ir.LoadStat'> 132180401669504
<class 'ir.StatList'> 132180401669552
Flattening 132180401669552 into 132180401670080
<class 'ir.LoadStat'> 132180401669792
<class 'ir.StatList'> 132180401669840
Flattening 132180401669840 into 132180401670080
<class 'ir.BinStat'> 132180401669936
<class 'ir.StatList'> 132180401670080
Flattening 132180401670080 into 132180401670176
<class 'ir.StoreStat'> 132180401670224
<class 'ir.StatList'> 132180401670176
Flattening 132180401670176 into 132180401681600
<class 'ir.LoadStat'> 132180401670320
<class 'ir.StatList'> 132180401670608
Flattening 132180401670608 into 132180401670752
<class 'ir.PrintCommand'> 132180401670704
<class 'ir.StatList'> 132180401670752
Flattening 132180401670752 into 132180401681600
<class 'ir.LoadStat'> 132180401670896
<class 'ir.StatList'> 132180401671184
Flattening 132180401671184 into 132180401671328
<class 'ir.PrintCommand'> 132180401671280
<class 'ir.StatList'> 132180401671328
Flattening 132180401671328 into 132180401681600
<class 'ir.LoadStat'> 132180401669456
<class 'ir.StatList'> 132180401671520
Flattening 132180401671520 into 132180401672000
<class 'ir.LoadImmStat'> 132180401671712
<class 'ir.StatList'> 132180401671760
Flattening 132180401671760 into 132180401672000
<class 'ir.BinStat'> 132180401671856
<class 'ir.StatList'> 132180401672000
Flattening 132180401672000 into 132180401681600
<class 'ir.StoreStat'> 132180401672144
<class 'ir.BranchStat'> 132180401681552
<class 'ir.EmptyStat'> 132180401681312
<class 'ir.StatList'> 132180401681600
Flattening 132180401681600 into 132180401786832
<class 'ir.LoadStat'> 132180401681216
<class 'ir.StatList'> 132180401681840
Flattening 132180401681840 into 132180401681984
<class 'ir.PrintCommand'> 132180401681936
<class 'ir.StatList'> 132180401681984
Flattening 132180401681984 into 132180401786832
<class 'ir.LoadImmStat'> 132180401682128
<class 'ir.StatList'> 132180401682416
Flattening 132180401682416 into 132180401682560
<class 'ir.PrintCommand'> 132180401682512
<class 'ir.StatList'> 132180401682560
Flattening 132180401682560 into 132180401786832
<class 'ir.LoadImmStat'> 132180401682752
<class 'ir.StatList'> 132180401682800
Flattening 132180401682800 into 132180401682896
<class 'ir.StoreStat'> 132180401682944
<class 'ir.StatList'> 132180401682896
Flattening 132180401682896 into 132180401786832
<class 'ir.LoadImmStat'> 132180401683040
<class 'ir.StatList'> 132180401683328
Flattening 132180401683328 into 132180401683472
<class 'ir.PrintCommand'> 132180401683424
<class 'ir.StatList'> 132180401683472
Flattening 132180401683472 into 132180401786832
<class 'ir.Const'> 132180401779184
<class 'ir.AssignStat'> 132180402209168
<class 'ir.LoadStat'> 132180401706368
<class 'ir.StatList'> 132180401706416
Flattening 132180401706416 into 132180401706944
<class 'ir.LoadImmStat'> 132180401706656
<class 'ir.StatList'> 132180401706704
Flattening 132180401706704 into 132180401706944
<class 'ir.BinStat'> 132180401706800
<class 'ir.StatList'> 132180401706944
Flattening 132180401706944 into 132180401707472
<class 'ir.BranchStat'> 132180401707328
<class 'ir.LoadStat'> 132180401683664
<class 'ir.StatList'> 132180401683712
Flattening 132180401683712 into 132180401684240
<class 'ir.LoadStat'> 132180401683952
<class 'ir.StatList'> 132180401684000
Flattening 132180401684000 into 132180401684240
<class 'ir.BinStat'> 132180401684096
<class 'ir.StatList'> 132180401684240
Flattening 132180401684240 into 132180401684336
<class 'ir.StoreStat'> 132180401684384
<class 'ir.StatList'> 132180401684336
Flattening 132180401684336 into 132180401707472
<class 'ir.LoadStat'> 132180401705024
<class 'ir.StatList'> 132180401705312
Flattening 132180401705312 into 132180401705456
<class 'ir.PrintCommand'> 132180401705408
<class 'ir.StatList'> 132180401705456
Flattening 132180401705456 into 132180401707472
<class 'ir.LoadStat'> 132180401705648
<class 'ir.StatList'> 132180401705696
Flattening 132180401705696 into 132180401706128
<class 'ir.LoadImmStat'> 132180401705840
<class 'ir.StatList'> 132180401705888
Flattening 132180401705888 into 132180401706128
<class 'ir.BinStat'> 132180401705984
<class 'ir.StatList'> 132180401706128
Flattening 132180401706128 into 132180401707472
<class 'ir.StoreStat'> 132180401706272
<class 'ir.BranchStat'> 132180401707424
<class 'ir.EmptyStat'> 132180401707184
<class 'ir.StatList'> 132180401707472
Flattening 132180401707472 into 132180401786832
<class 'ir.LoadStat'> 132180401707088
<class 'ir.StatList'> 132180401707712
Flattening 132180401707712 into 132180401707856
<class 'ir.PrintCommand'> 132180401707808
<class 'ir.StatList'> 132180401707856
Flattening 132180401707856 into 132180401786832
<class 'ir.LoadImmStat'> 132180401708000
<class 'ir.StatList'> 132180401708288
Flattening 132180401708288 into 132180401708432
<class 'ir.PrintCommand'> 132180401708384
<class 'ir.StatList'> 132180401708432
Flattening 132180401708432 into 132180401786832
<class 'ir.StatList'> 132180401786832
Not flattening 132180401786832 into 132180402210224 of type <class 'ir.Block'>
<class 'ir.Block'> 132180402210224

 <class 'ir.Block'> 132180402210224 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 132180402449280 {
	parent = 132180402210224
		children:
		<class 'ir.FunctionDef'> 132180401784048 {
		parent = 132180402449280
			body: 	<class 'ir.Block'> 132180401786400 {
			parent = 132180401784048
				defs: 	<class 'ir.DefinitionList'> 132180401786016 {
				parent = 132180401786400
				}
				body: 	<class 'ir.StatList'> 132180401786160 {
				parent = 132180401786400
					children:
					reg int t0 <- 1234
					auto int test <- reg int t0
					reg int t1 <- global int x
					reg int t2 <- global int x
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ <- reg int32_t t3
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				auto function square
				
			}
			symbol: 	auto function square
		}
	}
	body: 	<class 'ir.StatList'> 132180401786832 {
	parent = 132180402210224
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x <- reg int t5
		read reg int t6
		global int x <- reg int t6
		reg int t10 <- global int x
		reg int t11 <- 100
		reg int32_t t12 <- reg int t10 gtr reg int t11
		branch on reg int32_t t12 to auto label label2
		reg int t14 <- global int x
		print reg int t14
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 132180402194656 {
		parent = 132180401786832
		}
		reg int t7 <- global int x
		reg int t9 <- minus reg int t7
		print reg int t9
		label1: <class 'ir.EmptyStat'> 132180402194128 {
		parent = 132180401786832
		}
		reg int t15 <- 1
		global int x <- reg int t15
		label3: <class 'ir.EmptyStat'> 132180401796000 {
		parent = 132180401786832
		}
		reg int t21 <- global int x
		reg int t22 <- 10
		reg int32_t t23 <- reg int t21 leq reg int t22
		branch on not reg int32_t t23 to auto label label4
		call  to auto function square
		reg int t16 <- global int x
		reg int t17 <- 1
		reg int32_t t18 <- reg int t16 plus reg int t17
		global int x <- reg int32_t t18
		reg int t20 <- global int squ
		print reg int t20
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 132180402178512 {
		parent = 132180401786832
		}
		reg int t24 <- 101
		global int x <- reg int t24
		label5: <class 'ir.EmptyStat'> 132180402180000 {
		parent = 132180401786832
		}
		reg int t48 <- global int x
		reg int t49 <- 105
		reg int32_t t50 <- reg int t48 leq reg int t49
		branch on not reg int32_t t50 to auto label label6
		reg int t25 <- global int x
		reg int t26 <- global int x
		reg int t27 <- 100
		reg int32_t t28 <- reg int t26 minus reg int t27
		reg int t29 <- 1
		reg int32_t t30 <- reg int32_t t28 times reg int t29
		reg &char t31 <- &(global char[5] arr)
		reg &char t32 <- reg &char t31 plus reg int32_t t30
		[reg &char t32] <- reg int t25
		reg int t33 <- global int x
		reg int t34 <- 100
		reg int32_t t35 <- reg int t33 minus reg int t34
		reg int t36 <- 1
		reg int32_t t38 <- reg int32_t t35 times reg int t36
		reg &char t43 <- &(global char[5] arr)
		reg &char t44 <- reg &char t43 plus reg int32_t t38
		reg char t42 <- [reg &char t44]
		print reg char t42
		reg int t45 <- global int x
		reg int t46 <- 1
		reg int32_t t47 <- reg int t45 plus reg int t46
		global int x <- reg int32_t t47
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 132180401971056 {
		parent = 132180401786832
		}
		reg int t51 <- 1
		global int x <- reg int t51
		reg int t52 <- 1
		global int y <- reg int t52
		label9: <class 'ir.EmptyStat'> 132180401590528 {
		parent = 132180401786832
		}
		reg int t92 <- global int x
		reg int t93 <- 5
		reg int32_t t94 <- reg int t92 leq reg int t93
		branch on not reg int32_t t94 to auto label label10
		label7: <class 'ir.EmptyStat'> 132180401639040 {
		parent = 132180401786832
		}
		reg int t89 <- global int y
		reg int t90 <- 5
		reg int32_t t91 <- reg int t89 leq reg int t90
		branch on not reg int32_t t91 to auto label label8
		reg int t53 <- global int x
		reg int t54 <- 1
		reg int32_t t56 <- reg int t53 times reg int t54
		reg &char t58 <- &(global char[5] arr)
		reg &char t59 <- reg &char t58 plus reg int32_t t56
		reg char t57 <- [reg &char t59]
		reg int t60 <- global int x
		reg int t61 <- 10
		reg int32_t t62 <- reg int t60 times reg int t61
		reg int t63 <- global int y
		reg int t64 <- 2
		reg int32_t t65 <- reg int t63 times reg int t64
		reg int32_t t66 <- reg int32_t t62 plus reg int32_t t65
		reg &short t67 <- &(global short[5, 5] multid)
		reg &short t68 <- reg &short t67 plus reg int32_t t66
		[reg &short t68] <- reg char t57
		reg int t69 <- global int x
		reg int t70 <- 10
		reg int32_t t71 <- reg int t69 times reg int t70
		reg int t72 <- global int y
		reg int t73 <- 2
		reg int32_t t74 <- reg int t72 times reg int t73
		reg int32_t t76 <- reg int32_t t71 plus reg int32_t t74
		reg &short t81 <- &(global short[5, 5] multid)
		reg &short t82 <- reg &short t81 plus reg int32_t t76
		reg short t80 <- [reg &short t82]
		print reg short t80
		reg int t83 <- global int x
		reg int t84 <- 1
		reg int32_t t85 <- reg int t83 plus reg int t84
		global int x <- reg int32_t t85
		reg int t86 <- global int y
		reg int t87 <- 1
		reg int32_t t88 <- reg int t86 plus reg int t87
		global int y <- reg int32_t t88
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 132180401637648 {
		parent = 132180401786832
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 132180401638704 {
		parent = 132180401786832
		}
		<class 'ir.AssignStat'> 132180401943936 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401943216 {
			parent = 132180401943936
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int a
		}
		label11: <class 'ir.EmptyStat'> 132180401615536 {
		parent = 132180401786832
		}
		reg int t100 <- auto int a
		reg int t101 <- 20
		reg int32_t t102 <- reg int t100 leq reg int t101
		branch on not reg int32_t t102 to auto label label13
		reg int t96 <- auto int a
		print reg int t96
		reg int t97 <- auto int a
		reg int t98 <- 1
		reg int32_t t99 <- reg int t97 plus reg int t98
		auto int a <- reg int32_t t99
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 132180401649504 {
		parent = 132180401786832
		}
		reg int t103 <- 10
		global int i <- reg int t103
		reg int t105 <- 99991
		print reg int t105
		<class 'ir.AssignStat'> 132180401945184 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401944704 {
			parent = 132180401945184
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int i
		}
		label14: <class 'ir.EmptyStat'> 132180401796048 {
		parent = 132180401786832
		}
		reg int t111 <- auto int i
		reg int t112 <- 15
		reg int32_t t113 <- reg int t111 leq reg int t112
		branch on not reg int32_t t113 to auto label label16
		reg int t107 <- global int i
		print reg int t107
		reg int t108 <- auto int i
		reg int t109 <- 1
		reg int32_t t110 <- reg int t108 plus reg int t109
		auto int i <- reg int32_t t110
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 132180401456320 {
		parent = 132180401786832
		}
		reg int t115 <- 88881
		print reg int t115
		reg int t117 <- 99992
		print reg int t117
		<class 'ir.AssignStat'> 132180401914496 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401946240 {
			parent = 132180401914496
				value: 	5
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int j
		}
		label17: <class 'ir.EmptyStat'> 132180401795712 {
		parent = 132180401786832
		}
		reg int t123 <- auto int j
		reg int t124 <- 5
		reg int32_t t125 <- reg int t123 leq reg int t124
		branch on not reg int32_t t125 to auto label label19
		reg int t119 <- global int j
		print reg int t119
		reg int t120 <- auto int j
		reg int t121 <- 1
		reg int32_t t122 <- reg int t120 plus reg int t121
		auto int j <- reg int32_t t122
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 132180401480464 {
		parent = 132180401786832
		}
		reg int t127 <- 88882
		print reg int t127
		reg int t129 <- 99993
		print reg int t129
		<class 'ir.AssignStat'> 132180401916224 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401915552 {
			parent = 132180401916224
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int k
		}
		label20: <class 'ir.EmptyStat'> 132180401796480 {
		parent = 132180401786832
		}
		reg int t137 <- auto int k
		reg int t138 <- 5
		reg int32_t t139 <- reg int t137 leq reg int t138
		branch on not reg int32_t t139 to auto label label22
		reg int t131 <- 77777
		print reg int t131
		reg int t133 <- global int k
		print reg int t133
		reg int t134 <- auto int k
		reg int t135 <- 1
		reg int32_t t136 <- reg int t134 plus reg int t135
		auto int k <- reg int32_t t136
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 132180401488800 {
		parent = 132180401786832
		}
		reg int t141 <- 88883
		print reg int t141
		reg int t143 <- 99994
		print reg int t143
		<class 'ir.AssignStat'> 132180401917376 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401917328 {
			parent = 132180401917376
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int m
		}
		label23: <class 'ir.EmptyStat'> 132180401795616 {
		parent = 132180401786832
		}
		reg int t149 <- auto int m
		reg int t150 <- 6
		reg int32_t t151 <- reg int t149 leq reg int t150
		branch on not reg int32_t t151 to auto label label25
		reg int t145 <- global int m
		print reg int t145
		reg int t146 <- auto int m
		reg int t147 <- 1
		reg int32_t t148 <- reg int t146 plus reg int t147
		auto int m <- reg int32_t t148
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 132180401504752 {
		parent = 132180401786832
		}
		reg int t153 <- 88884
		print reg int t153
		reg int t155 <- 99995
		print reg int t155
		<class 'ir.AssignStat'> 132180401813056 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401812144 {
			parent = 132180401813056
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int n
		}
		label26: <class 'ir.EmptyStat'> 132180401796336 {
		parent = 132180401786832
		}
		reg int t161 <- auto int n
		reg int t162 <- 7
		reg int32_t t163 <- reg int t161 leq reg int t162
		branch on not reg int32_t t163 to auto label label28
		reg int t157 <- global int n
		print reg int t157
		reg int t158 <- auto int n
		reg int t159 <- 1
		reg int32_t t160 <- reg int t158 plus reg int t159
		auto int n <- reg int32_t t160
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 132180401528896 {
		parent = 132180401786832
		}
		reg int t165 <- 88885
		print reg int t165
		reg int t167 <- 99996
		print reg int t167
		<class 'ir.AssignStat'> 132180401814352 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401813872 {
			parent = 132180401814352
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int p
		}
		label29: <class 'ir.EmptyStat'> 132180401796576 {
		parent = 132180401786832
		}
		reg int t173 <- auto int p
		reg int t174 <- 12
		reg int32_t t175 <- reg int t173 leq reg int t174
		branch on not reg int32_t t175 to auto label label31
		reg int t169 <- global int p
		print reg int t169
		reg int t170 <- auto int p
		reg int t171 <- 1
		reg int32_t t172 <- reg int t170 plus reg int t171
		auto int p <- reg int32_t t172
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 132180401532496 {
		parent = 132180401786832
		}
		reg int t177 <- 88886
		print reg int t177
		reg int t178 <- 0
		global int sum <- reg int t178
		reg int t180 <- 99997
		print reg int t180
		<class 'ir.AssignStat'> 132180401780576 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401782496 {
			parent = 132180401780576
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int q
		}
		label32: <class 'ir.EmptyStat'> 132180401797296 {
		parent = 132180401786832
		}
		reg int t191 <- auto int q
		reg int t192 <- 5
		reg int32_t t193 <- reg int t191 leq reg int t192
		branch on not reg int32_t t193 to auto label label34
		reg int t181 <- global int sum
		reg int t182 <- global int q
		reg int32_t t183 <- reg int t181 plus reg int t182
		global int sum <- reg int32_t t183
		reg int t185 <- global int q
		print reg int t185
		reg int t187 <- global int sum
		print reg int t187
		reg int t188 <- auto int q
		reg int t189 <- 1
		reg int32_t t190 <- reg int t188 plus reg int t189
		auto int q <- reg int32_t t190
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 132180401681312 {
		parent = 132180401786832
		}
		reg int t195 <- global int sum
		print reg int t195
		reg int t197 <- 88887
		print reg int t197
		reg int t198 <- 100
		global int x <- reg int t198
		reg int t200 <- 99998
		print reg int t200
		<class 'ir.AssignStat'> 132180402209168 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401779184 {
			parent = 132180402209168
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int r
		}
		label35: <class 'ir.EmptyStat'> 132180401797200 {
		parent = 132180401786832
		}
		reg int t209 <- auto int r
		reg int t210 <- 3
		reg int32_t t211 <- reg int t209 leq reg int t210
		branch on not reg int32_t t211 to auto label label37
		reg int t201 <- global int x
		reg int t202 <- global int r
		reg int32_t t203 <- reg int t201 plus reg int t202
		global int x <- reg int32_t t203
		reg int t205 <- global int x
		print reg int t205
		reg int t206 <- auto int r
		reg int t207 <- 1
		reg int32_t t208 <- reg int t206 plus reg int t207
		auto int r <- reg int32_t t208
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 132180401707184 {
		parent = 132180401786832
		}
		reg int t213 <- global int x
		print reg int t213
		reg int t215 <- 88888
		print reg int t215
	}
	global_symtab: 	SymbolTable:
	
} 

navigating children of <class 'ir.DefinitionList'> 132180402449280 1
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 6
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 297
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943936
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945184
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401914496
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916224
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401917376
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813056
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401814352
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780576
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209168
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224


DATALAYOUT



 <class 'ir.Block'> 132180402210224 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 132180402449280 {
	parent = 132180402210224
		children:
		<class 'ir.FunctionDef'> 132180401784048 {
		parent = 132180402449280
			body: 	<class 'ir.Block'> 132180401786400 {
			parent = 132180401784048
				defs: 	<class 'ir.DefinitionList'> 132180401786016 {
				parent = 132180401786400
				}
				body: 	<class 'ir.StatList'> 132180401786160 {
				parent = 132180401786400
					children:
					reg int t0 <- 1234
					auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0
					reg int t1 <- global int x; _g_x: def byte 4
					reg int t2 <- global int x; _g_x: def byte 4
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ; _g_squ: def byte 4 <- reg int32_t t3
				}
				global_symtab: 	SymbolTable:
				global int x; _g_x: def byte 4
				global int y; _g_y: def byte 4
				global int squ; _g_squ: def byte 4
				global char[5] arr; _g_arr: def byte 5
				global short[5, 5] multid; _g_multid: def byte 50
				global int i; _g_i: def byte 4
				global int j; _g_j: def byte 4
				global int k; _g_k: def byte 4
				global int m; _g_m: def byte 4
				global int n; _g_n: def byte 4
				global int p; _g_p: def byte 4
				global int q; _g_q: def byte 4
				global int sum; _g_sum: def byte 4
				global int r; _g_r: def byte 4
				auto function square
				
			}
			symbol: 	auto function square
		}
	}
	body: 	<class 'ir.StatList'> 132180401786832 {
	parent = 132180402210224
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x; _g_x: def byte 4 <- reg int t5
		read reg int t6
		global int x; _g_x: def byte 4 <- reg int t6
		reg int t10 <- global int x; _g_x: def byte 4
		reg int t11 <- 100
		reg int32_t t12 <- reg int t10 gtr reg int t11
		branch on reg int32_t t12 to auto label label2
		reg int t14 <- global int x; _g_x: def byte 4
		print reg int t14
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 132180402194656 {
		parent = 132180401786832
		}
		reg int t7 <- global int x; _g_x: def byte 4
		reg int t9 <- minus reg int t7
		print reg int t9
		label1: <class 'ir.EmptyStat'> 132180402194128 {
		parent = 132180401786832
		}
		reg int t15 <- 1
		global int x; _g_x: def byte 4 <- reg int t15
		label3: <class 'ir.EmptyStat'> 132180401796000 {
		parent = 132180401786832
		}
		reg int t21 <- global int x; _g_x: def byte 4
		reg int t22 <- 10
		reg int32_t t23 <- reg int t21 leq reg int t22
		branch on not reg int32_t t23 to auto label label4
		call  to auto function square
		reg int t16 <- global int x; _g_x: def byte 4
		reg int t17 <- 1
		reg int32_t t18 <- reg int t16 plus reg int t17
		global int x; _g_x: def byte 4 <- reg int32_t t18
		reg int t20 <- global int squ; _g_squ: def byte 4
		print reg int t20
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 132180402178512 {
		parent = 132180401786832
		}
		reg int t24 <- 101
		global int x; _g_x: def byte 4 <- reg int t24
		label5: <class 'ir.EmptyStat'> 132180402180000 {
		parent = 132180401786832
		}
		reg int t48 <- global int x; _g_x: def byte 4
		reg int t49 <- 105
		reg int32_t t50 <- reg int t48 leq reg int t49
		branch on not reg int32_t t50 to auto label label6
		reg int t25 <- global int x; _g_x: def byte 4
		reg int t26 <- global int x; _g_x: def byte 4
		reg int t27 <- 100
		reg int32_t t28 <- reg int t26 minus reg int t27
		reg int t29 <- 1
		reg int32_t t30 <- reg int32_t t28 times reg int t29
		reg &char t31 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t32 <- reg &char t31 plus reg int32_t t30
		[reg &char t32] <- reg int t25
		reg int t33 <- global int x; _g_x: def byte 4
		reg int t34 <- 100
		reg int32_t t35 <- reg int t33 minus reg int t34
		reg int t36 <- 1
		reg int32_t t38 <- reg int32_t t35 times reg int t36
		reg &char t43 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t44 <- reg &char t43 plus reg int32_t t38
		reg char t42 <- [reg &char t44]
		print reg char t42
		reg int t45 <- global int x; _g_x: def byte 4
		reg int t46 <- 1
		reg int32_t t47 <- reg int t45 plus reg int t46
		global int x; _g_x: def byte 4 <- reg int32_t t47
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 132180401971056 {
		parent = 132180401786832
		}
		reg int t51 <- 1
		global int x; _g_x: def byte 4 <- reg int t51
		reg int t52 <- 1
		global int y; _g_y: def byte 4 <- reg int t52
		label9: <class 'ir.EmptyStat'> 132180401590528 {
		parent = 132180401786832
		}
		reg int t92 <- global int x; _g_x: def byte 4
		reg int t93 <- 5
		reg int32_t t94 <- reg int t92 leq reg int t93
		branch on not reg int32_t t94 to auto label label10
		label7: <class 'ir.EmptyStat'> 132180401639040 {
		parent = 132180401786832
		}
		reg int t89 <- global int y; _g_y: def byte 4
		reg int t90 <- 5
		reg int32_t t91 <- reg int t89 leq reg int t90
		branch on not reg int32_t t91 to auto label label8
		reg int t53 <- global int x; _g_x: def byte 4
		reg int t54 <- 1
		reg int32_t t56 <- reg int t53 times reg int t54
		reg &char t58 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t59 <- reg &char t58 plus reg int32_t t56
		reg char t57 <- [reg &char t59]
		reg int t60 <- global int x; _g_x: def byte 4
		reg int t61 <- 10
		reg int32_t t62 <- reg int t60 times reg int t61
		reg int t63 <- global int y; _g_y: def byte 4
		reg int t64 <- 2
		reg int32_t t65 <- reg int t63 times reg int t64
		reg int32_t t66 <- reg int32_t t62 plus reg int32_t t65
		reg &short t67 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t68 <- reg &short t67 plus reg int32_t t66
		[reg &short t68] <- reg char t57
		reg int t69 <- global int x; _g_x: def byte 4
		reg int t70 <- 10
		reg int32_t t71 <- reg int t69 times reg int t70
		reg int t72 <- global int y; _g_y: def byte 4
		reg int t73 <- 2
		reg int32_t t74 <- reg int t72 times reg int t73
		reg int32_t t76 <- reg int32_t t71 plus reg int32_t t74
		reg &short t81 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t82 <- reg &short t81 plus reg int32_t t76
		reg short t80 <- [reg &short t82]
		print reg short t80
		reg int t83 <- global int x; _g_x: def byte 4
		reg int t84 <- 1
		reg int32_t t85 <- reg int t83 plus reg int t84
		global int x; _g_x: def byte 4 <- reg int32_t t85
		reg int t86 <- global int y; _g_y: def byte 4
		reg int t87 <- 1
		reg int32_t t88 <- reg int t86 plus reg int t87
		global int y; _g_y: def byte 4 <- reg int32_t t88
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 132180401637648 {
		parent = 132180401786832
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 132180401638704 {
		parent = 132180401786832
		}
		<class 'ir.AssignStat'> 132180401943936 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401943216 {
			parent = 132180401943936
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int a
		}
		label11: <class 'ir.EmptyStat'> 132180401615536 {
		parent = 132180401786832
		}
		reg int t100 <- auto int a
		reg int t101 <- 20
		reg int32_t t102 <- reg int t100 leq reg int t101
		branch on not reg int32_t t102 to auto label label13
		reg int t96 <- auto int a
		print reg int t96
		reg int t97 <- auto int a
		reg int t98 <- 1
		reg int32_t t99 <- reg int t97 plus reg int t98
		auto int a <- reg int32_t t99
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 132180401649504 {
		parent = 132180401786832
		}
		reg int t103 <- 10
		global int i; _g_i: def byte 4 <- reg int t103
		reg int t105 <- 99991
		print reg int t105
		<class 'ir.AssignStat'> 132180401945184 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401944704 {
			parent = 132180401945184
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int i
		}
		label14: <class 'ir.EmptyStat'> 132180401796048 {
		parent = 132180401786832
		}
		reg int t111 <- auto int i
		reg int t112 <- 15
		reg int32_t t113 <- reg int t111 leq reg int t112
		branch on not reg int32_t t113 to auto label label16
		reg int t107 <- global int i; _g_i: def byte 4
		print reg int t107
		reg int t108 <- auto int i
		reg int t109 <- 1
		reg int32_t t110 <- reg int t108 plus reg int t109
		auto int i <- reg int32_t t110
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 132180401456320 {
		parent = 132180401786832
		}
		reg int t115 <- 88881
		print reg int t115
		reg int t117 <- 99992
		print reg int t117
		<class 'ir.AssignStat'> 132180401914496 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401946240 {
			parent = 132180401914496
				value: 	5
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int j
		}
		label17: <class 'ir.EmptyStat'> 132180401795712 {
		parent = 132180401786832
		}
		reg int t123 <- auto int j
		reg int t124 <- 5
		reg int32_t t125 <- reg int t123 leq reg int t124
		branch on not reg int32_t t125 to auto label label19
		reg int t119 <- global int j; _g_j: def byte 4
		print reg int t119
		reg int t120 <- auto int j
		reg int t121 <- 1
		reg int32_t t122 <- reg int t120 plus reg int t121
		auto int j <- reg int32_t t122
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 132180401480464 {
		parent = 132180401786832
		}
		reg int t127 <- 88882
		print reg int t127
		reg int t129 <- 99993
		print reg int t129
		<class 'ir.AssignStat'> 132180401916224 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401915552 {
			parent = 132180401916224
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int k
		}
		label20: <class 'ir.EmptyStat'> 132180401796480 {
		parent = 132180401786832
		}
		reg int t137 <- auto int k
		reg int t138 <- 5
		reg int32_t t139 <- reg int t137 leq reg int t138
		branch on not reg int32_t t139 to auto label label22
		reg int t131 <- 77777
		print reg int t131
		reg int t133 <- global int k; _g_k: def byte 4
		print reg int t133
		reg int t134 <- auto int k
		reg int t135 <- 1
		reg int32_t t136 <- reg int t134 plus reg int t135
		auto int k <- reg int32_t t136
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 132180401488800 {
		parent = 132180401786832
		}
		reg int t141 <- 88883
		print reg int t141
		reg int t143 <- 99994
		print reg int t143
		<class 'ir.AssignStat'> 132180401917376 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401917328 {
			parent = 132180401917376
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int m
		}
		label23: <class 'ir.EmptyStat'> 132180401795616 {
		parent = 132180401786832
		}
		reg int t149 <- auto int m
		reg int t150 <- 6
		reg int32_t t151 <- reg int t149 leq reg int t150
		branch on not reg int32_t t151 to auto label label25
		reg int t145 <- global int m; _g_m: def byte 4
		print reg int t145
		reg int t146 <- auto int m
		reg int t147 <- 1
		reg int32_t t148 <- reg int t146 plus reg int t147
		auto int m <- reg int32_t t148
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 132180401504752 {
		parent = 132180401786832
		}
		reg int t153 <- 88884
		print reg int t153
		reg int t155 <- 99995
		print reg int t155
		<class 'ir.AssignStat'> 132180401813056 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401812144 {
			parent = 132180401813056
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int n
		}
		label26: <class 'ir.EmptyStat'> 132180401796336 {
		parent = 132180401786832
		}
		reg int t161 <- auto int n
		reg int t162 <- 7
		reg int32_t t163 <- reg int t161 leq reg int t162
		branch on not reg int32_t t163 to auto label label28
		reg int t157 <- global int n; _g_n: def byte 4
		print reg int t157
		reg int t158 <- auto int n
		reg int t159 <- 1
		reg int32_t t160 <- reg int t158 plus reg int t159
		auto int n <- reg int32_t t160
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 132180401528896 {
		parent = 132180401786832
		}
		reg int t165 <- 88885
		print reg int t165
		reg int t167 <- 99996
		print reg int t167
		<class 'ir.AssignStat'> 132180401814352 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401813872 {
			parent = 132180401814352
				value: 	10
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int p
		}
		label29: <class 'ir.EmptyStat'> 132180401796576 {
		parent = 132180401786832
		}
		reg int t173 <- auto int p
		reg int t174 <- 12
		reg int32_t t175 <- reg int t173 leq reg int t174
		branch on not reg int32_t t175 to auto label label31
		reg int t169 <- global int p; _g_p: def byte 4
		print reg int t169
		reg int t170 <- auto int p
		reg int t171 <- 1
		reg int32_t t172 <- reg int t170 plus reg int t171
		auto int p <- reg int32_t t172
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 132180401532496 {
		parent = 132180401786832
		}
		reg int t177 <- 88886
		print reg int t177
		reg int t178 <- 0
		global int sum; _g_sum: def byte 4 <- reg int t178
		reg int t180 <- 99997
		print reg int t180
		<class 'ir.AssignStat'> 132180401780576 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401782496 {
			parent = 132180401780576
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int q
		}
		label32: <class 'ir.EmptyStat'> 132180401797296 {
		parent = 132180401786832
		}
		reg int t191 <- auto int q
		reg int t192 <- 5
		reg int32_t t193 <- reg int t191 leq reg int t192
		branch on not reg int32_t t193 to auto label label34
		reg int t181 <- global int sum; _g_sum: def byte 4
		reg int t182 <- global int q; _g_q: def byte 4
		reg int32_t t183 <- reg int t181 plus reg int t182
		global int sum; _g_sum: def byte 4 <- reg int32_t t183
		reg int t185 <- global int q; _g_q: def byte 4
		print reg int t185
		reg int t187 <- global int sum; _g_sum: def byte 4
		print reg int t187
		reg int t188 <- auto int q
		reg int t189 <- 1
		reg int32_t t190 <- reg int t188 plus reg int t189
		auto int q <- reg int32_t t190
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 132180401681312 {
		parent = 132180401786832
		}
		reg int t195 <- global int sum; _g_sum: def byte 4
		print reg int t195
		reg int t197 <- 88887
		print reg int t197
		reg int t198 <- 100
		global int x; _g_x: def byte 4 <- reg int t198
		reg int t200 <- 99998
		print reg int t200
		<class 'ir.AssignStat'> 132180402209168 {
		parent = 132180401786832
			expr: 	<class 'ir.Const'> 132180401779184 {
			parent = 132180402209168
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	auto int r
		}
		label35: <class 'ir.EmptyStat'> 132180401797200 {
		parent = 132180401786832
		}
		reg int t209 <- auto int r
		reg int t210 <- 3
		reg int32_t t211 <- reg int t209 leq reg int t210
		branch on not reg int32_t t211 to auto label label37
		reg int t201 <- global int x; _g_x: def byte 4
		reg int t202 <- global int r; _g_r: def byte 4
		reg int32_t t203 <- reg int t201 plus reg int t202
		global int x; _g_x: def byte 4 <- reg int32_t t203
		reg int t205 <- global int x; _g_x: def byte 4
		print reg int t205
		reg int t206 <- auto int r
		reg int t207 <- 1
		reg int32_t t208 <- reg int t206 plus reg int t207
		auto int r <- reg int32_t t208
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 132180401707184 {
		parent = 132180401786832
		}
		reg int t213 <- global int x; _g_x: def byte 4
		print reg int t213
		reg int t215 <- 88888
		print reg int t215
	}
	global_symtab: 	SymbolTable:
	
} 

navigating children of <class 'ir.DefinitionList'> 132180402449280 1
successfully navigated attr  defs  of <class 'ir.Block'> 132180401786400
navigating children of <class 'ir.StatList'> 132180401786160 6
successfully navigated attr  body  of <class 'ir.Block'> 132180401786400
successfully navigated attr  body  of <class 'ir.FunctionDef'> 132180401784048
successfully navigated attr  defs  of <class 'ir.Block'> 132180402210224
navigating children of <class 'ir.StatList'> 132180401786832 297
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401943936
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401945184
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401914496
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401916224
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401917376
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401813056
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401814352
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180401780576
successfully navigated attr  expr  of <class 'ir.AssignStat'> 132180402209168
successfully navigated attr  body  of <class 'ir.Block'> 132180402210224


OPTIMIZATION: Attempting Loop Unrolling


--- Starting Loop Unrolling Pass (Factor: 2) ---
   Step 1: Detecting loops...
   Attempting loop detection using DFS...
   Starting DFS from entry point BB 132180401798016
   Starting DFS from entry point BB 132180401798160
      Found back edge: BB 132180401801680 -> BB 132180401801344 (Header)
      Found back edge: BB 132180401801440 -> BB 132180401801200 (Header)
      Found back edge: BB 132180401801776 -> BB 132180401801536 (Header)
      Found back edge: BB 132180401801248 -> BB 132180401801152 (Header)
      Found back edge: BB 132180401801872 -> BB 132180401802112 (Header)
      Found back edge: BB 132180401801920 -> BB 132180401801392 (Header)
      Found back edge: BB 132180401800336 -> BB 132180401800288 (Header)
      Found back edge: BB 132180401800192 -> BB 132180401800144 (Header)
      Found back edge: BB 132180401799904 -> BB 132180401799856 (Header)
      Found back edge: BB 132180401800000 -> BB 132180401799760 (Header)
      Found back edge: BB 132180401799952 -> BB 132180401799808 (Header)
      Found back edge: BB 132180401799232 -> BB 132180401799568 (Header)
      Found back edge: BB 132180401799328 -> BB 132180401799280 (Header)
      Loop body nodes for header 132180401801344: [132180401801344, 132180401801680]
      Loop body nodes for header 132180401801200: [132180401801440, 132180401801200]
      Loop body nodes for header 132180401801536: [132180401801776, 132180401801536]
      Loop body nodes for header 132180401801152: [132180401801248, 132180401801152]
      Loop body nodes for header 132180401802112: [132180401802112, 132180401801872]
      Loop body nodes for header 132180401801392: [132180401801392, 132180401801920]
      Loop body nodes for header 132180401800288: [132180401800336, 132180401800288]
      Loop body nodes for header 132180401800144: [132180401800192, 132180401800144]
      Loop body nodes for header 132180401799856: [132180401799856, 132180401799904]
      Loop body nodes for header 132180401799760: [132180401799808, 132180401799952, 132180401800000, 132180401799760]
      Loop body nodes for header 132180401799808: [132180401799808, 132180401799952]
      Loop body nodes for header 132180401799568: [132180401799568, 132180401799232]
      Loop body nodes for header 132180401799280: [132180401799328, 132180401799280]
   Loop detection complete. Found 13 unique loop header(s).
   Detected 13 loop(s). Analyzing for unrolling...
   Analyzing loop with header BB 132180401801344...
      Checking suitability for loop with header 132180401801344 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401801200...
      Checking suitability for loop with header 132180401801200 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401801536...
      Checking suitability for loop with header 132180401801536 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401801152...
      Checking suitability for loop with header 132180401801152 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401802112...
      Checking suitability for loop with header 132180401802112 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401801392...
      Checking suitability for loop with header 132180401801392 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401800288...
      Checking suitability for loop with header 132180401800288 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401800144...
      Checking suitability for loop with header 132180401800144 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401799856...
      Checking suitability for loop with header 132180401799856 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401799760...
      Checking suitability for loop with header 132180401799760 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401799808...
      Checking suitability for loop with header 132180401799808 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401799568...
      Checking suitability for loop with header 132180401799568 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   Analyzing loop with header BB 132180401799280...
      Checking suitability for loop with header 132180401799280 (placeholder)...
      Loop not suitable for unrolling (based on current criteria).
   No suitable loops were unrolled.
--- Loop Unrolling Pass Complete ---
--- Starting Liveness Analysis ---
Liveness analysis converged after 4 iterations.
--- Liveness Analysis Complete ---

--- Liveness Analysis Results ---

Block Level Liveness:

BB 132180401798016:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {auto int test; _l_square_test: fp + (-4) [def byte 4], global int squ; _g_squ: def byte 4, reg int t0, reg int t1, reg int t2, reg int32_t t3}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401798160:
  GEN : {}
  KILL: {global int x; _g_x: def byte 4, reg int t10, reg int t11, reg int t4, reg int t5, reg int t6, reg int32_t t12}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401798208:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t14}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401798064:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t7, reg int t9}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401798112:
  GEN : {}
  KILL: {global int x; _g_x: def byte 4, reg int t15}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799280:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t21, reg int t22, reg int32_t t23}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799328:
  GEN : {global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4}
  KILL: {global int x; _g_x: def byte 4, reg int t16, reg int t17, reg int t20, reg int32_t t18}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799520:
  GEN : {}
  KILL: {global int x; _g_x: def byte 4, reg int t24}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799568:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t48, reg int t49, reg int32_t t50}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799232:
  GEN : {global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4}
  KILL: {global int x; _g_x: def byte 4, reg &char t31, reg &char t32, reg &char t43, reg &char t44, reg char t42, reg int t25, reg int t26, reg int t27, reg int t29, reg int t33, reg int t34, reg int t36, reg int t45, reg int t46, reg int32_t t28, reg int32_t t30, reg int32_t t35, reg int32_t t38, reg int32_t t47}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799472:
  GEN : {}
  KILL: {global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, reg int t51, reg int t52}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799760:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t92, reg int t93, reg int32_t t94}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799808:
  GEN : {global int y; _g_y: def byte 4}
  KILL: {reg int t89, reg int t90, reg int32_t t91}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401799952:
  GEN : {global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  KILL: {global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, reg &char t58, reg &char t59, reg &short t67, reg &short t68, reg &short t81, reg &short t82, reg char t57, reg int t53, reg int t54, reg int t60, reg int t61, reg int t63, reg int t64, reg int t69, reg int t70, reg int t72, reg int t73, reg int t83, reg int t84, reg int t86, reg int t87, reg int32_t t56, reg int32_t t62, reg int32_t t65, reg int32_t t66, reg int32_t t71, reg int32_t t74, reg int32_t t76, reg int32_t t85, reg int32_t t88, reg short t80}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401800000:
  GEN : {}
  KILL: {}
  IN  : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  OUT : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

BB 132180401800048:
  GEN : {}
  KILL: {auto int a}
  IN  : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401799856:
  GEN : {auto int a}
  KILL: {reg int t100, reg int t101, reg int32_t t102}
  IN  : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401799904:
  GEN : {auto int a}
  KILL: {auto int a, reg int t96, reg int t97, reg int t98, reg int32_t t99}
  IN  : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800096:
  GEN : {}
  KILL: {auto int i, global int i; _g_i: def byte 4, reg int t103, reg int t105}
  IN  : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800144:
  GEN : {auto int i}
  KILL: {reg int t111, reg int t112, reg int32_t t113}
  IN  : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800192:
  GEN : {auto int i, global int i; _g_i: def byte 4}
  KILL: {auto int i, reg int t107, reg int t108, reg int t109, reg int32_t t110}
  IN  : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800240:
  GEN : {}
  KILL: {auto int j, reg int t115, reg int t117}
  IN  : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800288:
  GEN : {auto int j}
  KILL: {reg int t123, reg int t124, reg int32_t t125}
  IN  : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800336:
  GEN : {auto int j, global int j; _g_j: def byte 4}
  KILL: {auto int j, reg int t119, reg int t120, reg int t121, reg int32_t t122}
  IN  : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401800384:
  GEN : {}
  KILL: {auto int k, reg int t127, reg int t129}
  IN  : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801392:
  GEN : {auto int k}
  KILL: {reg int t137, reg int t138, reg int32_t t139}
  IN  : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801920:
  GEN : {auto int k, global int k; _g_k: def byte 4}
  KILL: {auto int k, reg int t131, reg int t133, reg int t134, reg int t135, reg int32_t t136}
  IN  : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401802064:
  GEN : {}
  KILL: {auto int m, reg int t141, reg int t143}
  IN  : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401802112:
  GEN : {auto int m}
  KILL: {reg int t149, reg int t150, reg int32_t t151}
  IN  : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801872:
  GEN : {auto int m, global int m; _g_m: def byte 4}
  KILL: {auto int m, reg int t145, reg int t146, reg int t147, reg int32_t t148}
  IN  : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401802016:
  GEN : {}
  KILL: {auto int n, reg int t153, reg int t155}
  IN  : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801152:
  GEN : {auto int n}
  KILL: {reg int t161, reg int t162, reg int32_t t163}
  IN  : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801248:
  GEN : {auto int n, global int n; _g_n: def byte 4}
  KILL: {auto int n, reg int t157, reg int t158, reg int t159, reg int32_t t160}
  IN  : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801488:
  GEN : {}
  KILL: {auto int p, reg int t165, reg int t167}
  IN  : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801536:
  GEN : {auto int p}
  KILL: {reg int t173, reg int t174, reg int32_t t175}
  IN  : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801776:
  GEN : {auto int p, global int p; _g_p: def byte 4}
  KILL: {auto int p, reg int t169, reg int t170, reg int t171, reg int32_t t172}
  IN  : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

BB 132180401801824:
  GEN : {}
  KILL: {auto int q, global int sum; _g_sum: def byte 4, reg int t177, reg int t178, reg int t180}
  IN  : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  OUT : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

BB 132180401801200:
  GEN : {auto int q}
  KILL: {reg int t191, reg int t192, reg int32_t t193}
  IN  : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  OUT : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

BB 132180401801440:
  GEN : {auto int q, global int q; _g_q: def byte 4, global int sum; _g_sum: def byte 4}
  KILL: {auto int q, global int sum; _g_sum: def byte 4, reg int t181, reg int t182, reg int t185, reg int t187, reg int t188, reg int t189, reg int32_t t183, reg int32_t t190}
  IN  : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  OUT : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

BB 132180401801296:
  GEN : {global int sum; _g_sum: def byte 4}
  KILL: {auto int r, global int x; _g_x: def byte 4, reg int t195, reg int t197, reg int t198, reg int t200}
  IN  : {global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  OUT : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

BB 132180401801344:
  GEN : {auto int r}
  KILL: {reg int t209, reg int t210, reg int32_t t211}
  IN  : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  OUT : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

BB 132180401801680:
  GEN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  KILL: {auto int r, global int x; _g_x: def byte 4, reg int t201, reg int t202, reg int t205, reg int t206, reg int t207, reg int32_t t203, reg int32_t t208}
  IN  : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  OUT : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

BB 132180401795232:
  GEN : {global int x; _g_x: def byte 4}
  KILL: {reg int t213, reg int t215}
  IN  : {global int x; _g_x: def byte 4}
  OUT : {}

Instruction Level Liveness:

--- BB 132180401798016 Instructions ---
  INST: reg int t0 <- 1234
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t0}
  INST: auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t0}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t1 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t1}
  INST: reg int t2 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t1}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t1, reg int t2}
  INST: reg int32_t t3 <- reg int t1 times reg int t2
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t1, reg int t2}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t3}
  INST: global int squ; _g_squ: def byte 4 <- reg int32_t t3
    IN : {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t3}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int sum; _g_sum: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401798160 Instructions ---
  INST: reg int t4 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t4}
  INST: reg int t5 <- minus reg int t4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t4}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t5}
  INST: global int x; _g_x: def byte 4 <- reg int t5
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t5}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: read reg int t6
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t6}
  INST: global int x; _g_x: def byte 4 <- reg int t6
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t6}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t10 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t10}
  INST: reg int t11 <- 100
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t10}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t10, reg int t11}
  INST: reg int32_t t12 <- reg int t10 gtr reg int t11
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t10, reg int t11}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t12}
  INST: branch on reg int32_t t12 to auto label label2
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t12}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401798208 Instructions ---
  INST: reg int t14 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t14}
  INST: print reg int t14
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t14}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: branch  to auto label label1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401798064 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t7 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t7}
  INST: reg int t9 <- minus reg int t7
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t7}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t9}
  INST: print reg int t9
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t9}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401798112 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t15 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t15}
  INST: global int x; _g_x: def byte 4 <- reg int t15
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t15}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799280 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t21 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t21}
  INST: reg int t22 <- 10
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t21}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t21, reg int t22}
  INST: reg int32_t t23 <- reg int t21 leq reg int t22
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t21, reg int t22}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t23}
  INST: branch on not reg int32_t t23 to auto label label4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t23}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799328 Instructions ---
  INST: call  to auto function square
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t16 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16}
  INST: reg int t17 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, reg int t17}
  INST: reg int32_t t18 <- reg int t16 plus reg int t17
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, reg int t17}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t18}
  INST: global int x; _g_x: def byte 4 <- reg int32_t t18
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t18}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t20 <- global int squ; _g_squ: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t20}
  INST: print reg int t20
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t20}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: branch  to auto label label3
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799520 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t24 <- 101
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t24}
  INST: global int x; _g_x: def byte 4 <- reg int t24
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t24}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799568 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t48 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t48}
  INST: reg int t49 <- 105
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t48}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t48, reg int t49}
  INST: reg int32_t t50 <- reg int t48 leq reg int t49
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t48, reg int t49}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t50}
  INST: branch on not reg int32_t t50 to auto label label6
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799232 Instructions ---
  INST: reg int t25 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25}
  INST: reg int t26 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t26}
  INST: reg int t27 <- 100
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t26}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t26, reg int t27}
  INST: reg int32_t t28 <- reg int t26 minus reg int t27
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t26, reg int t27}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int32_t t28}
  INST: reg int t29 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int32_t t28}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t29, reg int32_t t28}
  INST: reg int32_t t30 <- reg int32_t t28 times reg int t29
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int t29, reg int32_t t28}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int32_t t30}
  INST: reg &char t31 <- &(global char[5] arr; _g_arr: def byte 5)
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t25, reg int32_t t30}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t31, reg int t25, reg int32_t t30}
  INST: reg &char t32 <- reg &char t31 plus reg int32_t t30
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t31, reg int t25, reg int32_t t30}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t32, reg int t25}
  INST: [reg &char t32] <- reg int t25
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t32, reg int t25}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t33 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t33}
  INST: reg int t34 <- 100
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t33}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t33, reg int t34}
  INST: reg int32_t t35 <- reg int t33 minus reg int t34
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t33, reg int t34}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t35}
  INST: reg int t36 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t35}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t36, reg int32_t t35}
  INST: reg int32_t t38 <- reg int32_t t35 times reg int t36
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t36, reg int32_t t35}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t38}
  INST: reg &char t43 <- &(global char[5] arr; _g_arr: def byte 5)
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t38}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t43, reg int32_t t38}
  INST: reg &char t44 <- reg &char t43 plus reg int32_t t38
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t43, reg int32_t t38}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t44}
  INST: reg char t42 <- [reg &char t44]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t44}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t42}
  INST: print reg char t42
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t42}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t45 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t45}
  INST: reg int t46 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t45}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t45, reg int t46}
  INST: reg int32_t t47 <- reg int t45 plus reg int t46
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t45, reg int t46}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t47}
  INST: global int x; _g_x: def byte 4 <- reg int32_t t47
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t47}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: branch  to auto label label5
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799472 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t51 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t51}
  INST: global int x; _g_x: def byte 4 <- reg int t51
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t51}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t52 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t52}
  INST: global int y; _g_y: def byte 4 <- reg int t52
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t52}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799760 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t92 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t92}
  INST: reg int t93 <- 5
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t92}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t92, reg int t93}
  INST: reg int32_t t94 <- reg int t92 leq reg int t93
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t92, reg int t93}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t94}
  INST: branch on not reg int32_t t94 to auto label label10
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t94}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799808 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t89 <- global int y; _g_y: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t89}
  INST: reg int t90 <- 5
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t89}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t89, reg int t90}
  INST: reg int32_t t91 <- reg int t89 leq reg int t90
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t89, reg int t90}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t91}
  INST: branch on not reg int32_t t91 to auto label label8
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t91}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401799952 Instructions ---
  INST: reg int t53 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t53}
  INST: reg int t54 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t53}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t53, reg int t54}
  INST: reg int32_t t56 <- reg int t53 times reg int t54
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t53, reg int t54}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t56}
  INST: reg &char t58 <- &(global char[5] arr; _g_arr: def byte 5)
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t56}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t58, reg int32_t t56}
  INST: reg &char t59 <- reg &char t58 plus reg int32_t t56
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t58, reg int32_t t56}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t59}
  INST: reg char t57 <- [reg &char t59]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t59}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57}
  INST: reg int t60 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t60}
  INST: reg int t61 <- 10
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t60}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t60, reg int t61}
  INST: reg int32_t t62 <- reg int t60 times reg int t61
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t60, reg int t61}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t62}
  INST: reg int t63 <- global int y; _g_y: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t62}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t63, reg int32_t t62}
  INST: reg int t64 <- 2
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t63, reg int32_t t62}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t63, reg int t64, reg int32_t t62}
  INST: reg int32_t t65 <- reg int t63 times reg int t64
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int t63, reg int t64, reg int32_t t62}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t62, reg int32_t t65}
  INST: reg int32_t t66 <- reg int32_t t62 plus reg int32_t t65
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t62, reg int32_t t65}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t66}
  INST: reg &short t67 <- &(global short[5, 5] multid; _g_multid: def byte 50)
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t57, reg int32_t t66}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t67, reg char t57, reg int32_t t66}
  INST: reg &short t68 <- reg &short t67 plus reg int32_t t66
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t67, reg char t57, reg int32_t t66}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t68, reg char t57}
  INST: [reg &short t68] <- reg char t57
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t68, reg char t57}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t69 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t69}
  INST: reg int t70 <- 10
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t69}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t69, reg int t70}
  INST: reg int32_t t71 <- reg int t69 times reg int t70
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t69, reg int t70}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t71}
  INST: reg int t72 <- global int y; _g_y: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t71}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t72, reg int32_t t71}
  INST: reg int t73 <- 2
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t72, reg int32_t t71}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t72, reg int t73, reg int32_t t71}
  INST: reg int32_t t74 <- reg int t72 times reg int t73
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t72, reg int t73, reg int32_t t71}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t71, reg int32_t t74}
  INST: reg int32_t t76 <- reg int32_t t71 plus reg int32_t t74
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t71, reg int32_t t74}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t76}
  INST: reg &short t81 <- &(global short[5, 5] multid; _g_multid: def byte 50)
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t76}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t81, reg int32_t t76}
  INST: reg &short t82 <- reg &short t81 plus reg int32_t t76
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t81, reg int32_t t76}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t82}
  INST: reg short t80 <- [reg &short t82]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &short t82}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg short t80}
  INST: print reg short t80
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg short t80}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t83 <- global int x; _g_x: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t83}
  INST: reg int t84 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t83}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t83, reg int t84}
  INST: reg int32_t t85 <- reg int t83 plus reg int t84
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t83, reg int t84}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t85}
  INST: global int x; _g_x: def byte 4 <- reg int32_t t85
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t85}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: reg int t86 <- global int y; _g_y: def byte 4
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t86}
  INST: reg int t87 <- 1
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t86}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t86, reg int t87}
  INST: reg int32_t t88 <- reg int t86 plus reg int t87
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t86, reg int t87}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t88}
  INST: global int y; _g_y: def byte 4 <- reg int32_t t88
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t88}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: branch  to auto label label7
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401800000 Instructions ---
  INST: [No Repr]
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
  INST: branch  to auto label label9
    IN : {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}
    OUT: {global char[5] arr; _g_arr: def byte 5, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, global int y; _g_y: def byte 4, global short[5, 5] multid; _g_multid: def byte 50}

--- BB 132180401800048 Instructions ---
  INST: [No Repr]
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401799856 Instructions ---
  INST: [No Repr]
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t100 <- auto int a
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t100}
  INST: reg int t101 <- 20
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t100}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t100, reg int t101}
  INST: reg int32_t t102 <- reg int t100 leq reg int t101
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t100, reg int t101}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t102}
  INST: branch on not reg int32_t t102 to auto label label13
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t102}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401799904 Instructions ---
  INST: reg int t96 <- auto int a
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t96}
  INST: print reg int t96
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t96}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t97 <- auto int a
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t97}
  INST: reg int t98 <- 1
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t97}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t97, reg int t98}
  INST: reg int32_t t99 <- reg int t97 plus reg int t98
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t97, reg int t98}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t99}
  INST: auto int a <- reg int32_t t99
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t99}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label11
    IN : {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int a, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800096 Instructions ---
  INST: [No Repr]
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t103 <- 10
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t103}
  INST: global int i; _g_i: def byte 4 <- reg int t103
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t103}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t105 <- 99991
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t105}
  INST: print reg int t105
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t105}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800144 Instructions ---
  INST: [No Repr]
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t111 <- auto int i
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t111}
  INST: reg int t112 <- 15
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t111}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t111, reg int t112}
  INST: reg int32_t t113 <- reg int t111 leq reg int t112
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t111, reg int t112}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t113}
  INST: branch on not reg int32_t t113 to auto label label16
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t113}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800192 Instructions ---
  INST: reg int t107 <- global int i; _g_i: def byte 4
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t107}
  INST: print reg int t107
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t107}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t108 <- auto int i
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t108}
  INST: reg int t109 <- 1
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t108}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t108, reg int t109}
  INST: reg int32_t t110 <- reg int t108 plus reg int t109
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t108, reg int t109}
    OUT: {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t110}
  INST: auto int i <- reg int32_t t110
    IN : {global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t110}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label14
    IN : {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int i, global int i; _g_i: def byte 4, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800240 Instructions ---
  INST: [No Repr]
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t115 <- 88881
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t115}
  INST: print reg int t115
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t115}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t117 <- 99992
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t117}
  INST: print reg int t117
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t117}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800288 Instructions ---
  INST: [No Repr]
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t123 <- auto int j
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t123}
  INST: reg int t124 <- 5
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t123}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t123, reg int t124}
  INST: reg int32_t t125 <- reg int t123 leq reg int t124
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t123, reg int t124}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t125}
  INST: branch on not reg int32_t t125 to auto label label19
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t125}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800336 Instructions ---
  INST: reg int t119 <- global int j; _g_j: def byte 4
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t119}
  INST: print reg int t119
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t119}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t120 <- auto int j
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t120}
  INST: reg int t121 <- 1
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t120}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t120, reg int t121}
  INST: reg int32_t t122 <- reg int t120 plus reg int t121
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t120, reg int t121}
    OUT: {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t122}
  INST: auto int j <- reg int32_t t122
    IN : {global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t122}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label17
    IN : {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int j, global int j; _g_j: def byte 4, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401800384 Instructions ---
  INST: [No Repr]
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t127 <- 88882
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t127}
  INST: print reg int t127
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t127}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t129 <- 99993
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t129}
  INST: print reg int t129
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t129}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801392 Instructions ---
  INST: [No Repr]
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t137 <- auto int k
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t137}
  INST: reg int t138 <- 5
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t137}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t137, reg int t138}
  INST: reg int32_t t139 <- reg int t137 leq reg int t138
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t137, reg int t138}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t139}
  INST: branch on not reg int32_t t139 to auto label label22
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t139}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801920 Instructions ---
  INST: reg int t131 <- 77777
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t131}
  INST: print reg int t131
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t131}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t133 <- global int k; _g_k: def byte 4
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t133}
  INST: print reg int t133
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t133}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t134 <- auto int k
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t134}
  INST: reg int t135 <- 1
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t134}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t134, reg int t135}
  INST: reg int32_t t136 <- reg int t134 plus reg int t135
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t134, reg int t135}
    OUT: {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t136}
  INST: auto int k <- reg int32_t t136
    IN : {global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t136}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label20
    IN : {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int k, global int k; _g_k: def byte 4, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401802064 Instructions ---
  INST: [No Repr]
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t141 <- 88883
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t141}
  INST: print reg int t141
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t141}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t143 <- 99994
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t143}
  INST: print reg int t143
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t143}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401802112 Instructions ---
  INST: [No Repr]
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t149 <- auto int m
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t149}
  INST: reg int t150 <- 6
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t149}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t149, reg int t150}
  INST: reg int32_t t151 <- reg int t149 leq reg int t150
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t149, reg int t150}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t151}
  INST: branch on not reg int32_t t151 to auto label label25
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t151}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801872 Instructions ---
  INST: reg int t145 <- global int m; _g_m: def byte 4
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t145}
  INST: print reg int t145
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t145}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t146 <- auto int m
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t146}
  INST: reg int t147 <- 1
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t146}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t146, reg int t147}
  INST: reg int32_t t148 <- reg int t146 plus reg int t147
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t146, reg int t147}
    OUT: {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t148}
  INST: auto int m <- reg int32_t t148
    IN : {global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t148}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label23
    IN : {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int m, global int m; _g_m: def byte 4, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401802016 Instructions ---
  INST: [No Repr]
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t153 <- 88884
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t153}
  INST: print reg int t153
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t153}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t155 <- 99995
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t155}
  INST: print reg int t155
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t155}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801152 Instructions ---
  INST: [No Repr]
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t161 <- auto int n
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t161}
  INST: reg int t162 <- 7
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t161}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t161, reg int t162}
  INST: reg int32_t t163 <- reg int t161 leq reg int t162
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t161, reg int t162}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t163}
  INST: branch on not reg int32_t t163 to auto label label28
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t163}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801248 Instructions ---
  INST: reg int t157 <- global int n; _g_n: def byte 4
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t157}
  INST: print reg int t157
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t157}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t158 <- auto int n
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t158}
  INST: reg int t159 <- 1
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t158}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t158, reg int t159}
  INST: reg int32_t t160 <- reg int t158 plus reg int t159
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t158, reg int t159}
    OUT: {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t160}
  INST: auto int n <- reg int32_t t160
    IN : {global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t160}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label26
    IN : {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int n, global int n; _g_n: def byte 4, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801488 Instructions ---
  INST: [No Repr]
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t165 <- 88885
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t165}
  INST: print reg int t165
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t165}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t167 <- 99996
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t167}
  INST: print reg int t167
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t167}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: [No Repr]
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801536 Instructions ---
  INST: [No Repr]
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t173 <- auto int p
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t173}
  INST: reg int t174 <- 12
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t173}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t173, reg int t174}
  INST: reg int32_t t175 <- reg int t173 leq reg int t174
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t173, reg int t174}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t175}
  INST: branch on not reg int32_t t175 to auto label label31
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t175}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801776 Instructions ---
  INST: reg int t169 <- global int p; _g_p: def byte 4
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t169}
  INST: print reg int t169
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t169}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t170 <- auto int p
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t170}
  INST: reg int t171 <- 1
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t170}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t170, reg int t171}
  INST: reg int32_t t172 <- reg int t170 plus reg int t171
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t170, reg int t171}
    OUT: {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t172}
  INST: auto int p <- reg int32_t t172
    IN : {global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t172}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: branch  to auto label label29
    IN : {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {auto int p, global int p; _g_p: def byte 4, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}

--- BB 132180401801824 Instructions ---
  INST: [No Repr]
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t177 <- 88886
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t177}
  INST: print reg int t177
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t177}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
  INST: reg int t178 <- 0
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t178}
  INST: global int sum; _g_sum: def byte 4 <- reg int t178
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t178}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t180 <- 99997
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t180}
  INST: print reg int t180
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t180}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: [No Repr]
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

--- BB 132180401801200 Instructions ---
  INST: [No Repr]
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t191 <- auto int q
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t191}
  INST: reg int t192 <- 5
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t191}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t191, reg int t192}
  INST: reg int32_t t193 <- reg int t191 leq reg int t192
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t191, reg int t192}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int32_t t193}
  INST: branch on not reg int32_t t193 to auto label label34
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int32_t t193}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

--- BB 132180401801440 Instructions ---
  INST: reg int t181 <- global int sum; _g_sum: def byte 4
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t181}
  INST: reg int t182 <- global int q; _g_q: def byte 4
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t181}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t181, reg int t182}
  INST: reg int32_t t183 <- reg int t181 plus reg int t182
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int t181, reg int t182}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t183}
  INST: global int sum; _g_sum: def byte 4 <- reg int32_t t183
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, reg int32_t t183}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t185 <- global int q; _g_q: def byte 4
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t185}
  INST: print reg int t185
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t185}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t187 <- global int sum; _g_sum: def byte 4
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t187}
  INST: print reg int t187
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t187}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t188 <- auto int q
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t188}
  INST: reg int t189 <- 1
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t188}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t188, reg int t189}
  INST: reg int32_t t190 <- reg int t188 plus reg int t189
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int t188, reg int t189}
    OUT: {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int32_t t190}
  INST: auto int q <- reg int32_t t190
    IN : {global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4, reg int32_t t190}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: branch  to auto label label32
    IN : {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {auto int q, global int q; _g_q: def byte 4, global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}

--- BB 132180401801296 Instructions ---
  INST: [No Repr]
    IN : {global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
  INST: reg int t195 <- global int sum; _g_sum: def byte 4
    IN : {global int r; _g_r: def byte 4, global int sum; _g_sum: def byte 4}
    OUT: {global int r; _g_r: def byte 4, reg int t195}
  INST: print reg int t195
    IN : {global int r; _g_r: def byte 4, reg int t195}
    OUT: {global int r; _g_r: def byte 4}
  INST: reg int t197 <- 88887
    IN : {global int r; _g_r: def byte 4}
    OUT: {global int r; _g_r: def byte 4, reg int t197}
  INST: print reg int t197
    IN : {global int r; _g_r: def byte 4, reg int t197}
    OUT: {global int r; _g_r: def byte 4}
  INST: reg int t198 <- 100
    IN : {global int r; _g_r: def byte 4}
    OUT: {global int r; _g_r: def byte 4, reg int t198}
  INST: global int x; _g_x: def byte 4 <- reg int t198
    IN : {global int r; _g_r: def byte 4, reg int t198}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: reg int t200 <- 99998
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t200}
  INST: print reg int t200
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t200}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: [No Repr]
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

--- BB 132180401801344 Instructions ---
  INST: [No Repr]
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: reg int t209 <- auto int r
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t209}
  INST: reg int t210 <- 3
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t209}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t209, reg int t210}
  INST: reg int32_t t211 <- reg int t209 leq reg int t210
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t209, reg int t210}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int32_t t211}
  INST: branch on not reg int32_t t211 to auto label label37
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int32_t t211}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

--- BB 132180401801680 Instructions ---
  INST: reg int t201 <- global int x; _g_x: def byte 4
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, reg int t201}
  INST: reg int t202 <- global int r; _g_r: def byte 4
    IN : {auto int r, global int r; _g_r: def byte 4, reg int t201}
    OUT: {auto int r, global int r; _g_r: def byte 4, reg int t201, reg int t202}
  INST: reg int32_t t203 <- reg int t201 plus reg int t202
    IN : {auto int r, global int r; _g_r: def byte 4, reg int t201, reg int t202}
    OUT: {auto int r, global int r; _g_r: def byte 4, reg int32_t t203}
  INST: global int x; _g_x: def byte 4 <- reg int32_t t203
    IN : {auto int r, global int r; _g_r: def byte 4, reg int32_t t203}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: reg int t205 <- global int x; _g_x: def byte 4
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t205}
  INST: print reg int t205
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t205}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: reg int t206 <- auto int r
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t206}
  INST: reg int t207 <- 1
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t206}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t206, reg int t207}
  INST: reg int32_t t208 <- reg int t206 plus reg int t207
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int t206, reg int t207}
    OUT: {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int32_t t208}
  INST: auto int r <- reg int32_t t208
    IN : {global int r; _g_r: def byte 4, global int x; _g_x: def byte 4, reg int32_t t208}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
  INST: branch  to auto label label35
    IN : {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}
    OUT: {auto int r, global int r; _g_r: def byte 4, global int x; _g_x: def byte 4}

--- BB 132180401795232 Instructions ---
  INST: [No Repr]
    IN : {global int x; _g_x: def byte 4}
    OUT: {global int x; _g_x: def byte 4}
  INST: reg int t213 <- global int x; _g_x: def byte 4
    IN : {global int x; _g_x: def byte 4}
    OUT: {reg int t213}
  INST: print reg int t213
    IN : {reg int t213}
    OUT: {}
  INST: reg int t215 <- 88888
    IN : {}
    OUT: {reg int t215}
  INST: print reg int t215
    IN : {reg int t215}
    OUT: {}
--- End Liveness ---
CFG graph saved to cfg.dot


REGALLOC


LIVENESS INTERVALS:
[]
vartoreg = {}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_y, 4
	.comm _g_squ, 4
	.comm _g_arr, 5
	.comm _g_multid, 50
	.comm _g_i, 4
	.comm _g_j, 4
	.comm _g_k, 4
	.comm _g_m, 4
	.comm _g_n, 4
	.comm _g_p, 4
	.comm _g_q, 4
	.comm _g_sum, 4
	.comm _g_r, 4
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 132180401786832 type <class 'ir.StatList'>
	@ node 132180402210512 did not generate any code
	@ exc: KeyError(reg int t4)
	@ node 132180402211616 did not generate any code
	@ exc: KeyError(reg int t4)
	@ node 132180402212720 did not generate any code
	@ exc: KeyError(reg int t5)
	@ node 132180402212576 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 132180402212336 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 132180402192688 did not generate any code
	@ exc: KeyError(reg int t10)
	@ node 132180402193072 did not generate any code
	@ exc: KeyError(reg int t11)
	@ node 132180402193216 did not generate any code
	@ exc: KeyError(reg int t10)
	@ node 132180402194896 did not generate any code
	@ exc: KeyError(reg int32_t t12)
	@ node 132180402193600 did not generate any code
	@ exc: KeyError(reg int t14)
	@ node 132180402193888 did not generate any code
	@ exc: KeyError(reg int t14)
	b label1
label2:
	@ emptystat
	@ node 132180402212192 did not generate any code
	@ exc: KeyError(reg int t7)
	@ node 132180402192496 did not generate any code
	@ exc: KeyError(reg int t7)
	@ node 132180402192832 did not generate any code
	@ exc: KeyError(reg int t9)
label1:
	@ emptystat
	@ node 132180402194608 did not generate any code
	@ exc: KeyError(reg int t15)
	@ node 132180402196384 did not generate any code
	@ exc: KeyError(reg int t15)
label3:
	@ emptystat
	@ node 132180402196288 did not generate any code
	@ exc: KeyError(reg int t21)
	@ node 132180402176880 did not generate any code
	@ exc: KeyError(reg int t22)
	@ node 132180402177408 did not generate any code
	@ exc: KeyError(reg int t21)
	@ node 132180402178656 did not generate any code
	@ exc: KeyError(reg int32_t t23)
	push {r0, r1, r2, r3}
	bl square
	pop {r0, r1, r2, r3}
	@ node 132180402196240 did not generate any code
	@ exc: KeyError(reg int t16)
	@ node 132180402195904 did not generate any code
	@ exc: KeyError(reg int t17)
	@ node 132180402195760 did not generate any code
	@ exc: KeyError(reg int t16)
	@ node 132180402195472 did not generate any code
	@ exc: KeyError(reg int32_t t18)
	@ node 132180402195376 did not generate any code
	@ exc: KeyError(reg int t20)
	@ node 132180402194992 did not generate any code
	@ exc: KeyError(reg int t20)
	b label3
label4:
	@ emptystat
	@ node 132180402179952 did not generate any code
	@ exc: KeyError(reg int t24)
	@ node 132180402179760 did not generate any code
	@ exc: KeyError(reg int t24)
label5:
	@ emptystat
	@ node 132180401970624 did not generate any code
	@ exc: KeyError(reg int t48)
	@ node 132180401970384 did not generate any code
	@ exc: KeyError(reg int t49)
	@ node 132180401970720 did not generate any code
	@ exc: KeyError(reg int t48)
	@ node 132180401971152 did not generate any code
	@ exc: KeyError(reg int32_t t50)
	@ node 132180402179616 did not generate any code
	@ exc: KeyError(reg int t25)
	@ node 132180402179424 did not generate any code
	@ exc: KeyError(reg int t26)
	@ node 132180402179088 did not generate any code
	@ exc: KeyError(reg int t27)
	@ node 132180402178944 did not generate any code
	@ exc: KeyError(reg int t26)
	@ node 132180402178320 did not generate any code
	@ exc: KeyError(reg int t29)
	@ node 132180402178176 did not generate any code
	@ exc: KeyError(reg int32_t t28)
	@ node 132180402177792 did not generate any code
	@ exc: KeyError(reg &char t31)
	@ node 132180402177312 did not generate any code
	@ exc: KeyError(reg &char t31)
	@ node 132180402177264 did not generate any code
	@ exc: KeyError(reg &char t32)
	@ node 132180402177024 did not generate any code
	@ exc: KeyError(reg int t33)
	@ node 132180402176496 did not generate any code
	@ exc: KeyError(reg int t34)
	@ node 132180401967264 did not generate any code
	@ exc: KeyError(reg int t33)
	@ node 132180401967744 did not generate any code
	@ exc: KeyError(reg int t36)
	@ node 132180401968752 did not generate any code
	@ exc: KeyError(reg int32_t t35)
	@ node 132180401968800 did not generate any code
	@ exc: KeyError(reg &char t43)
	@ node 132180401969136 did not generate any code
	@ exc: KeyError(reg &char t43)
	@ node 132180401969184 did not generate any code
	@ exc: KeyError(reg &char t44)
	@ node 132180401969664 did not generate any code
	@ exc: KeyError(reg char t42)
	@ node 132180401969376 did not generate any code
	@ exc: KeyError(reg int t45)
	@ node 132180401969904 did not generate any code
	@ exc: KeyError(reg int t46)
	@ node 132180401970192 did not generate any code
	@ exc: KeyError(reg int t45)
	@ node 132180401970336 did not generate any code
	@ exc: KeyError(reg int32_t t47)
	b label5
label6:
	@ emptystat
	@ node 132180401590576 did not generate any code
	@ exc: KeyError(reg int t51)
	@ node 132180401590768 did not generate any code
	@ exc: KeyError(reg int t51)
	@ node 132180401590912 did not generate any code
	@ exc: KeyError(reg int t52)
	@ node 132180401591104 did not generate any code
	@ exc: KeyError(reg int t52)
label9:
	@ emptystat
	@ node 132180401638032 did not generate any code
	@ exc: KeyError(reg int t92)
	@ node 132180401638224 did not generate any code
	@ exc: KeyError(reg int t93)
	@ node 132180401638368 did not generate any code
	@ exc: KeyError(reg int t92)
	@ node 132180401638848 did not generate any code
	@ exc: KeyError(reg int32_t t94)
label7:
	@ emptystat
	@ node 132180401636976 did not generate any code
	@ exc: KeyError(reg int t89)
	@ node 132180401637168 did not generate any code
	@ exc: KeyError(reg int t90)
	@ node 132180401637312 did not generate any code
	@ exc: KeyError(reg int t89)
	@ node 132180401637792 did not generate any code
	@ exc: KeyError(reg int32_t t91)
	@ node 132180401591248 did not generate any code
	@ exc: KeyError(reg int t53)
	@ node 132180401591632 did not generate any code
	@ exc: KeyError(reg int t54)
	@ node 132180401591392 did not generate any code
	@ exc: KeyError(reg int t53)
	@ node 132180401592448 did not generate any code
	@ exc: KeyError(reg &char t58)
	@ node 132180401592640 did not generate any code
	@ exc: KeyError(reg &char t58)
	@ node 132180401592688 did not generate any code
	@ exc: KeyError(reg &char t59)
	@ node 132180401592832 did not generate any code
	@ exc: KeyError(reg int t60)
	@ node 132180401593168 did not generate any code
	@ exc: KeyError(reg int t61)
	@ node 132180401593312 did not generate any code
	@ exc: KeyError(reg int t60)
	@ node 132180401593600 did not generate any code
	@ exc: KeyError(reg int t63)
	@ node 132180401593840 did not generate any code
	@ exc: KeyError(reg int t64)
	@ node 132180401593984 did not generate any code
	@ exc: KeyError(reg int t63)
	@ node 132180401594224 did not generate any code
	@ exc: KeyError(reg int32_t t62)
	@ node 132180401615152 did not generate any code
	@ exc: KeyError(reg &short t67)
	@ node 132180401615344 did not generate any code
	@ exc: KeyError(reg &short t67)
	@ node 132180401615392 did not generate any code
	@ exc: KeyError(reg &short t68)
	@ node 132180401615632 did not generate any code
	@ exc: KeyError(reg int t69)
	@ node 132180401616016 did not generate any code
	@ exc: KeyError(reg int t70)
	@ node 132180401616160 did not generate any code
	@ exc: KeyError(reg int t69)
	@ node 132180401616448 did not generate any code
	@ exc: KeyError(reg int t72)
	@ node 132180401616688 did not generate any code
	@ exc: KeyError(reg int t73)
	@ node 132180401616832 did not generate any code
	@ exc: KeyError(reg int t72)
	@ node 132180401615728 did not generate any code
	@ exc: KeyError(reg int32_t t71)
	@ node 132180401618176 did not generate any code
	@ exc: KeyError(reg &short t81)
	@ node 132180401618464 did not generate any code
	@ exc: KeyError(reg &short t81)
	@ node 132180401618512 did not generate any code
	@ exc: KeyError(reg &short t82)
	@ node 132180401618656 did not generate any code
	@ exc: KeyError(reg short t80)
	@ node 132180401635392 did not generate any code
	@ exc: KeyError(reg int t83)
	@ node 132180401635584 did not generate any code
	@ exc: KeyError(reg int t84)
	@ node 132180401635728 did not generate any code
	@ exc: KeyError(reg int t83)
	@ node 132180401636016 did not generate any code
	@ exc: KeyError(reg int32_t t85)
	@ node 132180401636160 did not generate any code
	@ exc: KeyError(reg int t86)
	@ node 132180401636400 did not generate any code
	@ exc: KeyError(reg int t87)
	@ node 132180401636544 did not generate any code
	@ exc: KeyError(reg int t86)
	@ node 132180401636832 did not generate any code
	@ exc: KeyError(reg int32_t t88)
	b label7
label8:
	@ emptystat
	b label9
label10:
	@ emptystat
	@ irnode 132180401943936 type <class 'ir.AssignStat'>
label11:
	@ emptystat
	@ node 132180401648688 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401648976 did not generate any code
	@ exc: KeyError(reg int t101)
	@ node 132180401649120 did not generate any code
	@ exc: KeyError(reg int t100)
	@ node 132180401649648 did not generate any code
	@ exc: KeyError(reg int32_t t102)
	@ node 132180401639184 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401647728 did not generate any code
	@ exc: KeyError(reg int t96)
	@ node 132180401647968 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401648160 did not generate any code
	@ exc: KeyError(reg int t98)
	@ node 132180401648304 did not generate any code
	@ exc: KeyError(reg int t97)
	@ node 132180401648592 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label11
label13:
	@ emptystat
	@ node 132180401649600 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 132180401649888 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 132180401650080 did not generate any code
	@ exc: KeyError(reg int t105)
	@ node 132180401650464 did not generate any code
	@ exc: KeyError(reg int t105)
	@ irnode 132180401945184 type <class 'ir.AssignStat'>
label14:
	@ emptystat
	@ node 132180401455504 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401455792 did not generate any code
	@ exc: KeyError(reg int t112)
	@ node 132180401455936 did not generate any code
	@ exc: KeyError(reg int t111)
	@ node 132180401456464 did not generate any code
	@ exc: KeyError(reg int32_t t113)
	@ node 132180401650800 did not generate any code
	@ exc: KeyError(reg int t107)
	@ node 132180401651088 did not generate any code
	@ exc: KeyError(reg int t107)
	@ node 132180401650656 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401651520 did not generate any code
	@ exc: KeyError(reg int t109)
	@ node 132180401455216 did not generate any code
	@ exc: KeyError(reg int t108)
	@ node 132180401455408 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label14
label16:
	@ emptystat
	@ node 132180401456224 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 132180401456944 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 132180401457136 did not generate any code
	@ exc: KeyError(reg int t117)
	@ node 132180401457520 did not generate any code
	@ exc: KeyError(reg int t117)
	@ irnode 132180401914496 type <class 'ir.AssignStat'>
label17:
	@ emptystat
	@ node 132180401479744 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401479936 did not generate any code
	@ exc: KeyError(reg int t124)
	@ node 132180401480080 did not generate any code
	@ exc: KeyError(reg int t123)
	@ node 132180401480608 did not generate any code
	@ exc: KeyError(reg int32_t t125)
	@ node 132180401457856 did not generate any code
	@ exc: KeyError(reg int t119)
	@ node 132180401458144 did not generate any code
	@ exc: KeyError(reg int t119)
	@ node 132180401457712 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401458576 did not generate any code
	@ exc: KeyError(reg int t121)
	@ node 132180401458720 did not generate any code
	@ exc: KeyError(reg int t120)
	@ node 132180401459008 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label17
label19:
	@ emptystat
	@ node 132180401480368 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 132180401481088 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 132180401481280 did not generate any code
	@ exc: KeyError(reg int t129)
	@ node 132180401481664 did not generate any code
	@ exc: KeyError(reg int t129)
	@ irnode 132180401916224 type <class 'ir.AssignStat'>
label20:
	@ emptystat
	@ node 132180401487984 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401488272 did not generate any code
	@ exc: KeyError(reg int t138)
	@ node 132180401488416 did not generate any code
	@ exc: KeyError(reg int t137)
	@ node 132180401488944 did not generate any code
	@ exc: KeyError(reg int32_t t139)
	@ node 132180401482000 did not generate any code
	@ exc: KeyError(reg int t131)
	@ node 132180401482288 did not generate any code
	@ exc: KeyError(reg int t131)
	@ node 132180401482480 did not generate any code
	@ exc: KeyError(reg int t133)
	@ node 132180401482864 did not generate any code
	@ exc: KeyError(reg int t133)
	@ node 132180401481856 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401483296 did not generate any code
	@ exc: KeyError(reg int t135)
	@ node 132180401483440 did not generate any code
	@ exc: KeyError(reg int t134)
	@ node 132180401483728 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label20
label22:
	@ emptystat
	@ node 132180401488704 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 132180401489424 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 132180401489616 did not generate any code
	@ exc: KeyError(reg int t143)
	@ node 132180401490000 did not generate any code
	@ exc: KeyError(reg int t143)
	@ irnode 132180401917376 type <class 'ir.AssignStat'>
label23:
	@ emptystat
	@ node 132180401491584 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401491872 did not generate any code
	@ exc: KeyError(reg int t150)
	@ node 132180401504368 did not generate any code
	@ exc: KeyError(reg int t149)
	@ node 132180401504896 did not generate any code
	@ exc: KeyError(reg int32_t t151)
	@ node 132180401490336 did not generate any code
	@ exc: KeyError(reg int t145)
	@ node 132180401490624 did not generate any code
	@ exc: KeyError(reg int t145)
	@ node 132180401490192 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401491056 did not generate any code
	@ exc: KeyError(reg int t147)
	@ node 132180401491200 did not generate any code
	@ exc: KeyError(reg int t146)
	@ node 132180401491488 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label23
label25:
	@ emptystat
	@ node 132180401504656 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 132180401505376 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 132180401505568 did not generate any code
	@ exc: KeyError(reg int t155)
	@ node 132180401505952 did not generate any code
	@ exc: KeyError(reg int t155)
	@ irnode 132180401813056 type <class 'ir.AssignStat'>
label26:
	@ emptystat
	@ node 132180401507536 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401507824 did not generate any code
	@ exc: KeyError(reg int t162)
	@ node 132180401507968 did not generate any code
	@ exc: KeyError(reg int t161)
	@ node 132180401529040 did not generate any code
	@ exc: KeyError(reg int32_t t163)
	@ node 132180401506288 did not generate any code
	@ exc: KeyError(reg int t157)
	@ node 132180401506576 did not generate any code
	@ exc: KeyError(reg int t157)
	@ node 132180401506144 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401507008 did not generate any code
	@ exc: KeyError(reg int t159)
	@ node 132180401507152 did not generate any code
	@ exc: KeyError(reg int t158)
	@ node 132180401507440 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label26
label28:
	@ emptystat
	@ node 132180401529424 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 132180401529520 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 132180401529712 did not generate any code
	@ exc: KeyError(reg int t167)
	@ node 132180401530096 did not generate any code
	@ exc: KeyError(reg int t167)
	@ irnode 132180401814352 type <class 'ir.AssignStat'>
label29:
	@ emptystat
	@ node 132180401531680 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401531968 did not generate any code
	@ exc: KeyError(reg int t174)
	@ node 132180401532112 did not generate any code
	@ exc: KeyError(reg int t173)
	@ node 132180401532640 did not generate any code
	@ exc: KeyError(reg int32_t t175)
	@ node 132180401530432 did not generate any code
	@ exc: KeyError(reg int t169)
	@ node 132180401530720 did not generate any code
	@ exc: KeyError(reg int t169)
	@ node 132180401530288 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401531152 did not generate any code
	@ exc: KeyError(reg int t171)
	@ node 132180401531296 did not generate any code
	@ exc: KeyError(reg int t170)
	@ node 132180401531584 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label29
label31:
	@ emptystat
	@ node 132180401668256 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 132180401668352 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 132180401668592 did not generate any code
	@ exc: KeyError(reg int t178)
	@ node 132180401668784 did not generate any code
	@ exc: KeyError(reg int t178)
	@ node 132180401668880 did not generate any code
	@ exc: KeyError(reg int t180)
	@ node 132180401669264 did not generate any code
	@ exc: KeyError(reg int t180)
	@ irnode 132180401780576 type <class 'ir.AssignStat'>
label32:
	@ emptystat
	@ node 132180401680496 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401680784 did not generate any code
	@ exc: KeyError(reg int t192)
	@ node 132180401680928 did not generate any code
	@ exc: KeyError(reg int t191)
	@ node 132180401681456 did not generate any code
	@ exc: KeyError(reg int32_t t193)
	@ node 132180401669504 did not generate any code
	@ exc: KeyError(reg int t181)
	@ node 132180401669792 did not generate any code
	@ exc: KeyError(reg int t182)
	@ node 132180401669936 did not generate any code
	@ exc: KeyError(reg int t181)
	@ node 132180401670224 did not generate any code
	@ exc: KeyError(reg int32_t t183)
	@ node 132180401670320 did not generate any code
	@ exc: KeyError(reg int t185)
	@ node 132180401670704 did not generate any code
	@ exc: KeyError(reg int t185)
	@ node 132180401670896 did not generate any code
	@ exc: KeyError(reg int t187)
	@ node 132180401671280 did not generate any code
	@ exc: KeyError(reg int t187)
	@ node 132180401669456 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401671712 did not generate any code
	@ exc: KeyError(reg int t189)
	@ node 132180401671856 did not generate any code
	@ exc: KeyError(reg int t188)
	@ node 132180401672144 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label32
label34:
	@ emptystat
	@ node 132180401681216 did not generate any code
	@ exc: KeyError(reg int t195)
	@ node 132180401681936 did not generate any code
	@ exc: KeyError(reg int t195)
	@ node 132180401682128 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 132180401682512 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 132180401682752 did not generate any code
	@ exc: KeyError(reg int t198)
	@ node 132180401682944 did not generate any code
	@ exc: KeyError(reg int t198)
	@ node 132180401683040 did not generate any code
	@ exc: KeyError(reg int t200)
	@ node 132180401683424 did not generate any code
	@ exc: KeyError(reg int t200)
	@ irnode 132180402209168 type <class 'ir.AssignStat'>
label35:
	@ emptystat
	@ node 132180401706368 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401706656 did not generate any code
	@ exc: KeyError(reg int t210)
	@ node 132180401706800 did not generate any code
	@ exc: KeyError(reg int t209)
	@ node 132180401707328 did not generate any code
	@ exc: KeyError(reg int32_t t211)
	@ node 132180401683664 did not generate any code
	@ exc: KeyError(reg int t201)
	@ node 132180401683952 did not generate any code
	@ exc: KeyError(reg int t202)
	@ node 132180401684096 did not generate any code
	@ exc: KeyError(reg int t201)
	@ node 132180401684384 did not generate any code
	@ exc: KeyError(reg int32_t t203)
	@ node 132180401705024 did not generate any code
	@ exc: KeyError(reg int t205)
	@ node 132180401705408 did not generate any code
	@ exc: KeyError(reg int t205)
	@ node 132180401705648 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 132180401705840 did not generate any code
	@ exc: KeyError(reg int t207)
	@ node 132180401705984 did not generate any code
	@ exc: KeyError(reg int t206)
	@ node 132180401706272 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label35
label37:
	@ emptystat
	@ node 132180401707088 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 132180401707808 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 132180401708000 did not generate any code
	@ exc: KeyError(reg int t215)
	@ node 132180401708384 did not generate any code
	@ exc: KeyError(reg int t215)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

square:
@ block
	.equ _l_square_test, -4
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #4
	@ irnode 132180401786160 type <class 'ir.StatList'>
	@ node 132180402210656 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 132180402210320 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 132180402210560 did not generate any code
	@ exc: KeyError(reg int t1)
	@ node 132180402210992 did not generate any code
	@ exc: KeyError(reg int t2)
	@ node 132180402211136 did not generate any code
	@ exc: KeyError(reg int t1)
	@ node 132180402211424 did not generate any code
	@ exc: KeyError(reg int32_t t3)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

