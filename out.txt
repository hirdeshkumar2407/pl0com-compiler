['./main.py']
start <function Parser.program at 0x7f96643a96a8>
getsym: varsym var
start <function Parser.block at 0x7f96643a9378>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == comma
getsym: ident y
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == comma
getsym: ident squ
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident arr
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident char
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident multid
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident short
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: procsym procedure
accepting constsym == procsym
accepting varsym == procsym
accepting procsym == procsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
start <function Parser.block at 0x7f96643a9378>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident test
start <function Parser.vardef at 0x7f96643a9598>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7f96643a9598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident test
StatList : new 140283903089856
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up test
Looking up test
expecting becomes
accepting becomes == becomes
getsym: number 1234
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903090080 of type <class 'ir.AssignStat'> to 140283903089856
accepting semicolon == semicolon
getsym: ident squ
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up squ
Looking up squ
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: times *
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
getsym: ident x
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903090360 of type <class 'ir.AssignStat'> to 140283903089856
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140283903089856 : [ 140283903090080 140283903090360 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.block at 0x7f96643a9378>
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
Looking up square
accepting procsym == beginsym
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140283903090584
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: minus -
start <function Parser.expression at 0x7f96643a9048>
getsym: number 1
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903201408 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: read read
start <function Parser.statement at 0x7f96643a9268>
accepting ident == read
accepting callsym == read
accepting beginsym == read
accepting ifsym == read
accepting whilesym == read
accepting print == read
accepting read == read
getsym: ident x
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903201688 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: ident x
start <function Parser.condition at 0x7f96643a9158>
accepting oddsym == ident
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: gtr >
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
getsym: number 100
condition operator gtr number
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.condition at 0x7f96643a9158>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 140283903202080
start <function Parser.statement at 0x7f96643a9268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: minus -
start <function Parser.expression at 0x7f96643a9048>
getsym: ident x
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903090024 of type <class 'ir.PrintStat'> to 140283903202080
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: elsesym else
StatList 140283903202080 : [ 140283903090024 ]
end <function Parser.statement at 0x7f96643a9268>
accepting elsesym == elsesym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 140283903201576
start <function Parser.statement at 0x7f96643a9268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903201800 of type <class 'ir.PrintStat'> to 140283903201576
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140283903201576 : [ 140283903201800 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903202136 of type <class 'ir.IfStat'> to 140283903090584
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903202472 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7f96643a9268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7f96643a9158>
accepting oddsym == ident
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
getsym: number 10
condition operator leq number
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.condition at 0x7f96643a9158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: callsym call
StatList : new 140283903202864
start <function Parser.statement at 0x7f96643a9268>
accepting ident == callsym
accepting callsym == callsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up square
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203032 of type <class 'ir.CallStat'> to 140283903202864
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 1
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203256 of type <class 'ir.AssignStat'> to 140283903202864
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7f96643a9268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident squ
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: endsym end
Looking up squ
Looking up squ
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203592 of type <class 'ir.PrintStat'> to 140283903202864
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140283903202864 : [ 140283903203032 140283903203256 140283903203592 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203424 of type <class 'ir.WhileStat'> to 140283903090584
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 101
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203872 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7f96643a9268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7f96643a9158>
accepting oddsym == ident
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
getsym: number 105
condition operator leq number
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.condition at 0x7f96643a9158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident arr
StatList : new 140283903202192
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 100
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903203088 of type <class 'ir.AssignStat'> to 140283903202192
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7f96643a9268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident arr
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 100
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903204096 of type <class 'ir.PrintStat'> to 140283903202192
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 1
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903204432 of type <class 'ir.AssignStat'> to 140283903202192
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140283903202192 : [ 140283903203088 140283903204096 140283903204432 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903204600 of type <class 'ir.WhileStat'> to 140283903090584
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903204880 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903205104 of type <class 'ir.AssignStat'> to 140283903090584
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7f96643a9268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7f96643a9158>
accepting oddsym == ident
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.condition at 0x7f96643a9158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: whilesym while
StatList : new 140283903225928
start <function Parser.statement at 0x7f96643a9268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident y
start <function Parser.condition at 0x7f96643a9158>
accepting oddsym == ident
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: leq <=
Looking up y
Looking up y
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.condition at 0x7f96643a9158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7f96643a9268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident multid
StatList : new 140283903204488
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident arr
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903226152 of type <class 'ir.AssignStat'> to 140283903204488
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7f96643a9268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident multid
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903226768 of type <class 'ir.PrintStat'> to 140283903204488
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 1
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903227104 of type <class 'ir.AssignStat'> to 140283903204488
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7f96643a9268>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: ident y
start <function Parser.expression at 0x7f96643a9048>
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == ident
getsym: plus +
Looking up y
Looking up y
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
getsym: number 1
start <function Parser.term at 0x7f96643b3ea0>
start <function Parser.factor at 0x7f96643b3d90>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7f96643b3d90>
end <function Parser.term at 0x7f96643b3ea0>
end <function Parser.expression at 0x7f96643a9048>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903227440 of type <class 'ir.AssignStat'> to 140283903204488
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140283903204488 : [ 140283903226152 140283903226768 140283903227104 140283903227440 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903227608 of type <class 'ir.WhileStat'> to 140283903225928
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140283903225928 : [ 140283903227608 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.statement at 0x7f96643a9268>
StatList: appending 140283903227776 of type <class 'ir.WhileStat'> to 140283903090584
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 140283903090584 : [ 140283903201408 140283903201688 140283903202136 140283903202472 140283903203424 140283903203872 140283903204600 140283903204880 140283903205104 140283903227776 ]
end <function Parser.statement at 0x7f96643a9268>
end <function Parser.block at 0x7f96643a9378>
expecting period
accepting period == period
end <function Parser.program at 0x7f96643a96a8>

 <class 'ir.Block'> 140283903227944 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140283903389256 {
	parent = 140283903227944
		children:
		<class 'ir.FunctionDef'> 140283903090640 {
		parent = 140283903389256
			symbol: 	auto function square
			body: 	<class 'ir.Block'> 140283903090528 {
			parent = 140283903090640
				defs: 	<class 'ir.DefinitionList'> 140283903089800 {
				parent = 140283903090528
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				body: 	<class 'ir.StatList'> 140283903089856 {
				parent = 140283903090528
					children:
					<class 'ir.AssignStat'> 140283903090080 {
					parent = 140283903089856
						expr: 	<class 'ir.Const'> 140283903089968 {
						parent = 140283903090080
							value: 	1234
							symbol: 	None
						}
						symbol: 	auto int test
						offset: 	None
					}
					<class 'ir.AssignStat'> 140283903090360 {
					parent = 140283903089856
						expr: 	<class 'ir.BinExpr'> 140283903090248 {
						parent = 140283903090360
							children:
							'times'
							<class 'ir.Var'> 140283903090192 {
							parent = 140283903090248
								symbol: 	global int x
							}
							<class 'ir.Var'> 140283903090304 {
							parent = 140283903090248
								symbol: 	global int x
							}
						}
						symbol: 	global int squ
						offset: 	None
					}
				}
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140283903090584 {
	parent = 140283903227944
		children:
		<class 'ir.AssignStat'> 140283903201408 {
		parent = 140283903090584
			expr: 	<class 'ir.UnExpr'> 140283903201464 {
			parent = 140283903201408
				children:
				'minus'
				<class 'ir.Const'> 140283903201352 {
				parent = 140283903201464
					value: 	1
					symbol: 	None
				}
			}
			symbol: 	global int x
			offset: 	None
		}
		<class 'ir.AssignStat'> 140283903201688 {
		parent = 140283903090584
			expr: 	<class 'ir.ReadStat'> 140283903201632 {
			parent = 140283903201688
			}
			symbol: 	global int x
			offset: 	None
		}
		<class 'ir.IfStat'> 140283903202136 {
		parent = 140283903090584
			cond: 	<class 'ir.BinExpr'> 140283903201912 {
			parent = 140283903202136
				children:
				'gtr'
				<class 'ir.Var'> 140283903201856 {
				parent = 140283903201912
					symbol: 	global int x
				}
				<class 'ir.Const'> 140283903201968 {
				parent = 140283903201912
					value: 	100
					symbol: 	None
				}
			}
			elsepart: 	<class 'ir.StatList'> 140283903201576 {
			parent = 140283903202136
				children:
				<class 'ir.PrintStat'> 140283903201800 {
				parent = 140283903201576
					children:
					<class 'ir.Var'> 140283903201744 {
					parent = 140283903201800
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 140283903201744 {
					parent = 140283903201800
						symbol: 	global int x
					}
				}
			}
			thenpart: 	<class 'ir.StatList'> 140283903202080 {
			parent = 140283903202136
				children:
				<class 'ir.PrintStat'> 140283903090024 {
				parent = 140283903202080
					children:
					<class 'ir.UnExpr'> 140283903090416 {
					parent = 140283903090024
						children:
						'minus'
						<class 'ir.Var'> 140283903090136 {
						parent = 140283903090416
							symbol: 	global int x
						}
					}
					expr: 	<class 'ir.UnExpr'> 140283903090416 {
					parent = 140283903090024
						children:
						'minus'
						<class 'ir.Var'> 140283903090136 {
						parent = 140283903090416
							symbol: 	global int x
						}
					}
				}
			}
		}
		<class 'ir.AssignStat'> 140283903202472 {
		parent = 140283903090584
			expr: 	<class 'ir.Const'> 140283903202360 {
			parent = 140283903202472
				value: 	1
				symbol: 	None
			}
			symbol: 	global int x
			offset: 	None
		}
		<class 'ir.WhileStat'> 140283903203424 {
		parent = 140283903090584
			cond: 	<class 'ir.BinExpr'> 140283903202696 {
			parent = 140283903203424
				children:
				'leq'
				<class 'ir.Var'> 140283903202584 {
				parent = 140283903202696
					symbol: 	global int x
				}
				<class 'ir.Const'> 140283903202640 {
				parent = 140283903202696
					value: 	10
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 140283903202864 {
			parent = 140283903203424
				children:
				<class 'ir.CallStat'> 140283903203032 {
				parent = 140283903202864
					call: 	<class 'ir.CallExpr'> 140283903202976 {
					parent = 140283903203032
						symbol: 	auto function square
					}
				}
				<class 'ir.AssignStat'> 140283903203256 {
				parent = 140283903202864
					expr: 	<class 'ir.BinExpr'> 140283903203144 {
					parent = 140283903203256
						children:
						'plus'
						<class 'ir.Var'> 140283903202808 {
						parent = 140283903203144
							symbol: 	global int x
						}
						<class 'ir.Const'> 140283903203200 {
						parent = 140283903203144
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global int x
					offset: 	None
				}
				<class 'ir.PrintStat'> 140283903203592 {
				parent = 140283903202864
					children:
					<class 'ir.Var'> 140283903203480 {
					parent = 140283903203592
						symbol: 	global int squ
					}
					expr: 	<class 'ir.Var'> 140283903203480 {
					parent = 140283903203592
						symbol: 	global int squ
					}
				}
			}
		}
		<class 'ir.AssignStat'> 140283903203872 {
		parent = 140283903090584
			expr: 	<class 'ir.Const'> 140283903203816 {
			parent = 140283903203872
				value: 	101
				symbol: 	None
			}
			symbol: 	global int x
			offset: 	None
		}
		<class 'ir.WhileStat'> 140283903204600 {
		parent = 140283903090584
			cond: 	<class 'ir.BinExpr'> 140283903201520 {
			parent = 140283903204600
				children:
				'leq'
				<class 'ir.Var'> 140283903204040 {
				parent = 140283903201520
					symbol: 	global int x
				}
				<class 'ir.Const'> 140283903090472 {
				parent = 140283903201520
					value: 	105
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 140283903202192 {
			parent = 140283903204600
				children:
				<class 'ir.AssignStat'> 140283903203088 {
				parent = 140283903202192
					expr: 	<class 'ir.Var'> 140283903202920 {
					parent = 140283903203088
						symbol: 	global int x
					}
					symbol: 	global char[5] arr
					offset: 	<class 'ir.BinExpr'> 140283903202528 {
					parent = 140283903203088
						children:
						'times'
						<class 'ir.BinExpr'> 140283903202416 {
						parent = 140283903202528
							children:
							'minus'
							<class 'ir.Var'> 140283903202304 {
							parent = 140283903202416
								symbol: 	global int x
							}
							<class 'ir.Const'> 140283903202248 {
							parent = 140283903202416
								value: 	100
								symbol: 	None
							}
						}
						<class 'ir.Const'> 140283903202752 {
						parent = 140283903202528
							value: 	1
							symbol: 	None
						}
					}
				}
				<class 'ir.PrintStat'> 140283903204096 {
				parent = 140283903202192
					children:
					<class 'ir.ArrayElement'> 140283903203704 {
					parent = 140283903204096
						children:
						<class 'ir.BinExpr'> 140283903203928 {
						parent = 140283903203704
							children:
							'times'
							<class 'ir.BinExpr'> 140283903203760 {
							parent = 140283903203928
								children:
								'minus'
								<class 'ir.Var'> 140283903203536 {
								parent = 140283903203760
									symbol: 	global int x
								}
								<class 'ir.Const'> 140283903203648 {
								parent = 140283903203760
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140283903203984 {
							parent = 140283903203928
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 140283903203928 {
						parent = 140283903203704
							children:
							'times'
							<class 'ir.BinExpr'> 140283903203760 {
							parent = 140283903203928
								children:
								'minus'
								<class 'ir.Var'> 140283903203536 {
								parent = 140283903203760
									symbol: 	global int x
								}
								<class 'ir.Const'> 140283903203648 {
								parent = 140283903203760
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140283903203984 {
							parent = 140283903203928
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
					expr: 	<class 'ir.ArrayElement'> 140283903203704 {
					parent = 140283903204096
						children:
						<class 'ir.BinExpr'> 140283903203928 {
						parent = 140283903203704
							children:
							'times'
							<class 'ir.BinExpr'> 140283903203760 {
							parent = 140283903203928
								children:
								'minus'
								<class 'ir.Var'> 140283903203536 {
								parent = 140283903203760
									symbol: 	global int x
								}
								<class 'ir.Const'> 140283903203648 {
								parent = 140283903203760
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140283903203984 {
							parent = 140283903203928
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 140283903203928 {
						parent = 140283903203704
							children:
							'times'
							<class 'ir.BinExpr'> 140283903203760 {
							parent = 140283903203928
								children:
								'minus'
								<class 'ir.Var'> 140283903203536 {
								parent = 140283903203760
									symbol: 	global int x
								}
								<class 'ir.Const'> 140283903203648 {
								parent = 140283903203760
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140283903203984 {
							parent = 140283903203928
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
				}
				<class 'ir.AssignStat'> 140283903204432 {
				parent = 140283903202192
					expr: 	<class 'ir.BinExpr'> 140283903204320 {
					parent = 140283903204432
						children:
						'plus'
						<class 'ir.Var'> 140283903204264 {
						parent = 140283903204320
							symbol: 	global int x
						}
						<class 'ir.Const'> 140283903204376 {
						parent = 140283903204320
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global int x
					offset: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 140283903204880 {
		parent = 140283903090584
			expr: 	<class 'ir.Const'> 140283903204768 {
			parent = 140283903204880
				value: 	1
				symbol: 	None
			}
			symbol: 	global int x
			offset: 	None
		}
		<class 'ir.AssignStat'> 140283903205104 {
		parent = 140283903090584
			expr: 	<class 'ir.Const'> 140283903204992 {
			parent = 140283903205104
				value: 	1
				symbol: 	None
			}
			symbol: 	global int y
			offset: 	None
		}
		<class 'ir.WhileStat'> 140283903227776 {
		parent = 140283903090584
			cond: 	<class 'ir.BinExpr'> 140283903225984 {
			parent = 140283903227776
				children:
				'leq'
				<class 'ir.Var'> 140283903205216 {
				parent = 140283903225984
					symbol: 	global int x
				}
				<class 'ir.Const'> 140283903205328 {
				parent = 140283903225984
					value: 	5
					symbol: 	None
				}
			}
			body: 	<class 'ir.StatList'> 140283903225928 {
			parent = 140283903227776
				children:
				<class 'ir.WhileStat'> 140283903227608 {
				parent = 140283903225928
					cond: 	<class 'ir.BinExpr'> 140283903204208 {
					parent = 140283903227608
						children:
						'leq'
						<class 'ir.Var'> 140283903202024 {
						parent = 140283903204208
							symbol: 	global int y
						}
						<class 'ir.Const'> 140283903204152 {
						parent = 140283903204208
							value: 	5
							symbol: 	None
						}
					}
					body: 	<class 'ir.StatList'> 140283903204488 {
					parent = 140283903227608
						children:
						<class 'ir.AssignStat'> 140283903226152 {
						parent = 140283903204488
							expr: 	<class 'ir.ArrayElement'> 140283903226040 {
							parent = 140283903226152
								children:
								<class 'ir.BinExpr'> 140283903226096 {
								parent = 140283903226040
									children:
									'times'
									<class 'ir.Var'> 140283903205160 {
									parent = 140283903226096
										symbol: 	global int x
									}
									<class 'ir.Const'> 140283903205272 {
									parent = 140283903226096
										value: 	1
										symbol: 	None
									}
								}
								offset: 	<class 'ir.BinExpr'> 140283903226096 {
								parent = 140283903226040
									children:
									'times'
									<class 'ir.Var'> 140283903205160 {
									parent = 140283903226096
										symbol: 	global int x
									}
									<class 'ir.Const'> 140283903205272 {
									parent = 140283903226096
										value: 	1
										symbol: 	None
									}
								}
								symbol: 	global char[5] arr
							}
							symbol: 	global short[5, 5] multid
							offset: 	<class 'ir.BinExpr'> 140283903205048 {
							parent = 140283903226152
								children:
								'plus'
								<class 'ir.BinExpr'> 140283903204656 {
								parent = 140283903205048
									children:
									'times'
									<class 'ir.Var'> 140283903203368 {
									parent = 140283903204656
										symbol: 	global int x
									}
									<class 'ir.Const'> 140283903204712 {
									parent = 140283903204656
										value: 	10
										symbol: 	None
									}
								}
								<class 'ir.BinExpr'> 140283903204936 {
								parent = 140283903205048
									children:
									'times'
									<class 'ir.Var'> 140283903204544 {
									parent = 140283903204936
										symbol: 	global int y
									}
									<class 'ir.Const'> 140283903204824 {
									parent = 140283903204936
										value: 	2
										symbol: 	None
									}
								}
							}
						}
						<class 'ir.PrintStat'> 140283903226768 {
						parent = 140283903204488
							children:
							<class 'ir.ArrayElement'> 140283903226712 {
							parent = 140283903226768
								children:
								<class 'ir.BinExpr'> 140283903226656 {
								parent = 140283903226712
									children:
									'plus'
									<class 'ir.BinExpr'> 140283903226544 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226320 {
										parent = 140283903226544
											symbol: 	global int x
										}
										<class 'ir.Const'> 140283903226432 {
										parent = 140283903226544
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140283903226600 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226376 {
										parent = 140283903226600
											symbol: 	global int y
										}
										<class 'ir.Const'> 140283903226488 {
										parent = 140283903226600
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 140283903226656 {
								parent = 140283903226712
									children:
									'plus'
									<class 'ir.BinExpr'> 140283903226544 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226320 {
										parent = 140283903226544
											symbol: 	global int x
										}
										<class 'ir.Const'> 140283903226432 {
										parent = 140283903226544
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140283903226600 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226376 {
										parent = 140283903226600
											symbol: 	global int y
										}
										<class 'ir.Const'> 140283903226488 {
										parent = 140283903226600
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
							expr: 	<class 'ir.ArrayElement'> 140283903226712 {
							parent = 140283903226768
								children:
								<class 'ir.BinExpr'> 140283903226656 {
								parent = 140283903226712
									children:
									'plus'
									<class 'ir.BinExpr'> 140283903226544 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226320 {
										parent = 140283903226544
											symbol: 	global int x
										}
										<class 'ir.Const'> 140283903226432 {
										parent = 140283903226544
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140283903226600 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226376 {
										parent = 140283903226600
											symbol: 	global int y
										}
										<class 'ir.Const'> 140283903226488 {
										parent = 140283903226600
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 140283903226656 {
								parent = 140283903226712
									children:
									'plus'
									<class 'ir.BinExpr'> 140283903226544 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226320 {
										parent = 140283903226544
											symbol: 	global int x
										}
										<class 'ir.Const'> 140283903226432 {
										parent = 140283903226544
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140283903226600 {
									parent = 140283903226656
										children:
										'times'
										<class 'ir.Var'> 140283903226376 {
										parent = 140283903226600
											symbol: 	global int y
										}
										<class 'ir.Const'> 140283903226488 {
										parent = 140283903226600
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
						}
						<class 'ir.AssignStat'> 140283903227104 {
						parent = 140283903204488
							expr: 	<class 'ir.BinExpr'> 140283903226992 {
							parent = 140283903227104
								children:
								'plus'
								<class 'ir.Var'> 140283903226936 {
								parent = 140283903226992
									symbol: 	global int x
								}
								<class 'ir.Const'> 140283903227048 {
								parent = 140283903226992
									value: 	1
									symbol: 	None
								}
							}
							symbol: 	global int x
							offset: 	None
						}
						<class 'ir.AssignStat'> 140283903227440 {
						parent = 140283903204488
							expr: 	<class 'ir.BinExpr'> 140283903227328 {
							parent = 140283903227440
								children:
								'plus'
								<class 'ir.Var'> 140283903227272 {
								parent = 140283903227328
									symbol: 	global int y
								}
								<class 'ir.Const'> 140283903227384 {
								parent = 140283903227328
									value: 	1
									symbol: 	None
								}
							}
							symbol: 	global int y
							offset: 	None
						}
					}
				}
			}
		}
	}
} 

navigating children of <class 'ir.DefinitionList'> 140283903389256 1
<class 'ir.DefinitionList'> 140283903089800
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 2
<class 'ir.Const'> 140283903089968
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090080
<class 'ir.AssignStat'> 140283903090080
navigating children of <class 'ir.BinExpr'> 140283903090248 3
<class 'ir.Var'> 140283903090192
<class 'ir.Var'> 140283903090304
<class 'ir.BinExpr'> 140283903090248
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090360
<class 'ir.AssignStat'> 140283903090360
<class 'ir.StatList'> 140283903089856
StatList 140283903089856 : [ 140283903090080 140283903090360 ]
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
<class 'ir.Block'> 140283903090528
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
<class 'ir.FunctionDef'> 140283903090640
<class 'ir.DefinitionList'> 140283903389256
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 10
navigating children of <class 'ir.UnExpr'> 140283903201464 2
<class 'ir.Const'> 140283903201352
<class 'ir.UnExpr'> 140283903201464
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201408
<class 'ir.AssignStat'> 140283903201408
<class 'ir.ReadStat'> 140283903201632
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201688
<class 'ir.AssignStat'> 140283903201688
navigating children of <class 'ir.BinExpr'> 140283903201912 3
<class 'ir.Var'> 140283903201856
<class 'ir.Const'> 140283903201968
<class 'ir.BinExpr'> 140283903201912
successfully navigated attr  cond  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903201576 1
navigating children of <class 'ir.PrintStat'> 140283903201800 1
<class 'ir.Var'> 140283903201744
<class 'ir.Var'> 140283903201744
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903201800
<class 'ir.PrintStat'> 140283903201800
<class 'ir.StatList'> 140283903201576
StatList 140283903201576 : [ 140283903201800 ]
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903202080 1
navigating children of <class 'ir.PrintStat'> 140283903090024 1
navigating children of <class 'ir.UnExpr'> 140283903090416 2
<class 'ir.Var'> 140283903090136
<class 'ir.UnExpr'> 140283903090416
navigating children of <class 'ir.UnExpr'> 140283903090416 2
<class 'ir.Var'> 140283903090136
<class 'ir.UnExpr'> 140283903090416
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903090024
<class 'ir.PrintStat'> 140283903090024
<class 'ir.StatList'> 140283903202080
StatList 140283903202080 : [ 140283903090024 ]
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140283903202136
<class 'ir.IfStat'> 140283903202136
<class 'ir.Const'> 140283903202360
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903202472
<class 'ir.AssignStat'> 140283903202472
navigating children of <class 'ir.BinExpr'> 140283903202696 3
<class 'ir.Var'> 140283903202584
<class 'ir.Const'> 140283903202640
<class 'ir.BinExpr'> 140283903202696
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903203424
navigating children of <class 'ir.StatList'> 140283903202864 3
<class 'ir.CallExpr'> 140283903202976
successfully navigated attr  call  of <class 'ir.CallStat'> 140283903203032
<class 'ir.CallStat'> 140283903203032
navigating children of <class 'ir.BinExpr'> 140283903203144 3
<class 'ir.Var'> 140283903202808
<class 'ir.Const'> 140283903203200
<class 'ir.BinExpr'> 140283903203144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203256
<class 'ir.AssignStat'> 140283903203256
navigating children of <class 'ir.PrintStat'> 140283903203592 1
<class 'ir.Var'> 140283903203480
<class 'ir.Var'> 140283903203480
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903203592
<class 'ir.PrintStat'> 140283903203592
<class 'ir.StatList'> 140283903202864
StatList 140283903202864 : [ 140283903203032 140283903203256 140283903203592 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903203424
<class 'ir.WhileStat'> 140283903203424
<class 'ir.Const'> 140283903203816
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203872
<class 'ir.AssignStat'> 140283903203872
navigating children of <class 'ir.BinExpr'> 140283903201520 3
<class 'ir.Var'> 140283903204040
<class 'ir.Const'> 140283903090472
<class 'ir.BinExpr'> 140283903201520
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903204600
navigating children of <class 'ir.StatList'> 140283903202192 3
<class 'ir.Var'> 140283903202920
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.BinExpr'> 140283903202528 3
navigating children of <class 'ir.BinExpr'> 140283903202416 3
<class 'ir.Var'> 140283903202304
<class 'ir.Const'> 140283903202248
<class 'ir.BinExpr'> 140283903202416
<class 'ir.Const'> 140283903202752
<class 'ir.BinExpr'> 140283903202528
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903203088
<class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.PrintStat'> 140283903204096 1
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
<class 'ir.Var'> 140283903203536
<class 'ir.Const'> 140283903203648
<class 'ir.BinExpr'> 140283903203760
<class 'ir.Const'> 140283903203984
<class 'ir.BinExpr'> 140283903203928
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
<class 'ir.Var'> 140283903203536
<class 'ir.Const'> 140283903203648
<class 'ir.BinExpr'> 140283903203760
<class 'ir.Const'> 140283903203984
<class 'ir.BinExpr'> 140283903203928
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
<class 'ir.ArrayElement'> 140283903203704
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
<class 'ir.Var'> 140283903203536
<class 'ir.Const'> 140283903203648
<class 'ir.BinExpr'> 140283903203760
<class 'ir.Const'> 140283903203984
<class 'ir.BinExpr'> 140283903203928
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
<class 'ir.Var'> 140283903203536
<class 'ir.Const'> 140283903203648
<class 'ir.BinExpr'> 140283903203760
<class 'ir.Const'> 140283903203984
<class 'ir.BinExpr'> 140283903203928
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
<class 'ir.ArrayElement'> 140283903203704
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903204096
<class 'ir.PrintStat'> 140283903204096
navigating children of <class 'ir.BinExpr'> 140283903204320 3
<class 'ir.Var'> 140283903204264
<class 'ir.Const'> 140283903204376
<class 'ir.BinExpr'> 140283903204320
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204432
<class 'ir.AssignStat'> 140283903204432
<class 'ir.StatList'> 140283903202192
StatList 140283903202192 : [ 140283903203088 140283903204096 140283903204432 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903204600
<class 'ir.WhileStat'> 140283903204600
<class 'ir.Const'> 140283903204768
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204880
<class 'ir.AssignStat'> 140283903204880
<class 'ir.Const'> 140283903204992
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903205104
<class 'ir.AssignStat'> 140283903205104
navigating children of <class 'ir.BinExpr'> 140283903225984 3
<class 'ir.Var'> 140283903205216
<class 'ir.Const'> 140283903205328
<class 'ir.BinExpr'> 140283903225984
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227776
navigating children of <class 'ir.StatList'> 140283903225928 1
navigating children of <class 'ir.BinExpr'> 140283903204208 3
<class 'ir.Var'> 140283903202024
<class 'ir.Const'> 140283903204152
<class 'ir.BinExpr'> 140283903204208
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227608
navigating children of <class 'ir.StatList'> 140283903204488 4
navigating children of <class 'ir.ArrayElement'> 140283903226040 1
navigating children of <class 'ir.BinExpr'> 140283903226096 3
<class 'ir.Var'> 140283903205160
<class 'ir.Const'> 140283903205272
<class 'ir.BinExpr'> 140283903226096
navigating children of <class 'ir.BinExpr'> 140283903226096 3
<class 'ir.Var'> 140283903205160
<class 'ir.Const'> 140283903205272
<class 'ir.BinExpr'> 140283903226096
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226040
<class 'ir.ArrayElement'> 140283903226040
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.BinExpr'> 140283903205048 3
navigating children of <class 'ir.BinExpr'> 140283903204656 3
<class 'ir.Var'> 140283903203368
<class 'ir.Const'> 140283903204712
<class 'ir.BinExpr'> 140283903204656
navigating children of <class 'ir.BinExpr'> 140283903204936 3
<class 'ir.Var'> 140283903204544
<class 'ir.Const'> 140283903204824
<class 'ir.BinExpr'> 140283903204936
<class 'ir.BinExpr'> 140283903205048
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903226152
<class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.PrintStat'> 140283903226768 1
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
<class 'ir.Var'> 140283903226320
<class 'ir.Const'> 140283903226432
<class 'ir.BinExpr'> 140283903226544
navigating children of <class 'ir.BinExpr'> 140283903226600 3
<class 'ir.Var'> 140283903226376
<class 'ir.Const'> 140283903226488
<class 'ir.BinExpr'> 140283903226600
<class 'ir.BinExpr'> 140283903226656
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
<class 'ir.Var'> 140283903226320
<class 'ir.Const'> 140283903226432
<class 'ir.BinExpr'> 140283903226544
navigating children of <class 'ir.BinExpr'> 140283903226600 3
<class 'ir.Var'> 140283903226376
<class 'ir.Const'> 140283903226488
<class 'ir.BinExpr'> 140283903226600
<class 'ir.BinExpr'> 140283903226656
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
<class 'ir.ArrayElement'> 140283903226712
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
<class 'ir.Var'> 140283903226320
<class 'ir.Const'> 140283903226432
<class 'ir.BinExpr'> 140283903226544
navigating children of <class 'ir.BinExpr'> 140283903226600 3
<class 'ir.Var'> 140283903226376
<class 'ir.Const'> 140283903226488
<class 'ir.BinExpr'> 140283903226600
<class 'ir.BinExpr'> 140283903226656
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
<class 'ir.Var'> 140283903226320
<class 'ir.Const'> 140283903226432
<class 'ir.BinExpr'> 140283903226544
navigating children of <class 'ir.BinExpr'> 140283903226600 3
<class 'ir.Var'> 140283903226376
<class 'ir.Const'> 140283903226488
<class 'ir.BinExpr'> 140283903226600
<class 'ir.BinExpr'> 140283903226656
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
<class 'ir.ArrayElement'> 140283903226712
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903226768
<class 'ir.PrintStat'> 140283903226768
navigating children of <class 'ir.BinExpr'> 140283903226992 3
<class 'ir.Var'> 140283903226936
<class 'ir.Const'> 140283903227048
<class 'ir.BinExpr'> 140283903226992
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227104
<class 'ir.AssignStat'> 140283903227104
navigating children of <class 'ir.BinExpr'> 140283903227328 3
<class 'ir.Var'> 140283903227272
<class 'ir.Const'> 140283903227384
<class 'ir.BinExpr'> 140283903227328
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227440
<class 'ir.AssignStat'> 140283903227440
<class 'ir.StatList'> 140283903204488
StatList 140283903204488 : [ 140283903226152 140283903226768 140283903227104 140283903227440 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227608
<class 'ir.WhileStat'> 140283903227608
<class 'ir.StatList'> 140283903225928
StatList 140283903225928 : [ 140283903227608 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227776
<class 'ir.WhileStat'> 140283903227776
<class 'ir.StatList'> 140283903090584
StatList 140283903090584 : [ 140283903201408 140283903201688 140283903202136 140283903202472 140283903203424 140283903203872 140283903204600 140283903204880 140283903205104 140283903227776 ]
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944
<class 'ir.Block'> 140283903227944
navigating children of <class 'ir.DefinitionList'> 140283903389256 1
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090080
navigating children of <class 'ir.BinExpr'> 140283903090248 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090360
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 10
navigating children of <class 'ir.UnExpr'> 140283903201464 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201408
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201688
navigating children of <class 'ir.BinExpr'> 140283903201912 3
successfully navigated attr  cond  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903201576 1
navigating children of <class 'ir.PrintStat'> 140283903201800 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903201800
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903202080 1
navigating children of <class 'ir.PrintStat'> 140283903090024 1
navigating children of <class 'ir.UnExpr'> 140283903090416 2
navigating children of <class 'ir.UnExpr'> 140283903090416 2
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903090024
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140283903202136
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903202472
navigating children of <class 'ir.BinExpr'> 140283903202696 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903203424
navigating children of <class 'ir.StatList'> 140283903202864 3
successfully navigated attr  call  of <class 'ir.CallStat'> 140283903203032
navigating children of <class 'ir.BinExpr'> 140283903203144 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203256
navigating children of <class 'ir.PrintStat'> 140283903203592 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903203592
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903203424
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203872
navigating children of <class 'ir.BinExpr'> 140283903201520 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903204600
navigating children of <class 'ir.StatList'> 140283903202192 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.BinExpr'> 140283903202528 3
navigating children of <class 'ir.BinExpr'> 140283903202416 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.PrintStat'> 140283903204096 1
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903204096
navigating children of <class 'ir.BinExpr'> 140283903204320 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204432
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903204600
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204880
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903205104
navigating children of <class 'ir.BinExpr'> 140283903225984 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227776
navigating children of <class 'ir.StatList'> 140283903225928 1
navigating children of <class 'ir.BinExpr'> 140283903204208 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227608
navigating children of <class 'ir.StatList'> 140283903204488 4
navigating children of <class 'ir.ArrayElement'> 140283903226040 1
navigating children of <class 'ir.BinExpr'> 140283903226096 3
navigating children of <class 'ir.BinExpr'> 140283903226096 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226040
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.BinExpr'> 140283903205048 3
navigating children of <class 'ir.BinExpr'> 140283903204656 3
navigating children of <class 'ir.BinExpr'> 140283903204936 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.PrintStat'> 140283903226768 1
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
navigating children of <class 'ir.BinExpr'> 140283903226600 3
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
navigating children of <class 'ir.BinExpr'> 140283903226600 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
navigating children of <class 'ir.BinExpr'> 140283903226600 3
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
navigating children of <class 'ir.BinExpr'> 140283903226600 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903226768
navigating children of <class 'ir.BinExpr'> 140283903226992 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227104
navigating children of <class 'ir.BinExpr'> 140283903227328 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227440
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227608
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227776
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944
<class 'ir.DefinitionList'> 140283903089800 -> <class 'ir.Block'> 140283903090528
<class 'ir.Const'> 140283903089968 -> <class 'ir.AssignStat'> 140283903090080
<class 'ir.AssignStat'> 140283903090080 -> <class 'ir.StatList'> 140283903089856
<class 'ir.Var'> 140283903090192 -> <class 'ir.BinExpr'> 140283903090248
<class 'ir.Var'> 140283903090304 -> <class 'ir.BinExpr'> 140283903090248
<class 'ir.BinExpr'> 140283903090248 -> <class 'ir.AssignStat'> 140283903090360
<class 'ir.AssignStat'> 140283903090360 -> <class 'ir.StatList'> 140283903089856
<class 'ir.StatList'> 140283903089856 -> <class 'ir.Block'> 140283903090528
<class 'ir.Block'> 140283903090528 -> <class 'ir.FunctionDef'> 140283903090640
<class 'ir.FunctionDef'> 140283903090640 -> <class 'ir.DefinitionList'> 140283903389256
<class 'ir.DefinitionList'> 140283903389256 -> <class 'ir.Block'> 140283903227944
<class 'ir.Const'> 140283903201352 -> <class 'ir.UnExpr'> 140283903201464
<class 'ir.UnExpr'> 140283903201464 -> <class 'ir.AssignStat'> 140283903201408
<class 'ir.AssignStat'> 140283903201408 -> <class 'ir.StatList'> 140283903090584
<class 'ir.ReadStat'> 140283903201632 -> <class 'ir.AssignStat'> 140283903201688
<class 'ir.AssignStat'> 140283903201688 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Var'> 140283903201856 -> <class 'ir.BinExpr'> 140283903201912
<class 'ir.Const'> 140283903201968 -> <class 'ir.BinExpr'> 140283903201912
<class 'ir.BinExpr'> 140283903201912 -> <class 'ir.IfStat'> 140283903202136
<class 'ir.Var'> 140283903201744 -> <class 'ir.PrintStat'> 140283903201800
<class 'ir.PrintStat'> 140283903201800 -> <class 'ir.StatList'> 140283903201576
<class 'ir.StatList'> 140283903201576 -> <class 'ir.IfStat'> 140283903202136
<class 'ir.Var'> 140283903090136 -> <class 'ir.UnExpr'> 140283903090416
<class 'ir.UnExpr'> 140283903090416 -> <class 'ir.PrintStat'> 140283903090024
<class 'ir.PrintStat'> 140283903090024 -> <class 'ir.StatList'> 140283903202080
<class 'ir.StatList'> 140283903202080 -> <class 'ir.IfStat'> 140283903202136
<class 'ir.IfStat'> 140283903202136 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Const'> 140283903202360 -> <class 'ir.AssignStat'> 140283903202472
<class 'ir.AssignStat'> 140283903202472 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Var'> 140283903202584 -> <class 'ir.BinExpr'> 140283903202696
<class 'ir.Const'> 140283903202640 -> <class 'ir.BinExpr'> 140283903202696
<class 'ir.BinExpr'> 140283903202696 -> <class 'ir.WhileStat'> 140283903203424
<class 'ir.CallExpr'> 140283903202976 -> <class 'ir.CallStat'> 140283903203032
<class 'ir.CallStat'> 140283903203032 -> <class 'ir.StatList'> 140283903202864
<class 'ir.Var'> 140283903202808 -> <class 'ir.BinExpr'> 140283903203144
<class 'ir.Const'> 140283903203200 -> <class 'ir.BinExpr'> 140283903203144
<class 'ir.BinExpr'> 140283903203144 -> <class 'ir.AssignStat'> 140283903203256
<class 'ir.AssignStat'> 140283903203256 -> <class 'ir.StatList'> 140283903202864
<class 'ir.Var'> 140283903203480 -> <class 'ir.PrintStat'> 140283903203592
<class 'ir.PrintStat'> 140283903203592 -> <class 'ir.StatList'> 140283903202864
<class 'ir.StatList'> 140283903202864 -> <class 'ir.WhileStat'> 140283903203424
<class 'ir.WhileStat'> 140283903203424 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Const'> 140283903203816 -> <class 'ir.AssignStat'> 140283903203872
<class 'ir.AssignStat'> 140283903203872 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Var'> 140283903204040 -> <class 'ir.BinExpr'> 140283903201520
<class 'ir.Const'> 140283903090472 -> <class 'ir.BinExpr'> 140283903201520
<class 'ir.BinExpr'> 140283903201520 -> <class 'ir.WhileStat'> 140283903204600
<class 'ir.Var'> 140283903202920 -> <class 'ir.AssignStat'> 140283903203088
<class 'ir.Var'> 140283903202304 -> <class 'ir.BinExpr'> 140283903202416
<class 'ir.Const'> 140283903202248 -> <class 'ir.BinExpr'> 140283903202416
<class 'ir.BinExpr'> 140283903202416 -> <class 'ir.BinExpr'> 140283903202528
<class 'ir.Const'> 140283903202752 -> <class 'ir.BinExpr'> 140283903202528
<class 'ir.BinExpr'> 140283903202528 -> <class 'ir.AssignStat'> 140283903203088
<class 'ir.AssignStat'> 140283903203088 -> <class 'ir.StatList'> 140283903202192
<class 'ir.Var'> 140283903203536 -> <class 'ir.BinExpr'> 140283903203760
<class 'ir.Const'> 140283903203648 -> <class 'ir.BinExpr'> 140283903203760
<class 'ir.BinExpr'> 140283903203760 -> <class 'ir.BinExpr'> 140283903203928
<class 'ir.Const'> 140283903203984 -> <class 'ir.BinExpr'> 140283903203928
<class 'ir.BinExpr'> 140283903203928 -> <class 'ir.ArrayElement'> 140283903203704
<class 'ir.ArrayElement'> 140283903203704 -> <class 'ir.PrintStat'> 140283903204096
<class 'ir.PrintStat'> 140283903204096 -> <class 'ir.StatList'> 140283903202192
<class 'ir.Var'> 140283903204264 -> <class 'ir.BinExpr'> 140283903204320
<class 'ir.Const'> 140283903204376 -> <class 'ir.BinExpr'> 140283903204320
<class 'ir.BinExpr'> 140283903204320 -> <class 'ir.AssignStat'> 140283903204432
<class 'ir.AssignStat'> 140283903204432 -> <class 'ir.StatList'> 140283903202192
<class 'ir.StatList'> 140283903202192 -> <class 'ir.WhileStat'> 140283903204600
<class 'ir.WhileStat'> 140283903204600 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Const'> 140283903204768 -> <class 'ir.AssignStat'> 140283903204880
<class 'ir.AssignStat'> 140283903204880 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Const'> 140283903204992 -> <class 'ir.AssignStat'> 140283903205104
<class 'ir.AssignStat'> 140283903205104 -> <class 'ir.StatList'> 140283903090584
<class 'ir.Var'> 140283903205216 -> <class 'ir.BinExpr'> 140283903225984
<class 'ir.Const'> 140283903205328 -> <class 'ir.BinExpr'> 140283903225984
<class 'ir.BinExpr'> 140283903225984 -> <class 'ir.WhileStat'> 140283903227776
<class 'ir.Var'> 140283903202024 -> <class 'ir.BinExpr'> 140283903204208
<class 'ir.Const'> 140283903204152 -> <class 'ir.BinExpr'> 140283903204208
<class 'ir.BinExpr'> 140283903204208 -> <class 'ir.WhileStat'> 140283903227608
<class 'ir.Var'> 140283903205160 -> <class 'ir.BinExpr'> 140283903226096
<class 'ir.Const'> 140283903205272 -> <class 'ir.BinExpr'> 140283903226096
<class 'ir.BinExpr'> 140283903226096 -> <class 'ir.ArrayElement'> 140283903226040
<class 'ir.ArrayElement'> 140283903226040 -> <class 'ir.AssignStat'> 140283903226152
<class 'ir.Var'> 140283903203368 -> <class 'ir.BinExpr'> 140283903204656
<class 'ir.Const'> 140283903204712 -> <class 'ir.BinExpr'> 140283903204656
<class 'ir.BinExpr'> 140283903204656 -> <class 'ir.BinExpr'> 140283903205048
<class 'ir.Var'> 140283903204544 -> <class 'ir.BinExpr'> 140283903204936
<class 'ir.Const'> 140283903204824 -> <class 'ir.BinExpr'> 140283903204936
<class 'ir.BinExpr'> 140283903204936 -> <class 'ir.BinExpr'> 140283903205048
<class 'ir.BinExpr'> 140283903205048 -> <class 'ir.AssignStat'> 140283903226152
<class 'ir.AssignStat'> 140283903226152 -> <class 'ir.StatList'> 140283903204488
<class 'ir.Var'> 140283903226320 -> <class 'ir.BinExpr'> 140283903226544
<class 'ir.Const'> 140283903226432 -> <class 'ir.BinExpr'> 140283903226544
<class 'ir.BinExpr'> 140283903226544 -> <class 'ir.BinExpr'> 140283903226656
<class 'ir.Var'> 140283903226376 -> <class 'ir.BinExpr'> 140283903226600
<class 'ir.Const'> 140283903226488 -> <class 'ir.BinExpr'> 140283903226600
<class 'ir.BinExpr'> 140283903226600 -> <class 'ir.BinExpr'> 140283903226656
<class 'ir.BinExpr'> 140283903226656 -> <class 'ir.ArrayElement'> 140283903226712
<class 'ir.ArrayElement'> 140283903226712 -> <class 'ir.PrintStat'> 140283903226768
<class 'ir.PrintStat'> 140283903226768 -> <class 'ir.StatList'> 140283903204488
<class 'ir.Var'> 140283903226936 -> <class 'ir.BinExpr'> 140283903226992
<class 'ir.Const'> 140283903227048 -> <class 'ir.BinExpr'> 140283903226992
<class 'ir.BinExpr'> 140283903226992 -> <class 'ir.AssignStat'> 140283903227104
<class 'ir.AssignStat'> 140283903227104 -> <class 'ir.StatList'> 140283903204488
<class 'ir.Var'> 140283903227272 -> <class 'ir.BinExpr'> 140283903227328
<class 'ir.Const'> 140283903227384 -> <class 'ir.BinExpr'> 140283903227328
<class 'ir.BinExpr'> 140283903227328 -> <class 'ir.AssignStat'> 140283903227440
<class 'ir.AssignStat'> 140283903227440 -> <class 'ir.StatList'> 140283903204488
<class 'ir.StatList'> 140283903204488 -> <class 'ir.WhileStat'> 140283903227608
<class 'ir.WhileStat'> 140283903227608 -> <class 'ir.StatList'> 140283903225928
<class 'ir.StatList'> 140283903225928 -> <class 'ir.WhileStat'> 140283903227776
<class 'ir.WhileStat'> 140283903227776 -> <class 'ir.StatList'> 140283903090584
<class 'ir.StatList'> 140283903090584 -> <class 'ir.Block'> 140283903227944
<class 'ir.Block'> 140283903227944 -> <class 'NoneType'> 10306432

Total nodes in IR: 112 

navigating children of <class 'ir.DefinitionList'> 140283903389256 1
Cannot lower 140283903089800 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 2
StatList : new 140283903242368
Lowering <class 'ir.Const'> 140283903089968
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090080
StatList : new 140283903242592
Lowering <class 'ir.AssignStat'> 140283903090080
navigating children of <class 'ir.BinExpr'> 140283903090248 3
StatList : new 140283903243040
Lowering <class 'ir.Var'> 140283903090192
StatList : new 140283903243320
Lowering <class 'ir.Var'> 140283903090304
StatList : new 140283903243656
Lowering <class 'ir.BinExpr'> 140283903090248
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903090360
StatList : new 140283903243880
Lowering <class 'ir.AssignStat'> 140283903090360
Cannot lower 140283903089856 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
Cannot lower 140283903090528 <class 'ir.Block'> 'Block' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
Cannot lower 140283903090640 <class 'ir.FunctionDef'> 'FunctionDef' object has no attribute 'lower'
Cannot lower 140283903389256 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 10
navigating children of <class 'ir.UnExpr'> 140283903201464 2
StatList : new 140283903244608
Lowering <class 'ir.Const'> 140283903201352
StatList : new 140283903244832
Lowering <class 'ir.UnExpr'> 140283903201464
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201408
StatList : new 140283903245056
Lowering <class 'ir.AssignStat'> 140283903201408
StatList : new 140283903245336
Lowering <class 'ir.ReadStat'> 140283903201632
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903201688
StatList : new 140283903245560
Lowering <class 'ir.AssignStat'> 140283903201688
navigating children of <class 'ir.BinExpr'> 140283903201912 3
StatList : new 140283903246008
Lowering <class 'ir.Var'> 140283903201856
StatList : new 140283903246288
Lowering <class 'ir.Const'> 140283903201968
StatList : new 140283903287648
Lowering <class 'ir.BinExpr'> 140283903201912
successfully navigated attr  cond  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903201576 1
navigating children of <class 'ir.PrintStat'> 140283903201800 1
StatList : new 140283903288320
Lowering <class 'ir.Var'> 140283903201744
StatList : new 140283903288544
Lowering <class 'ir.Var'> 140283903201744
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903201800
StatList : new 140283903288768
Lowering <class 'ir.PrintStat'> 140283903201800
Cannot lower 140283903201576 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140283903202136
navigating children of <class 'ir.StatList'> 140283903202080 1
navigating children of <class 'ir.PrintStat'> 140283903090024 1
navigating children of <class 'ir.UnExpr'> 140283903090416 2
StatList : new 140283903289608
Lowering <class 'ir.Var'> 140283903090136
StatList : new 140283903289832
Lowering <class 'ir.UnExpr'> 140283903090416
navigating children of <class 'ir.UnExpr'> 140283903090416 2
navigating children of <class 'ir.StatList'> 140283903289608 1
Cannot lower 140283903289552 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283903289608 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140283903227832
Lowering <class 'ir.UnExpr'> 140283903090416
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903090024
StatList : new 140283903227216
Lowering <class 'ir.PrintStat'> 140283903090024
Cannot lower 140283903202080 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140283903202136
StatList : new 140283903229456
Lowering <class 'ir.IfStat'> 140283903202136
StatList : new 140283903229904
Lowering <class 'ir.Const'> 140283903202360
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903202472
StatList : new 140283903228896
Lowering <class 'ir.AssignStat'> 140283903202472
navigating children of <class 'ir.BinExpr'> 140283903202696 3
StatList : new 140283903228784
Lowering <class 'ir.Var'> 140283903202584
StatList : new 140283903229288
Lowering <class 'ir.Const'> 140283903202640
StatList : new 140283903250504
Lowering <class 'ir.BinExpr'> 140283903202696
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903203424
navigating children of <class 'ir.StatList'> 140283903202864 3
Cannot lower 140283903202976 <class 'ir.CallExpr'> 'CallExpr' object has no attribute 'lower'
successfully navigated attr  call  of <class 'ir.CallStat'> 140283903203032
Lowering <class 'ir.CallStat'> 140283903203032
navigating children of <class 'ir.BinExpr'> 140283903203144 3
StatList : new 140283903251568
Lowering <class 'ir.Var'> 140283903202808
StatList : new 140283903251848
Lowering <class 'ir.Const'> 140283903203200
StatList : new 140283903252240
Lowering <class 'ir.BinExpr'> 140283903203144
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203256
StatList : new 140283903252184
Lowering <class 'ir.AssignStat'> 140283903203256
navigating children of <class 'ir.PrintStat'> 140283903203592 1
StatList : new 140283903252800
Lowering <class 'ir.Var'> 140283903203480
StatList : new 140283903253024
Lowering <class 'ir.Var'> 140283903203480
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903203592
StatList : new 140283903253192
Lowering <class 'ir.PrintStat'> 140283903203592
Cannot lower 140283903202864 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903203424
StatList : new 140283903253864
Lowering <class 'ir.WhileStat'> 140283903203424
StatList : new 140283903252688
Lowering <class 'ir.Const'> 140283903203816
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203872
StatList : new 140283903254312
Lowering <class 'ir.AssignStat'> 140283903203872
navigating children of <class 'ir.BinExpr'> 140283903201520 3
StatList : new 140283903243096
Lowering <class 'ir.Var'> 140283903204040
StatList : new 140283903243992
Lowering <class 'ir.Const'> 140283903090472
StatList : new 140283903244664
Lowering <class 'ir.BinExpr'> 140283903201520
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903204600
navigating children of <class 'ir.StatList'> 140283903202192 3
StatList : new 140283903246064
Lowering <class 'ir.Var'> 140283903202920
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.BinExpr'> 140283903202528 3
navigating children of <class 'ir.BinExpr'> 140283903202416 3
StatList : new 140283903288656
Lowering <class 'ir.Var'> 140283903202304
StatList : new 140283903288992
Lowering <class 'ir.Const'> 140283903202248
StatList : new 140283903289888
Lowering <class 'ir.BinExpr'> 140283903202416
StatList : new 140283903290168
Lowering <class 'ir.Const'> 140283903202752
StatList : new 140283903290504
Lowering <class 'ir.BinExpr'> 140283903202528
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903203088
StatList : new 140283903291344
Lowering <class 'ir.AssignStat'> 140283903203088
navigating children of <class 'ir.PrintStat'> 140283903204096 1
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.BinExpr'> 140283903203760 3
StatList : new 140283903259480
Lowering <class 'ir.Var'> 140283903203536
StatList : new 140283903259760
Lowering <class 'ir.Const'> 140283903203648
StatList : new 140283903260096
Lowering <class 'ir.BinExpr'> 140283903203760
StatList : new 140283903260376
Lowering <class 'ir.Const'> 140283903203984
StatList : new 140283903260712
Lowering <class 'ir.BinExpr'> 140283903203928
navigating children of <class 'ir.BinExpr'> 140283903203928 3
navigating children of <class 'ir.StatList'> 140283903260096 3
navigating children of <class 'ir.StatList'> 140283903259480 1
Cannot lower 140283903259424 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283903259480 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903259760 1
Cannot lower 140283903259704 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903259760 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283903260040 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283903260096 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903260376 1
Cannot lower 140283903260320 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903260376 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140283903261944
Lowering <class 'ir.BinExpr'> 140283903203928
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
StatList : new 140283903254656
Lowering <class 'ir.ArrayElement'> 140283903203704
navigating children of <class 'ir.ArrayElement'> 140283903203704 1
navigating children of <class 'ir.StatList'> 140283903260712 3
navigating children of <class 'ir.StatList'> 140283903260096 3
navigating children of <class 'ir.StatList'> 140283903259480 1
Cannot lower 140283903259424 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283903259480 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903259760 1
Cannot lower 140283903259704 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903259760 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283903260040 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283903260096 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903260376 1
Cannot lower 140283903260320 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903260376 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283903260656 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283903260712 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903261944 3
navigating children of <class 'ir.StatList'> 140283903260096 3
navigating children of <class 'ir.StatList'> 140283903259480 1
Cannot lower 140283903259424 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283903259480 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903259760 1
Cannot lower 140283903259704 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903259760 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283903260040 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283903260096 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903260376 1
Cannot lower 140283903260320 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903260376 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283903261888 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283903261944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903203704
StatList : new 140283903250728
Lowering <class 'ir.ArrayElement'> 140283903203704
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903204096
StatList : new 140283903251008
Lowering <class 'ir.PrintStat'> 140283903204096
navigating children of <class 'ir.BinExpr'> 140283903204320 3
StatList : new 140283903251960
Lowering <class 'ir.Var'> 140283903204264
StatList : new 140283903253136
Lowering <class 'ir.Const'> 140283903204376
StatList : new 140283903254200
Lowering <class 'ir.BinExpr'> 140283903204320
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204432
StatList : new 140283903243376
Lowering <class 'ir.AssignStat'> 140283903204432
Cannot lower 140283903202192 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903204600
StatList : new 140283903287816
Lowering <class 'ir.WhileStat'> 140283903204600
StatList : new 140283903290224
Lowering <class 'ir.Const'> 140283903204768
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903204880
StatList : new 140283903258696
Lowering <class 'ir.AssignStat'> 140283903204880
StatList : new 140283903259144
Lowering <class 'ir.Const'> 140283903204992
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903205104
StatList : new 140283903260152
Lowering <class 'ir.AssignStat'> 140283903205104
navigating children of <class 'ir.BinExpr'> 140283903225984 3
StatList : new 140283903261160
Lowering <class 'ir.Var'> 140283903205216
StatList : new 140283903261440
Lowering <class 'ir.Const'> 140283903205328
StatList : new 140283903262000
Lowering <class 'ir.BinExpr'> 140283903225984
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227776
navigating children of <class 'ir.StatList'> 140283903225928 1
navigating children of <class 'ir.BinExpr'> 140283903204208 3
StatList : new 140283903255384
Lowering <class 'ir.Var'> 140283903202024
StatList : new 140283903255608
Lowering <class 'ir.Const'> 140283903204152
StatList : new 140283903255888
Lowering <class 'ir.BinExpr'> 140283903204208
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140283903227608
navigating children of <class 'ir.StatList'> 140283903204488 4
navigating children of <class 'ir.ArrayElement'> 140283903226040 1
navigating children of <class 'ir.BinExpr'> 140283903226096 3
StatList : new 140283903256672
Lowering <class 'ir.Var'> 140283903205160
StatList : new 140283903256952
Lowering <class 'ir.Const'> 140283903205272
StatList : new 140283903257288
Lowering <class 'ir.BinExpr'> 140283903226096
navigating children of <class 'ir.BinExpr'> 140283903226096 3
navigating children of <class 'ir.StatList'> 140283903256672 1
Cannot lower 140283903256616 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283903256672 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283903256952 1
Cannot lower 140283903256896 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283903256952 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140283903258128
Lowering <class 'ir.BinExpr'> 140283903226096
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226040
StatList : new 140283902792088
Lowering <class 'ir.ArrayElement'> 140283903226040
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.BinExpr'> 140283903205048 3
navigating children of <class 'ir.BinExpr'> 140283903204656 3
StatList : new 140283902792704
Lowering <class 'ir.Var'> 140283903203368
StatList : new 140283902792984
Lowering <class 'ir.Const'> 140283903204712
StatList : new 140283902793320
Lowering <class 'ir.BinExpr'> 140283903204656
navigating children of <class 'ir.BinExpr'> 140283903204936 3
StatList : new 140283902793768
Lowering <class 'ir.Var'> 140283903204544
StatList : new 140283902794048
Lowering <class 'ir.Const'> 140283903204824
StatList : new 140283902794384
Lowering <class 'ir.BinExpr'> 140283903204936
StatList : new 140283902794720
Lowering <class 'ir.BinExpr'> 140283903205048
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140283903226152
StatList : new 140283902795560
Lowering <class 'ir.AssignStat'> 140283903226152
navigating children of <class 'ir.PrintStat'> 140283903226768 1
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.BinExpr'> 140283903226544 3
StatList : new 140283902804656
Lowering <class 'ir.Var'> 140283903226320
StatList : new 140283902804936
Lowering <class 'ir.Const'> 140283903226432
StatList : new 140283902805272
Lowering <class 'ir.BinExpr'> 140283903226544
navigating children of <class 'ir.BinExpr'> 140283903226600 3
StatList : new 140283902805720
Lowering <class 'ir.Var'> 140283903226376
StatList : new 140283902806000
Lowering <class 'ir.Const'> 140283903226488
StatList : new 140283902806336
Lowering <class 'ir.BinExpr'> 140283903226600
StatList : new 140283902806672
Lowering <class 'ir.BinExpr'> 140283903226656
navigating children of <class 'ir.BinExpr'> 140283903226656 3
navigating children of <class 'ir.StatList'> 140283902805272 3
navigating children of <class 'ir.StatList'> 140283902804656 1
Cannot lower 140283902804600 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902804656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902804936 1
Cannot lower 140283902804880 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902804936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902805216 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902805272 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806336 3
navigating children of <class 'ir.StatList'> 140283902805720 1
Cannot lower 140283902805664 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902805720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806000 1
Cannot lower 140283902805944 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902806000 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902806280 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902806336 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140283902816608
Lowering <class 'ir.BinExpr'> 140283903226656
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
StatList : new 140283902817448
Lowering <class 'ir.ArrayElement'> 140283903226712
navigating children of <class 'ir.ArrayElement'> 140283903226712 1
navigating children of <class 'ir.StatList'> 140283902806672 3
navigating children of <class 'ir.StatList'> 140283902805272 3
navigating children of <class 'ir.StatList'> 140283902804656 1
Cannot lower 140283902804600 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902804656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902804936 1
Cannot lower 140283902804880 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902804936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902805216 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902805272 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806336 3
navigating children of <class 'ir.StatList'> 140283902805720 1
Cannot lower 140283902805664 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902805720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806000 1
Cannot lower 140283902805944 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902806000 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902806280 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902806336 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902806616 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902806672 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902816608 3
navigating children of <class 'ir.StatList'> 140283902805272 3
navigating children of <class 'ir.StatList'> 140283902804656 1
Cannot lower 140283902804600 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902804656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902804936 1
Cannot lower 140283902804880 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902804936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902805216 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902805272 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806336 3
navigating children of <class 'ir.StatList'> 140283902805720 1
Cannot lower 140283902805664 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140283902805720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140283902806000 1
Cannot lower 140283902805944 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140283902806000 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902806280 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902806336 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140283902816552 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140283902816608 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140283903226712
StatList : new 140283903258184
Lowering <class 'ir.ArrayElement'> 140283903226712
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140283903226768
StatList : new 140283902804208
Lowering <class 'ir.PrintStat'> 140283903226768
navigating children of <class 'ir.BinExpr'> 140283903226992 3
StatList : new 140283902805776
Lowering <class 'ir.Var'> 140283903226936
StatList : new 140283902806784
Lowering <class 'ir.Const'> 140283903227048
StatList : new 140283902807176
Lowering <class 'ir.BinExpr'> 140283903226992
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227104
StatList : new 140283902807456
Lowering <class 'ir.AssignStat'> 140283903227104
navigating children of <class 'ir.BinExpr'> 140283903227328 3
StatList : new 140283902807904
Lowering <class 'ir.Var'> 140283903227272
StatList : new 140283902792200
Lowering <class 'ir.Const'> 140283903227384
StatList : new 140283902793376
Lowering <class 'ir.BinExpr'> 140283903227328
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140283903227440
StatList : new 140283902794104
Lowering <class 'ir.AssignStat'> 140283903227440
Cannot lower 140283903204488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227608
StatList : new 140283902817840
Lowering <class 'ir.WhileStat'> 140283903227608
Cannot lower 140283903225928 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140283903227776
StatList : new 140283902818008
Lowering <class 'ir.WhileStat'> 140283903227776
Cannot lower 140283903090584 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944
Cannot lower 140283903227944 <class 'ir.Block'> 'Block' object has no attribute 'lower'
navigating children of <class 'ir.DefinitionList'> 140283903389256 1
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 2
navigating children of <class 'ir.StatList'> 140283903242592 2
navigating children of <class 'ir.StatList'> 140283903242368 1
navigating children of <class 'ir.StatList'> 140283903243880 2
navigating children of <class 'ir.StatList'> 140283903243656 3
navigating children of <class 'ir.StatList'> 140283903243040 1
navigating children of <class 'ir.StatList'> 140283903243320 1
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 10
navigating children of <class 'ir.StatList'> 140283903245056 2
navigating children of <class 'ir.StatList'> 140283903244832 2
navigating children of <class 'ir.StatList'> 140283903244608 1
navigating children of <class 'ir.StatList'> 140283903245560 2
navigating children of <class 'ir.StatList'> 140283903245336 1
navigating children of <class 'ir.StatList'> 140283903229456 6
navigating children of <class 'ir.StatList'> 140283903287648 3
navigating children of <class 'ir.StatList'> 140283903246008 1
navigating children of <class 'ir.StatList'> 140283903246288 1
navigating children of <class 'ir.StatList'> 140283903201576 1
navigating children of <class 'ir.StatList'> 140283903288768 2
navigating children of <class 'ir.StatList'> 140283903288544 1
navigating children of <class 'ir.StatList'> 140283903202080 1
navigating children of <class 'ir.StatList'> 140283903227216 2
navigating children of <class 'ir.StatList'> 140283903227832 2
navigating children of <class 'ir.StatList'> 140283903289608 1
navigating children of <class 'ir.StatList'> 140283903228896 2
navigating children of <class 'ir.StatList'> 140283903229904 1
navigating children of <class 'ir.StatList'> 140283903253864 5
navigating children of <class 'ir.StatList'> 140283903250504 3
navigating children of <class 'ir.StatList'> 140283903228784 1
navigating children of <class 'ir.StatList'> 140283903229288 1
navigating children of <class 'ir.StatList'> 140283903202864 3
navigating children of <class 'ir.StatList'> 140283903252184 2
navigating children of <class 'ir.StatList'> 140283903252240 3
navigating children of <class 'ir.StatList'> 140283903251568 1
navigating children of <class 'ir.StatList'> 140283903251848 1
navigating children of <class 'ir.StatList'> 140283903253192 2
navigating children of <class 'ir.StatList'> 140283903253024 1
navigating children of <class 'ir.StatList'> 140283903254312 2
navigating children of <class 'ir.StatList'> 140283903252688 1
navigating children of <class 'ir.StatList'> 140283903287816 5
navigating children of <class 'ir.StatList'> 140283903244664 3
navigating children of <class 'ir.StatList'> 140283903243096 1
navigating children of <class 'ir.StatList'> 140283903243992 1
navigating children of <class 'ir.StatList'> 140283903202192 3
navigating children of <class 'ir.StatList'> 140283903291344 5
navigating children of <class 'ir.StatList'> 140283903246064 1
navigating children of <class 'ir.StatList'> 140283903290504 3
navigating children of <class 'ir.StatList'> 140283903289888 3
navigating children of <class 'ir.StatList'> 140283903288656 1
navigating children of <class 'ir.StatList'> 140283903288992 1
navigating children of <class 'ir.StatList'> 140283903290168 1
navigating children of <class 'ir.StatList'> 140283903251008 2
navigating children of <class 'ir.StatList'> 140283903250728 4
navigating children of <class 'ir.StatList'> 140283903261944 3
navigating children of <class 'ir.StatList'> 140283903260096 3
navigating children of <class 'ir.StatList'> 140283903259480 1
navigating children of <class 'ir.StatList'> 140283903259760 1
navigating children of <class 'ir.StatList'> 140283903260376 1
navigating children of <class 'ir.StatList'> 140283903243376 2
navigating children of <class 'ir.StatList'> 140283903254200 3
navigating children of <class 'ir.StatList'> 140283903251960 1
navigating children of <class 'ir.StatList'> 140283903253136 1
navigating children of <class 'ir.StatList'> 140283903258696 2
navigating children of <class 'ir.StatList'> 140283903290224 1
navigating children of <class 'ir.StatList'> 140283903260152 2
navigating children of <class 'ir.StatList'> 140283903259144 1
navigating children of <class 'ir.StatList'> 140283902818008 5
navigating children of <class 'ir.StatList'> 140283903262000 3
navigating children of <class 'ir.StatList'> 140283903261160 1
navigating children of <class 'ir.StatList'> 140283903261440 1
navigating children of <class 'ir.StatList'> 140283903225928 1
navigating children of <class 'ir.StatList'> 140283902817840 5
navigating children of <class 'ir.StatList'> 140283903255888 3
navigating children of <class 'ir.StatList'> 140283903255384 1
navigating children of <class 'ir.StatList'> 140283903255608 1
navigating children of <class 'ir.StatList'> 140283903204488 4
navigating children of <class 'ir.StatList'> 140283902795560 5
navigating children of <class 'ir.StatList'> 140283902792088 4
navigating children of <class 'ir.StatList'> 140283903258128 3
navigating children of <class 'ir.StatList'> 140283903256672 1
navigating children of <class 'ir.StatList'> 140283903256952 1
navigating children of <class 'ir.StatList'> 140283902794720 3
navigating children of <class 'ir.StatList'> 140283902793320 3
navigating children of <class 'ir.StatList'> 140283902792704 1
navigating children of <class 'ir.StatList'> 140283902792984 1
navigating children of <class 'ir.StatList'> 140283902794384 3
navigating children of <class 'ir.StatList'> 140283902793768 1
navigating children of <class 'ir.StatList'> 140283902794048 1
navigating children of <class 'ir.StatList'> 140283902804208 2
navigating children of <class 'ir.StatList'> 140283903258184 4
navigating children of <class 'ir.StatList'> 140283902816608 3
navigating children of <class 'ir.StatList'> 140283902805272 3
navigating children of <class 'ir.StatList'> 140283902804656 1
navigating children of <class 'ir.StatList'> 140283902804936 1
navigating children of <class 'ir.StatList'> 140283902806336 3
navigating children of <class 'ir.StatList'> 140283902805720 1
navigating children of <class 'ir.StatList'> 140283902806000 1
navigating children of <class 'ir.StatList'> 140283902807456 2
navigating children of <class 'ir.StatList'> 140283902807176 3
navigating children of <class 'ir.StatList'> 140283902805776 1
navigating children of <class 'ir.StatList'> 140283902806784 1
navigating children of <class 'ir.StatList'> 140283902794104 2
navigating children of <class 'ir.StatList'> 140283902793376 3
navigating children of <class 'ir.StatList'> 140283902807904 1
navigating children of <class 'ir.StatList'> 140283902792200 1
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944

 <class 'ir.Block'> 140283903227944 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140283903389256 {
	parent = 140283903227944
		children:
		<class 'ir.FunctionDef'> 140283903090640 {
		parent = 140283903389256
			symbol: 	auto function square
			body: 	<class 'ir.Block'> 140283903090528 {
			parent = 140283903090640
				defs: 	<class 'ir.DefinitionList'> 140283903089800 {
				parent = 140283903090528
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				body: 	<class 'ir.StatList'> 140283903089856 {
				parent = 140283903090528
					children:
					<class 'ir.StatList'> 140283903242592 {
					parent = 140283903089856
						children:
						<class 'ir.StatList'> 140283903242368 {
						parent = 140283903242592
							children:
							reg int t0 <- 1234
						}
						auto int test <- reg int t0
					}
					<class 'ir.StatList'> 140283903243880 {
					parent = 140283903089856
						children:
						<class 'ir.StatList'> 140283903243656 {
						parent = 140283903243880
							children:
							<class 'ir.StatList'> 140283903243040 {
							parent = 140283903243656
								children:
								reg int t1 <- global int x
							}
							<class 'ir.StatList'> 140283903243320 {
							parent = 140283903243656
								children:
								reg int t2 <- global int x
							}
							reg int32_t t3 <- reg int t1 times reg int t2
						}
						global int squ <- reg int32_t t3
					}
				}
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140283903090584 {
	parent = 140283903227944
		children:
		<class 'ir.StatList'> 140283903245056 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903244832 {
			parent = 140283903245056
				children:
				<class 'ir.StatList'> 140283903244608 {
				parent = 140283903244832
					children:
					reg int t4 <- 1
				}
				reg int t5 <- minus reg int t4
			}
			global int x <- reg int t5
		}
		<class 'ir.StatList'> 140283903245560 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903245336 {
			parent = 140283903245560
				children:
				read reg int t6
			}
			global int x <- reg int t6
		}
		<class 'ir.StatList'> 140283903229456 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903287648 {
			parent = 140283903229456
				children:
				<class 'ir.StatList'> 140283903246008 {
				parent = 140283903287648
					children:
					reg int t7 <- global int x
				}
				<class 'ir.StatList'> 140283903246288 {
				parent = 140283903287648
					children:
					reg int t8 <- 100
				}
				reg int32_t t9 <- reg int t7 gtr reg int t8
			}
			branch on reg int32_t t9 to auto label label2
			<class 'ir.StatList'> 140283903201576 {
			parent = 140283903229456
				children:
				<class 'ir.StatList'> 140283903288768 {
				parent = 140283903201576
					children:
					<class 'ir.StatList'> 140283903288544 {
					parent = 140283903288768
						children:
						reg int t11 <- global int x
					}
					print reg int t11
				}
			}
			branch  to auto label label1
			label2: <class 'ir.StatList'> 140283903202080 {
			parent = 140283903229456
				children:
				<class 'ir.StatList'> 140283903227216 {
				parent = 140283903202080
					children:
					<class 'ir.StatList'> 140283903227832 {
					parent = 140283903227216
						children:
						<class 'ir.StatList'> 140283903289608 {
						parent = 140283903227832
							children:
							reg int t12 <- global int x
						}
						reg int t14 <- minus reg int t12
					}
					print reg int t14
				}
			}
			label1: <class 'ir.EmptyStat'> 140283903228616 {
			parent = 140283903229456
			}
		}
		<class 'ir.StatList'> 140283903228896 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903229904 {
			parent = 140283903228896
				children:
				reg int t15 <- 1
			}
			global int x <- reg int t15
		}
		<class 'ir.StatList'> 140283903253864 {
		parent = 140283903090584
			children:
			label3: <class 'ir.StatList'> 140283903250504 {
			parent = 140283903253864
				children:
				<class 'ir.StatList'> 140283903228784 {
				parent = 140283903250504
					children:
					reg int t16 <- global int x
				}
				<class 'ir.StatList'> 140283903229288 {
				parent = 140283903250504
					children:
					reg int t17 <- 10
				}
				reg int32_t t18 <- reg int t16 leq reg int t17
			}
			branch on not reg int32_t t18 to auto label label4
			<class 'ir.StatList'> 140283903202864 {
			parent = 140283903253864
				children:
				call  to auto function square
				<class 'ir.StatList'> 140283903252184 {
				parent = 140283903202864
					children:
					<class 'ir.StatList'> 140283903252240 {
					parent = 140283903252184
						children:
						<class 'ir.StatList'> 140283903251568 {
						parent = 140283903252240
							children:
							reg int t19 <- global int x
						}
						<class 'ir.StatList'> 140283903251848 {
						parent = 140283903252240
							children:
							reg int t20 <- 1
						}
						reg int32_t t21 <- reg int t19 plus reg int t20
					}
					global int x <- reg int32_t t21
				}
				<class 'ir.StatList'> 140283903253192 {
				parent = 140283903202864
					children:
					<class 'ir.StatList'> 140283903253024 {
					parent = 140283903253192
						children:
						reg int t23 <- global int squ
					}
					print reg int t23
				}
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 140283903253640 {
			parent = 140283903253864
			}
		}
		<class 'ir.StatList'> 140283903254312 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903252688 {
			parent = 140283903254312
				children:
				reg int t24 <- 101
			}
			global int x <- reg int t24
		}
		<class 'ir.StatList'> 140283903287816 {
		parent = 140283903090584
			children:
			label5: <class 'ir.StatList'> 140283903244664 {
			parent = 140283903287816
				children:
				<class 'ir.StatList'> 140283903243096 {
				parent = 140283903244664
					children:
					reg int t25 <- global int x
				}
				<class 'ir.StatList'> 140283903243992 {
				parent = 140283903244664
					children:
					reg int t26 <- 105
				}
				reg int32_t t27 <- reg int t25 leq reg int t26
			}
			branch on not reg int32_t t27 to auto label label6
			<class 'ir.StatList'> 140283903202192 {
			parent = 140283903287816
				children:
				<class 'ir.StatList'> 140283903291344 {
				parent = 140283903202192
					children:
					<class 'ir.StatList'> 140283903246064 {
					parent = 140283903291344
						children:
						reg int t28 <- global int x
					}
					<class 'ir.StatList'> 140283903290504 {
					parent = 140283903291344
						children:
						<class 'ir.StatList'> 140283903289888 {
						parent = 140283903290504
							children:
							<class 'ir.StatList'> 140283903288656 {
							parent = 140283903289888
								children:
								reg int t29 <- global int x
							}
							<class 'ir.StatList'> 140283903288992 {
							parent = 140283903289888
								children:
								reg int t30 <- 100
							}
							reg int32_t t31 <- reg int t29 minus reg int t30
						}
						<class 'ir.StatList'> 140283903290168 {
						parent = 140283903290504
							children:
							reg int t32 <- 1
						}
						reg int32_t t33 <- reg int32_t t31 times reg int t32
					}
					reg &char t34 <- &(global char[5] arr)
					reg &char t35 <- reg &char t34 plus reg int32_t t33
					[reg &char t35] <- reg int t28
				}
				<class 'ir.StatList'> 140283903251008 {
				parent = 140283903202192
					children:
					<class 'ir.StatList'> 140283903250728 {
					parent = 140283903251008
						children:
						<class 'ir.StatList'> 140283903261944 {
						parent = 140283903250728
							children:
							<class 'ir.StatList'> 140283903260096 {
							parent = 140283903261944
								children:
								<class 'ir.StatList'> 140283903259480 {
								parent = 140283903260096
									children:
									reg int t36 <- global int x
								}
								<class 'ir.StatList'> 140283903259760 {
								parent = 140283903260096
									children:
									reg int t37 <- 100
								}
								reg int32_t t38 <- reg int t36 minus reg int t37
							}
							<class 'ir.StatList'> 140283903260376 {
							parent = 140283903261944
								children:
								reg int t39 <- 1
							}
							reg int32_t t41 <- reg int32_t t38 times reg int t39
						}
						reg &char t46 <- &(global char[5] arr)
						reg &char t47 <- reg &char t46 plus reg int32_t t41
						reg char t45 <- [reg &char t47]
					}
					print reg char t45
				}
				<class 'ir.StatList'> 140283903243376 {
				parent = 140283903202192
					children:
					<class 'ir.StatList'> 140283903254200 {
					parent = 140283903243376
						children:
						<class 'ir.StatList'> 140283903251960 {
						parent = 140283903254200
							children:
							reg int t48 <- global int x
						}
						<class 'ir.StatList'> 140283903253136 {
						parent = 140283903254200
							children:
							reg int t49 <- 1
						}
						reg int32_t t50 <- reg int t48 plus reg int t49
					}
					global int x <- reg int32_t t50
				}
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 140283903290000 {
			parent = 140283903287816
			}
		}
		<class 'ir.StatList'> 140283903258696 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903290224 {
			parent = 140283903258696
				children:
				reg int t51 <- 1
			}
			global int x <- reg int t51
		}
		<class 'ir.StatList'> 140283903260152 {
		parent = 140283903090584
			children:
			<class 'ir.StatList'> 140283903259144 {
			parent = 140283903260152
				children:
				reg int t52 <- 1
			}
			global int y <- reg int t52
		}
		<class 'ir.StatList'> 140283902818008 {
		parent = 140283903090584
			children:
			label9: <class 'ir.StatList'> 140283903262000 {
			parent = 140283902818008
				children:
				<class 'ir.StatList'> 140283903261160 {
				parent = 140283903262000
					children:
					reg int t53 <- global int x
				}
				<class 'ir.StatList'> 140283903261440 {
				parent = 140283903262000
					children:
					reg int t54 <- 5
				}
				reg int32_t t55 <- reg int t53 leq reg int t54
			}
			branch on not reg int32_t t55 to auto label label10
			<class 'ir.StatList'> 140283903225928 {
			parent = 140283902818008
				children:
				<class 'ir.StatList'> 140283902817840 {
				parent = 140283903225928
					children:
					label7: <class 'ir.StatList'> 140283903255888 {
					parent = 140283902817840
						children:
						<class 'ir.StatList'> 140283903255384 {
						parent = 140283903255888
							children:
							reg int t56 <- global int y
						}
						<class 'ir.StatList'> 140283903255608 {
						parent = 140283903255888
							children:
							reg int t57 <- 5
						}
						reg int32_t t58 <- reg int t56 leq reg int t57
					}
					branch on not reg int32_t t58 to auto label label8
					<class 'ir.StatList'> 140283903204488 {
					parent = 140283902817840
						children:
						<class 'ir.StatList'> 140283902795560 {
						parent = 140283903204488
							children:
							<class 'ir.StatList'> 140283902792088 {
							parent = 140283902795560
								children:
								<class 'ir.StatList'> 140283903258128 {
								parent = 140283902792088
									children:
									<class 'ir.StatList'> 140283903256672 {
									parent = 140283903258128
										children:
										reg int t59 <- global int x
									}
									<class 'ir.StatList'> 140283903256952 {
									parent = 140283903258128
										children:
										reg int t60 <- 1
									}
									reg int32_t t62 <- reg int t59 times reg int t60
								}
								reg &char t64 <- &(global char[5] arr)
								reg &char t65 <- reg &char t64 plus reg int32_t t62
								reg char t63 <- [reg &char t65]
							}
							<class 'ir.StatList'> 140283902794720 {
							parent = 140283902795560
								children:
								<class 'ir.StatList'> 140283902793320 {
								parent = 140283902794720
									children:
									<class 'ir.StatList'> 140283902792704 {
									parent = 140283902793320
										children:
										reg int t66 <- global int x
									}
									<class 'ir.StatList'> 140283902792984 {
									parent = 140283902793320
										children:
										reg int t67 <- 10
									}
									reg int32_t t68 <- reg int t66 times reg int t67
								}
								<class 'ir.StatList'> 140283902794384 {
								parent = 140283902794720
									children:
									<class 'ir.StatList'> 140283902793768 {
									parent = 140283902794384
										children:
										reg int t69 <- global int y
									}
									<class 'ir.StatList'> 140283902794048 {
									parent = 140283902794384
										children:
										reg int t70 <- 2
									}
									reg int32_t t71 <- reg int t69 times reg int t70
								}
								reg int32_t t72 <- reg int32_t t68 plus reg int32_t t71
							}
							reg &short t73 <- &(global short[5, 5] multid)
							reg &short t74 <- reg &short t73 plus reg int32_t t72
							[reg &short t74] <- reg char t63
						}
						<class 'ir.StatList'> 140283902804208 {
						parent = 140283903204488
							children:
							<class 'ir.StatList'> 140283903258184 {
							parent = 140283902804208
								children:
								<class 'ir.StatList'> 140283902816608 {
								parent = 140283903258184
									children:
									<class 'ir.StatList'> 140283902805272 {
									parent = 140283902816608
										children:
										<class 'ir.StatList'> 140283902804656 {
										parent = 140283902805272
											children:
											reg int t75 <- global int x
										}
										<class 'ir.StatList'> 140283902804936 {
										parent = 140283902805272
											children:
											reg int t76 <- 10
										}
										reg int32_t t77 <- reg int t75 times reg int t76
									}
									<class 'ir.StatList'> 140283902806336 {
									parent = 140283902816608
										children:
										<class 'ir.StatList'> 140283902805720 {
										parent = 140283902806336
											children:
											reg int t78 <- global int y
										}
										<class 'ir.StatList'> 140283902806000 {
										parent = 140283902806336
											children:
											reg int t79 <- 2
										}
										reg int32_t t80 <- reg int t78 times reg int t79
									}
									reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
								}
								reg &short t87 <- &(global short[5, 5] multid)
								reg &short t88 <- reg &short t87 plus reg int32_t t82
								reg short t86 <- [reg &short t88]
							}
							print reg short t86
						}
						<class 'ir.StatList'> 140283902807456 {
						parent = 140283903204488
							children:
							<class 'ir.StatList'> 140283902807176 {
							parent = 140283902807456
								children:
								<class 'ir.StatList'> 140283902805776 {
								parent = 140283902807176
									children:
									reg int t89 <- global int x
								}
								<class 'ir.StatList'> 140283902806784 {
								parent = 140283902807176
									children:
									reg int t90 <- 1
								}
								reg int32_t t91 <- reg int t89 plus reg int t90
							}
							global int x <- reg int32_t t91
						}
						<class 'ir.StatList'> 140283902794104 {
						parent = 140283903204488
							children:
							<class 'ir.StatList'> 140283902793376 {
							parent = 140283902794104
								children:
								<class 'ir.StatList'> 140283902807904 {
								parent = 140283902793376
									children:
									reg int t92 <- global int y
								}
								<class 'ir.StatList'> 140283902792200 {
								parent = 140283902793376
									children:
									reg int t93 <- 1
								}
								reg int32_t t94 <- reg int t92 plus reg int t93
							}
							global int y <- reg int32_t t94
						}
					}
					branch  to auto label label7
					label8: <class 'ir.EmptyStat'> 140283902795728 {
					parent = 140283902817840
					}
				}
			}
			branch  to auto label label9
			label10: <class 'ir.EmptyStat'> 140283902817896 {
			parent = 140283902818008
			}
		}
	}
} 

<class 'ir.DefinitionList'> 140283903089800
<class 'ir.LoadImmStat'> 140283903242312
<class 'ir.StatList'> 140283903242368
Flattening 140283903242368 into 140283903242592
<class 'ir.StoreStat'> 140283903242536
<class 'ir.StatList'> 140283903242592
Flattening 140283903242592 into 140283903089856
<class 'ir.LoadStat'> 140283903242984
<class 'ir.StatList'> 140283903243040
Flattening 140283903243040 into 140283903243656
<class 'ir.LoadStat'> 140283903243264
<class 'ir.StatList'> 140283903243320
Flattening 140283903243320 into 140283903243656
<class 'ir.BinStat'> 140283903243600
<class 'ir.StatList'> 140283903243656
Flattening 140283903243656 into 140283903243880
<class 'ir.StoreStat'> 140283903243824
<class 'ir.StatList'> 140283903243880
Flattening 140283903243880 into 140283903089856
<class 'ir.StatList'> 140283903089856
Not flattening 140283903089856 into 140283903090528 of type <class 'ir.Block'>
<class 'ir.Block'> 140283903090528
<class 'ir.FunctionDef'> 140283903090640
<class 'ir.DefinitionList'> 140283903389256
<class 'ir.LoadImmStat'> 140283903244552
<class 'ir.StatList'> 140283903244608
Flattening 140283903244608 into 140283903244832
<class 'ir.UnaryStat'> 140283903244776
<class 'ir.StatList'> 140283903244832
Flattening 140283903244832 into 140283903245056
<class 'ir.StoreStat'> 140283903245000
<class 'ir.StatList'> 140283903245056
Flattening 140283903245056 into 140283903090584
<class 'ir.ReadCommand'> 140283903245280
<class 'ir.StatList'> 140283903245336
Flattening 140283903245336 into 140283903245560
<class 'ir.StoreStat'> 140283903245504
<class 'ir.StatList'> 140283903245560
Flattening 140283903245560 into 140283903090584
<class 'ir.LoadStat'> 140283903245952
<class 'ir.StatList'> 140283903246008
Flattening 140283903246008 into 140283903287648
<class 'ir.LoadImmStat'> 140283903246232
<class 'ir.StatList'> 140283903246288
Flattening 140283903246288 into 140283903287648
<class 'ir.BinStat'> 140283903287592
<class 'ir.StatList'> 140283903287648
Flattening 140283903287648 into 140283903229456
<class 'ir.BranchStat'> 140283903229736
<class 'ir.LoadStat'> 140283903288488
<class 'ir.StatList'> 140283903288544
Flattening 140283903288544 into 140283903288768
<class 'ir.PrintCommand'> 140283903288712
<class 'ir.StatList'> 140283903288768
Flattening 140283903288768 into 140283903201576
<class 'ir.StatList'> 140283903201576
Flattening 140283903201576 into 140283903229456
<class 'ir.BranchStat'> 140283903229400
<class 'ir.LoadStat'> 140283903289552
<class 'ir.StatList'> 140283903289608
Flattening 140283903289608 into 140283903227832
<class 'ir.UnaryStat'> 140283903226264
<class 'ir.StatList'> 140283903227832
Flattening 140283903227832 into 140283903227216
<class 'ir.PrintCommand'> 140283903228728
<class 'ir.StatList'> 140283903227216
Flattening 140283903227216 into 140283903202080
<class 'ir.StatList'> 140283903202080
Flattening 140283903202080 into 140283903229456
<class 'ir.EmptyStat'> 140283903228616
<class 'ir.StatList'> 140283903229456
Flattening 140283903229456 into 140283903090584
<class 'ir.LoadImmStat'> 140283903229792
<class 'ir.StatList'> 140283903229904
Flattening 140283903229904 into 140283903228896
<class 'ir.StoreStat'> 140283903228672
<class 'ir.StatList'> 140283903228896
Flattening 140283903228896 into 140283903090584
<class 'ir.LoadStat'> 140283903228448
<class 'ir.StatList'> 140283903228784
Flattening 140283903228784 into 140283903250504
<class 'ir.LoadImmStat'> 140283903228056
<class 'ir.StatList'> 140283903229288
Flattening 140283903229288 into 140283903250504
<class 'ir.BinStat'> 140283903253528
<class 'ir.StatList'> 140283903250504
Flattening 140283903250504 into 140283903253864
<class 'ir.BranchStat'> 140283903253696
<class 'ir.BranchStat'> 140283903251176
<class 'ir.LoadStat'> 140283903251512
<class 'ir.StatList'> 140283903251568
Flattening 140283903251568 into 140283903252240
<class 'ir.LoadImmStat'> 140283903251792
<class 'ir.StatList'> 140283903251848
Flattening 140283903251848 into 140283903252240
<class 'ir.BinStat'> 140283903251624
<class 'ir.StatList'> 140283903252240
Flattening 140283903252240 into 140283903252184
<class 'ir.StoreStat'> 140283903252352
<class 'ir.StatList'> 140283903252184
Flattening 140283903252184 into 140283903202864
<class 'ir.LoadStat'> 140283903252968
<class 'ir.StatList'> 140283903253024
Flattening 140283903253024 into 140283903253192
<class 'ir.PrintCommand'> 140283903252744
<class 'ir.StatList'> 140283903253192
Flattening 140283903253192 into 140283903202864
<class 'ir.StatList'> 140283903202864
Flattening 140283903202864 into 140283903253864
<class 'ir.BranchStat'> 140283903253808
<class 'ir.EmptyStat'> 140283903253640
<class 'ir.StatList'> 140283903253864
Flattening 140283903253864 into 140283903090584
<class 'ir.LoadImmStat'> 140283903254032
<class 'ir.StatList'> 140283903252688
Flattening 140283903252688 into 140283903254312
<class 'ir.StoreStat'> 140283903254256
<class 'ir.StatList'> 140283903254312
Flattening 140283903254312 into 140283903090584
<class 'ir.LoadStat'> 140283903242760
<class 'ir.StatList'> 140283903243096
Flattening 140283903243096 into 140283903244664
<class 'ir.LoadImmStat'> 140283903243936
<class 'ir.StatList'> 140283903243992
Flattening 140283903243992 into 140283903244664
<class 'ir.BinStat'> 140283903244328
<class 'ir.StatList'> 140283903244664
Flattening 140283903244664 into 140283903287816
<class 'ir.BranchStat'> 140283903287368
<class 'ir.LoadStat'> 140283903245728
<class 'ir.StatList'> 140283903246064
Flattening 140283903246064 into 140283903291344
<class 'ir.LoadStat'> 140283903288600
<class 'ir.StatList'> 140283903288656
Flattening 140283903288656 into 140283903289888
<class 'ir.LoadImmStat'> 140283903288936
<class 'ir.StatList'> 140283903288992
Flattening 140283903288992 into 140283903289888
<class 'ir.BinStat'> 140283903289664
<class 'ir.StatList'> 140283903289888
Flattening 140283903289888 into 140283903290504
<class 'ir.LoadImmStat'> 140283903290112
<class 'ir.StatList'> 140283903290168
Flattening 140283903290168 into 140283903290504
<class 'ir.BinStat'> 140283903290448
<class 'ir.StatList'> 140283903290504
Flattening 140283903290504 into 140283903291344
<class 'ir.LoadPtrToSym'> 140283903290896
<class 'ir.BinStat'> 140283903291176
<class 'ir.StoreStat'> 140283903291288
<class 'ir.StatList'> 140283903291344
Flattening 140283903291344 into 140283903202192
<class 'ir.LoadStat'> 140283903259424
<class 'ir.StatList'> 140283903259480
Flattening 140283903259480 into 140283903260096
<class 'ir.LoadImmStat'> 140283903259704
<class 'ir.StatList'> 140283903259760
Flattening 140283903259760 into 140283903260096
<class 'ir.BinStat'> 140283903260040
<class 'ir.StatList'> 140283903260096
Flattening 140283903260096 into 140283903261944
<class 'ir.LoadImmStat'> 140283903260320
<class 'ir.StatList'> 140283903260376
Flattening 140283903260376 into 140283903261944
<class 'ir.BinStat'> 140283903261888
<class 'ir.StatList'> 140283903261944
Flattening 140283903261944 into 140283903250728
<class 'ir.LoadPtrToSym'> 140283903228112
<class 'ir.BinStat'> 140283903250560
<class 'ir.LoadStat'> 140283903250616
<class 'ir.StatList'> 140283903250728
Flattening 140283903250728 into 140283903251008
<class 'ir.PrintCommand'> 140283903250952
<class 'ir.StatList'> 140283903251008
Flattening 140283903251008 into 140283903202192
<class 'ir.LoadStat'> 140283903252296
<class 'ir.StatList'> 140283903251960
Flattening 140283903251960 into 140283903254200
<class 'ir.LoadImmStat'> 140283903253080
<class 'ir.StatList'> 140283903253136
Flattening 140283903253136 into 140283903254200
<class 'ir.BinStat'> 140283903254088
<class 'ir.StatList'> 140283903254200
Flattening 140283903254200 into 140283903243376
<class 'ir.StoreStat'> 140283903242424
<class 'ir.StatList'> 140283903243376
Flattening 140283903243376 into 140283903202192
<class 'ir.StatList'> 140283903202192
Flattening 140283903202192 into 140283903287816
<class 'ir.BranchStat'> 140283903287704
<class 'ir.EmptyStat'> 140283903290000
<class 'ir.StatList'> 140283903287816
Flattening 140283903287816 into 140283903090584
<class 'ir.LoadImmStat'> 140283903289216
<class 'ir.StatList'> 140283903290224
Flattening 140283903290224 into 140283903258696
<class 'ir.StoreStat'> 140283903291232
<class 'ir.StatList'> 140283903258696
Flattening 140283903258696 into 140283903090584
<class 'ir.LoadImmStat'> 140283903259032
<class 'ir.StatList'> 140283903259144
Flattening 140283903259144 into 140283903260152
<class 'ir.StoreStat'> 140283903259816
<class 'ir.StatList'> 140283903260152
Flattening 140283903260152 into 140283903090584
<class 'ir.LoadStat'> 140283903261104
<class 'ir.StatList'> 140283903261160
Flattening 140283903261160 into 140283903262000
<class 'ir.LoadImmStat'> 140283903261384
<class 'ir.StatList'> 140283903261440
Flattening 140283903261440 into 140283903262000
<class 'ir.BinStat'> 140283903261664
<class 'ir.StatList'> 140283903262000
Flattening 140283903262000 into 140283902818008
<class 'ir.BranchStat'> 140283902817952
<class 'ir.LoadStat'> 140283903255328
<class 'ir.StatList'> 140283903255384
Flattening 140283903255384 into 140283903255888
<class 'ir.LoadImmStat'> 140283903255552
<class 'ir.StatList'> 140283903255608
Flattening 140283903255608 into 140283903255888
<class 'ir.BinStat'> 140283903255776
<class 'ir.StatList'> 140283903255888
Flattening 140283903255888 into 140283902817840
<class 'ir.BranchStat'> 140283902817504
<class 'ir.LoadStat'> 140283903256616
<class 'ir.StatList'> 140283903256672
Flattening 140283903256672 into 140283903258128
<class 'ir.LoadImmStat'> 140283903256896
<class 'ir.StatList'> 140283903256952
Flattening 140283903256952 into 140283903258128
<class 'ir.BinStat'> 140283903258072
<class 'ir.StatList'> 140283903258128
Flattening 140283903258128 into 140283902792088
<class 'ir.LoadPtrToSym'> 140283903258576
<class 'ir.BinStat'> 140283902791976
<class 'ir.LoadStat'> 140283902792032
<class 'ir.StatList'> 140283902792088
Flattening 140283902792088 into 140283902795560
<class 'ir.LoadStat'> 140283902792648
<class 'ir.StatList'> 140283902792704
Flattening 140283902792704 into 140283902793320
<class 'ir.LoadImmStat'> 140283902792928
<class 'ir.StatList'> 140283902792984
Flattening 140283902792984 into 140283902793320
<class 'ir.BinStat'> 140283902793264
<class 'ir.StatList'> 140283902793320
Flattening 140283902793320 into 140283902794720
<class 'ir.LoadStat'> 140283902793712
<class 'ir.StatList'> 140283902793768
Flattening 140283902793768 into 140283902794384
<class 'ir.LoadImmStat'> 140283902793992
<class 'ir.StatList'> 140283902794048
Flattening 140283902794048 into 140283902794384
<class 'ir.BinStat'> 140283902794328
<class 'ir.StatList'> 140283902794384
Flattening 140283902794384 into 140283902794720
<class 'ir.BinStat'> 140283902794664
<class 'ir.StatList'> 140283902794720
Flattening 140283902794720 into 140283902795560
<class 'ir.LoadPtrToSym'> 140283902795112
<class 'ir.BinStat'> 140283902795392
<class 'ir.StoreStat'> 140283902795504
<class 'ir.StatList'> 140283902795560
Flattening 140283902795560 into 140283903204488
<class 'ir.LoadStat'> 140283902804600
<class 'ir.StatList'> 140283902804656
Flattening 140283902804656 into 140283902805272
<class 'ir.LoadImmStat'> 140283902804880
<class 'ir.StatList'> 140283902804936
Flattening 140283902804936 into 140283902805272
<class 'ir.BinStat'> 140283902805216
<class 'ir.StatList'> 140283902805272
Flattening 140283902805272 into 140283902816608
<class 'ir.LoadStat'> 140283902805664
<class 'ir.StatList'> 140283902805720
Flattening 140283902805720 into 140283902806336
<class 'ir.LoadImmStat'> 140283902805944
<class 'ir.StatList'> 140283902806000
Flattening 140283902806000 into 140283902806336
<class 'ir.BinStat'> 140283902806280
<class 'ir.StatList'> 140283902806336
Flattening 140283902806336 into 140283902816608
<class 'ir.BinStat'> 140283902816552
<class 'ir.StatList'> 140283902816608
Flattening 140283902816608 into 140283903258184
<class 'ir.LoadPtrToSym'> 140283903257512
<class 'ir.BinStat'> 140283903257792
<class 'ir.LoadStat'> 140283903257848
<class 'ir.StatList'> 140283903258184
Flattening 140283903258184 into 140283902804208
<class 'ir.PrintCommand'> 140283902804152
<class 'ir.StatList'> 140283902804208
Flattening 140283902804208 into 140283903204488
<class 'ir.LoadStat'> 140283902805440
<class 'ir.StatList'> 140283902805776
Flattening 140283902805776 into 140283902807176
<class 'ir.LoadImmStat'> 140283902804096
<class 'ir.StatList'> 140283902806784
Flattening 140283902806784 into 140283902807176
<class 'ir.BinStat'> 140283902807232
<class 'ir.StatList'> 140283902807176
Flattening 140283902807176 into 140283902807456
<class 'ir.StoreStat'> 140283902807400
<class 'ir.StatList'> 140283902807456
Flattening 140283902807456 into 140283903204488
<class 'ir.LoadStat'> 140283902807792
<class 'ir.StatList'> 140283902807904
Flattening 140283902807904 into 140283902793376
<class 'ir.LoadImmStat'> 140283902792144
<class 'ir.StatList'> 140283902792200
Flattening 140283902792200 into 140283902793376
<class 'ir.BinStat'> 140283902793040
<class 'ir.StatList'> 140283902793376
Flattening 140283902793376 into 140283902794104
<class 'ir.StoreStat'> 140283902793824
<class 'ir.StatList'> 140283902794104
Flattening 140283902794104 into 140283903204488
<class 'ir.StatList'> 140283903204488
Flattening 140283903204488 into 140283902817840
<class 'ir.BranchStat'> 140283902817672
<class 'ir.EmptyStat'> 140283902795728
<class 'ir.StatList'> 140283902817840
Flattening 140283902817840 into 140283903225928
<class 'ir.StatList'> 140283903225928
Flattening 140283903225928 into 140283902818008
<class 'ir.BranchStat'> 140283902818064
<class 'ir.EmptyStat'> 140283902817896
<class 'ir.StatList'> 140283902818008
Flattening 140283902818008 into 140283903090584
<class 'ir.StatList'> 140283903090584
Not flattening 140283903090584 into 140283903227944 of type <class 'ir.Block'>
<class 'ir.Block'> 140283903227944

 <class 'ir.Block'> 140283903227944 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140283903389256 {
	parent = 140283903227944
		children:
		<class 'ir.FunctionDef'> 140283903090640 {
		parent = 140283903389256
			symbol: 	auto function square
			body: 	<class 'ir.Block'> 140283903090528 {
			parent = 140283903090640
				defs: 	<class 'ir.DefinitionList'> 140283903089800 {
				parent = 140283903090528
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				body: 	<class 'ir.StatList'> 140283903089856 {
				parent = 140283903090528
					children:
					reg int t0 <- 1234
					auto int test <- reg int t0
					reg int t1 <- global int x
					reg int t2 <- global int x
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ <- reg int32_t t3
				}
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140283903090584 {
	parent = 140283903227944
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x <- reg int t5
		read reg int t6
		global int x <- reg int t6
		reg int t7 <- global int x
		reg int t8 <- 100
		reg int32_t t9 <- reg int t7 gtr reg int t8
		branch on reg int32_t t9 to auto label label2
		reg int t11 <- global int x
		print reg int t11
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140283902794440 {
		parent = 140283903090584
		}
		reg int t12 <- global int x
		reg int t14 <- minus reg int t12
		print reg int t14
		label1: <class 'ir.EmptyStat'> 140283903228616 {
		parent = 140283903090584
		}
		reg int t15 <- 1
		global int x <- reg int t15
		label3: <class 'ir.EmptyStat'> 140283903254936 {
		parent = 140283903090584
		}
		reg int t16 <- global int x
		reg int t17 <- 10
		reg int32_t t18 <- reg int t16 leq reg int t17
		branch on not reg int32_t t18 to auto label label4
		call  to auto function square
		reg int t19 <- global int x
		reg int t20 <- 1
		reg int32_t t21 <- reg int t19 plus reg int t20
		global int x <- reg int32_t t21
		reg int t23 <- global int squ
		print reg int t23
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140283903253640 {
		parent = 140283903090584
		}
		reg int t24 <- 101
		global int x <- reg int t24
		label5: <class 'ir.EmptyStat'> 140283902819632 {
		parent = 140283903090584
		}
		reg int t25 <- global int x
		reg int t26 <- 105
		reg int32_t t27 <- reg int t25 leq reg int t26
		branch on not reg int32_t t27 to auto label label6
		reg int t28 <- global int x
		reg int t29 <- global int x
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t33 <- reg int32_t t31 times reg int t32
		reg &char t34 <- &(global char[5] arr)
		reg &char t35 <- reg &char t34 plus reg int32_t t33
		[reg &char t35] <- reg int t28
		reg int t36 <- global int x
		reg int t37 <- 100
		reg int32_t t38 <- reg int t36 minus reg int t37
		reg int t39 <- 1
		reg int32_t t41 <- reg int32_t t38 times reg int t39
		reg &char t46 <- &(global char[5] arr)
		reg &char t47 <- reg &char t46 plus reg int32_t t41
		reg char t45 <- [reg &char t47]
		print reg char t45
		reg int t48 <- global int x
		reg int t49 <- 1
		reg int32_t t50 <- reg int t48 plus reg int t49
		global int x <- reg int32_t t50
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140283903290000 {
		parent = 140283903090584
		}
		reg int t51 <- 1
		global int x <- reg int t51
		reg int t52 <- 1
		global int y <- reg int t52
		label9: <class 'ir.EmptyStat'> 140283903259536 {
		parent = 140283903090584
		}
		reg int t53 <- global int x
		reg int t54 <- 5
		reg int32_t t55 <- reg int t53 leq reg int t54
		branch on not reg int32_t t55 to auto label label10
		label7: <class 'ir.EmptyStat'> 140283903258920 {
		parent = 140283903090584
		}
		reg int t56 <- global int y
		reg int t57 <- 5
		reg int32_t t58 <- reg int t56 leq reg int t57
		branch on not reg int32_t t58 to auto label label8
		reg int t59 <- global int x
		reg int t60 <- 1
		reg int32_t t62 <- reg int t59 times reg int t60
		reg &char t64 <- &(global char[5] arr)
		reg &char t65 <- reg &char t64 plus reg int32_t t62
		reg char t63 <- [reg &char t65]
		reg int t66 <- global int x
		reg int t67 <- 10
		reg int32_t t68 <- reg int t66 times reg int t67
		reg int t69 <- global int y
		reg int t70 <- 2
		reg int32_t t71 <- reg int t69 times reg int t70
		reg int32_t t72 <- reg int32_t t68 plus reg int32_t t71
		reg &short t73 <- &(global short[5, 5] multid)
		reg &short t74 <- reg &short t73 plus reg int32_t t72
		[reg &short t74] <- reg char t63
		reg int t75 <- global int x
		reg int t76 <- 10
		reg int32_t t77 <- reg int t75 times reg int t76
		reg int t78 <- global int y
		reg int t79 <- 2
		reg int32_t t80 <- reg int t78 times reg int t79
		reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
		reg &short t87 <- &(global short[5, 5] multid)
		reg &short t88 <- reg &short t87 plus reg int32_t t82
		reg short t86 <- [reg &short t88]
		print reg short t86
		reg int t89 <- global int x
		reg int t90 <- 1
		reg int32_t t91 <- reg int t89 plus reg int t90
		global int x <- reg int32_t t91
		reg int t92 <- global int y
		reg int t93 <- 1
		reg int32_t t94 <- reg int t92 plus reg int t93
		global int y <- reg int32_t t94
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 140283902795728 {
		parent = 140283903090584
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 140283902817896 {
		parent = 140283903090584
		}
	}
} 

navigating children of <class 'ir.DefinitionList'> 140283903389256 1
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 6
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 117
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944


DATALAYOUT



 <class 'ir.Block'> 140283903227944 {
                                                                      <<<<<----- BUG? MISSING PARENT
	defs: 	<class 'ir.DefinitionList'> 140283903389256 {
	parent = 140283903227944
		children:
		<class 'ir.FunctionDef'> 140283903090640 {
		parent = 140283903389256
			symbol: 	auto function square
			body: 	<class 'ir.Block'> 140283903090528 {
			parent = 140283903090640
				defs: 	<class 'ir.DefinitionList'> 140283903089800 {
				parent = 140283903090528
				}
				global_symtab: 	SymbolTable:
				global int x; _g_x: def byte 4
				global int y; _g_y: def byte 4
				global int squ; _g_squ: def byte 4
				global char[5] arr; _g_arr: def byte 5
				global short[5, 5] multid; _g_multid: def byte 50
				auto function square
				
				body: 	<class 'ir.StatList'> 140283903089856 {
				parent = 140283903090528
					children:
					reg int t0 <- 1234
					auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0
					reg int t1 <- global int x; _g_x: def byte 4
					reg int t2 <- global int x; _g_x: def byte 4
					reg int32_t t3 <- reg int t1 times reg int t2
					global int squ; _g_squ: def byte 4 <- reg int32_t t3
				}
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	body: 	<class 'ir.StatList'> 140283903090584 {
	parent = 140283903227944
		children:
		reg int t4 <- 1
		reg int t5 <- minus reg int t4
		global int x; _g_x: def byte 4 <- reg int t5
		read reg int t6
		global int x; _g_x: def byte 4 <- reg int t6
		reg int t7 <- global int x; _g_x: def byte 4
		reg int t8 <- 100
		reg int32_t t9 <- reg int t7 gtr reg int t8
		branch on reg int32_t t9 to auto label label2
		reg int t11 <- global int x; _g_x: def byte 4
		print reg int t11
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140283902794440 {
		parent = 140283903090584
		}
		reg int t12 <- global int x; _g_x: def byte 4
		reg int t14 <- minus reg int t12
		print reg int t14
		label1: <class 'ir.EmptyStat'> 140283903228616 {
		parent = 140283903090584
		}
		reg int t15 <- 1
		global int x; _g_x: def byte 4 <- reg int t15
		label3: <class 'ir.EmptyStat'> 140283903254936 {
		parent = 140283903090584
		}
		reg int t16 <- global int x; _g_x: def byte 4
		reg int t17 <- 10
		reg int32_t t18 <- reg int t16 leq reg int t17
		branch on not reg int32_t t18 to auto label label4
		call  to auto function square
		reg int t19 <- global int x; _g_x: def byte 4
		reg int t20 <- 1
		reg int32_t t21 <- reg int t19 plus reg int t20
		global int x; _g_x: def byte 4 <- reg int32_t t21
		reg int t23 <- global int squ; _g_squ: def byte 4
		print reg int t23
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140283903253640 {
		parent = 140283903090584
		}
		reg int t24 <- 101
		global int x; _g_x: def byte 4 <- reg int t24
		label5: <class 'ir.EmptyStat'> 140283902819632 {
		parent = 140283903090584
		}
		reg int t25 <- global int x; _g_x: def byte 4
		reg int t26 <- 105
		reg int32_t t27 <- reg int t25 leq reg int t26
		branch on not reg int32_t t27 to auto label label6
		reg int t28 <- global int x; _g_x: def byte 4
		reg int t29 <- global int x; _g_x: def byte 4
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t33 <- reg int32_t t31 times reg int t32
		reg &char t34 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t35 <- reg &char t34 plus reg int32_t t33
		[reg &char t35] <- reg int t28
		reg int t36 <- global int x; _g_x: def byte 4
		reg int t37 <- 100
		reg int32_t t38 <- reg int t36 minus reg int t37
		reg int t39 <- 1
		reg int32_t t41 <- reg int32_t t38 times reg int t39
		reg &char t46 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t47 <- reg &char t46 plus reg int32_t t41
		reg char t45 <- [reg &char t47]
		print reg char t45
		reg int t48 <- global int x; _g_x: def byte 4
		reg int t49 <- 1
		reg int32_t t50 <- reg int t48 plus reg int t49
		global int x; _g_x: def byte 4 <- reg int32_t t50
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140283903290000 {
		parent = 140283903090584
		}
		reg int t51 <- 1
		global int x; _g_x: def byte 4 <- reg int t51
		reg int t52 <- 1
		global int y; _g_y: def byte 4 <- reg int t52
		label9: <class 'ir.EmptyStat'> 140283903259536 {
		parent = 140283903090584
		}
		reg int t53 <- global int x; _g_x: def byte 4
		reg int t54 <- 5
		reg int32_t t55 <- reg int t53 leq reg int t54
		branch on not reg int32_t t55 to auto label label10
		label7: <class 'ir.EmptyStat'> 140283903258920 {
		parent = 140283903090584
		}
		reg int t56 <- global int y; _g_y: def byte 4
		reg int t57 <- 5
		reg int32_t t58 <- reg int t56 leq reg int t57
		branch on not reg int32_t t58 to auto label label8
		reg int t59 <- global int x; _g_x: def byte 4
		reg int t60 <- 1
		reg int32_t t62 <- reg int t59 times reg int t60
		reg &char t64 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t65 <- reg &char t64 plus reg int32_t t62
		reg char t63 <- [reg &char t65]
		reg int t66 <- global int x; _g_x: def byte 4
		reg int t67 <- 10
		reg int32_t t68 <- reg int t66 times reg int t67
		reg int t69 <- global int y; _g_y: def byte 4
		reg int t70 <- 2
		reg int32_t t71 <- reg int t69 times reg int t70
		reg int32_t t72 <- reg int32_t t68 plus reg int32_t t71
		reg &short t73 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t74 <- reg &short t73 plus reg int32_t t72
		[reg &short t74] <- reg char t63
		reg int t75 <- global int x; _g_x: def byte 4
		reg int t76 <- 10
		reg int32_t t77 <- reg int t75 times reg int t76
		reg int t78 <- global int y; _g_y: def byte 4
		reg int t79 <- 2
		reg int32_t t80 <- reg int t78 times reg int t79
		reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80
		reg &short t87 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t88 <- reg &short t87 plus reg int32_t t82
		reg short t86 <- [reg &short t88]
		print reg short t86
		reg int t89 <- global int x; _g_x: def byte 4
		reg int t90 <- 1
		reg int32_t t91 <- reg int t89 plus reg int t90
		global int x; _g_x: def byte 4 <- reg int32_t t91
		reg int t92 <- global int y; _g_y: def byte 4
		reg int t93 <- 1
		reg int32_t t94 <- reg int t92 plus reg int t93
		global int y; _g_y: def byte 4 <- reg int32_t t94
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 140283902795728 {
		parent = 140283903090584
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 140283902817896 {
		parent = 140283903090584
		}
	}
} 

navigating children of <class 'ir.DefinitionList'> 140283903389256 1
successfully navigated attr  defs  of <class 'ir.Block'> 140283903090528
navigating children of <class 'ir.StatList'> 140283903089856 6
successfully navigated attr  body  of <class 'ir.Block'> 140283903090528
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140283903090640
successfully navigated attr  defs  of <class 'ir.Block'> 140283903227944
navigating children of <class 'ir.StatList'> 140283903090584 117
successfully navigated attr  body  of <class 'ir.Block'> 140283903227944
Liveness sets
140283903255664 [label="BB140283903255664{\nreg int t0 <- 1234\nauto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0\nreg int t1 <- global int x; _g_x: def byte 4\nreg int t2 <- global int x; _g_x: def byte 4\nreg int32_t t3 <- reg int t1 times reg int t2\nglobal int squ; _g_squ: def byte 4 <- reg int32_t t3}"];
140283903255664 -> exit140283903090640 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];

gen: {global int x; _g_x: def byte 4}
kill: {global int squ; _g_squ: def byte 4, reg int t2, reg int t0, reg int32_t t3, reg int t1, auto int test; _l_square_test: fp + (-4) [def byte 4]}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140283903256224 [label="BB140283903256224{\nreg int t4 <- 1\nreg int t5 <- minus reg int t4\nglobal int x; _g_x: def byte 4 <- reg int t5\nread reg int t6\nglobal int x; _g_x: def byte 4 <- reg int t6\nreg int t7 <- global int x; _g_x: def byte 4\nreg int t8 <- 100\nreg int32_t t9 <- reg int t7 gtr reg int t8\nbranch on reg int32_t t9 to auto label label2}"];
140283903256224 -> 140283903254992 [label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903256224 -> 140283903256392 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: {reg int t7, reg int t8, reg int32_t t9, reg int t5, reg int t6, global int x; _g_x: def byte 4, reg int t4}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903254992 [label="BB140283903254992{\nreg int t11 <- global int x; _g_x: def byte 4\nprint reg int t11\nbranch  to auto label label1}"];
140283903254992 -> 140283903256056 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t11}
live_in: {global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903256392 [label="BB140283903256392{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140283902794440 {
parent = 140283903090584
}\nreg int t12 <- global int x; _g_x: def byte 4\nreg int t14 <- minus reg int t12\nprint reg int t14}"];
140283903256392 -> 140283903256056 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t14, reg int t12}
live_in: {global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903256056 [label="BB140283903256056{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140283903228616 {
parent = 140283903090584
}\nreg int t15 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t15}"];
140283903256056 -> 140283903256280 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: set()
kill: {reg int t15, global int x; _g_x: def byte 4}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903256280 [label="BB140283903256280{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140283903254936 {
parent = 140283903090584
}\nreg int t16 <- global int x; _g_x: def byte 4\nreg int t17 <- 10\nreg int32_t t18 <- reg int t16 leq reg int t17\nbranch on not reg int32_t t18 to auto label label4}"];
140283903256280 -> 140283903255944 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140283903256280 -> 140283903255104 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t16, reg int t17, reg int32_t t18}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903255944 [label="BB140283903255944{\ncall  to auto function square\nreg int t19 <- global int x; _g_x: def byte 4\nreg int t20 <- 1\nreg int32_t t21 <- reg int t19 plus reg int t20\nglobal int x; _g_x: def byte 4 <- reg int32_t t21\nreg int t23 <- global int squ; _g_squ: def byte 4\nprint reg int t23\nbranch  to auto label label3}"];
140283903255944 -> 140283903256280 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: {global int x; _g_x: def byte 4, global int squ; _g_squ: def byte 4}
kill: {reg int t23, reg int32_t t21, global int x; _g_x: def byte 4, reg int t20, reg int t19}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140283903255104 [label="BB140283903255104{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140283903253640 {
parent = 140283903090584
}\nreg int t24 <- 101\nglobal int x; _g_x: def byte 4 <- reg int t24}"];
140283903255104 -> 140283903255440 [label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: {global int x; _g_x: def byte 4, reg int t24}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
140283903255440 [label="BB140283903255440{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140283902819632 {
parent = 140283903090584
}\nreg int t25 <- global int x; _g_x: def byte 4\nreg int t26 <- 105\nreg int32_t t27 <- reg int t25 leq reg int t26\nbranch on not reg int32_t t27 to auto label label6}"];
140283903255440 -> 140283903251232 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];
140283903255440 -> 140283903251288 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int32_t t27, reg int t25, reg int t26}
live_in: {global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140283903251232 [label="BB140283903251232{\nreg int t28 <- global int x; _g_x: def byte 4\nreg int t29 <- global int x; _g_x: def byte 4\nreg int t30 <- 100\nreg int32_t t31 <- reg int t29 minus reg int t30\nreg int t32 <- 1\nreg int32_t t33 <- reg int32_t t31 times reg int t32\nreg &char t34 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t35 <- reg &char t34 plus reg int32_t t33\n[reg &char t35] <- reg int t28\nreg int t36 <- global int x; _g_x: def byte 4\nreg int t37 <- 100\nreg int32_t t38 <- reg int t36 minus reg int t37\nreg int t39 <- 1\nreg int32_t t41 <- reg int32_t t38 times reg int t39\nreg &char t46 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t47 <- reg &char t46 plus reg int32_t t41\nreg char t45 <- [reg &char t47]\nprint reg char t45\nreg int t48 <- global int x; _g_x: def byte 4\nreg int t49 <- 1\nreg int32_t t50 <- reg int t48 plus reg int t49\nglobal int x; _g_x: def byte 4 <- reg int32_t t50\nbranch  to auto label label5}"];
140283903251232 -> 140283903255440 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];

gen: {global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
kill: {reg &char t47, reg int32_t t41, reg int t39, reg int t32, reg char t45, reg int t30, global int x; _g_x: def byte 4, reg int t36, reg &char t35, reg int t29, reg int32_t t38, reg int t28, reg int32_t t31, reg int t48, reg &char t46, reg int32_t t33, reg &char t34, reg int t37, reg int32_t t50, reg int t49}
live_in: {global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140283903251288 [label="BB140283903251288{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140283903290000 {
parent = 140283903090584
}\nreg int t51 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t51\nreg int t52 <- 1\nglobal int y; _g_y: def byte 4 <- reg int t52}"];
140283903251288 -> 140283903252408 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: {global int x; _g_x: def byte 4, reg int t52, global int y; _g_y: def byte 4, reg int t51}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
140283903252408 [label="BB140283903252408{\n[auto label label9]\nlabel9: <class 'ir.EmptyStat'> 140283903259536 {
parent = 140283903090584
}\nreg int t53 <- global int x; _g_x: def byte 4\nreg int t54 <- 5\nreg int32_t t55 <- reg int t53 leq reg int t54\nbranch on not reg int32_t t55 to auto label label10}"];
140283903252408 -> 140283903253248 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903252408 -> 140283903256112 [style=dashed,label="set()"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t53, reg int t54, reg int32_t t55}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140283903253248 [label="BB140283903253248{\n[auto label label7]\nlabel7: <class 'ir.EmptyStat'> 140283903258920 {
parent = 140283903090584
}\nreg int t56 <- global int y; _g_y: def byte 4\nreg int t57 <- 5\nreg int32_t t58 <- reg int t56 leq reg int t57\nbranch on not reg int32_t t58 to auto label label8}"];
140283903253248 -> 140283903254368 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903253248 -> 140283903251344 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];

gen: {global int y; _g_y: def byte 4}
kill: {reg int32_t t58, reg int t57, reg int t56}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140283903254368 [label="BB140283903254368{\nreg int t59 <- global int x; _g_x: def byte 4\nreg int t60 <- 1\nreg int32_t t62 <- reg int t59 times reg int t60\nreg &char t64 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t65 <- reg &char t64 plus reg int32_t t62\nreg char t63 <- [reg &char t65]\nreg int t66 <- global int x; _g_x: def byte 4\nreg int t67 <- 10\nreg int32_t t68 <- reg int t66 times reg int t67\nreg int t69 <- global int y; _g_y: def byte 4\nreg int t70 <- 2\nreg int32_t t71 <- reg int t69 times reg int t70\nreg int32_t t72 <- reg int32_t t68 plus reg int32_t t71\nreg &short t73 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t74 <- reg &short t73 plus reg int32_t t72\n[reg &short t74] <- reg char t63\nreg int t75 <- global int x; _g_x: def byte 4\nreg int t76 <- 10\nreg int32_t t77 <- reg int t75 times reg int t76\nreg int t78 <- global int y; _g_y: def byte 4\nreg int t79 <- 2\nreg int32_t t80 <- reg int t78 times reg int t79\nreg int32_t t82 <- reg int32_t t77 plus reg int32_t t80\nreg &short t87 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t88 <- reg &short t87 plus reg int32_t t82\nreg short t86 <- [reg &short t88]\nprint reg short t86\nreg int t89 <- global int x; _g_x: def byte 4\nreg int t90 <- 1\nreg int32_t t91 <- reg int t89 plus reg int t90\nglobal int x; _g_x: def byte 4 <- reg int32_t t91\nreg int t92 <- global int y; _g_y: def byte 4\nreg int t93 <- 1\nreg int32_t t94 <- reg int t92 plus reg int t93\nglobal int y; _g_y: def byte 4 <- reg int32_t t94\nbranch  to auto label label7}"];
140283903254368 -> 140283903253248 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
kill: {reg &short t88, reg int32_t t77, reg int32_t t80, reg int t67, reg int32_t t82, reg int t70, reg &char t65, reg int t60, reg &short t73, reg int32_t t62, reg int t89, reg int t90, reg int32_t t68, reg int32_t t71, reg int t75, reg &short t74, reg int t78, reg char t63, global int x; _g_x: def byte 4, reg int t92, reg short t86, reg int32_t t94, reg int32_t t72, reg &short t87, reg int t76, reg int t79, reg int t66, reg &char t64, global int y; _g_y: def byte 4, reg int t69, reg int32_t t91, reg int t59, reg int t93}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140283903251344 [label="BB140283903251344{\n[auto label label8]\nlabel8: <class 'ir.EmptyStat'> 140283902795728 {
parent = 140283903090584
}\nbranch  to auto label label9}"];
140283903251344 -> 140283903252408 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: set()
live_in: {global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
live_out: {global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140283903256112 [label="BB140283903256112{\n[auto label label10]\nlabel10: <class 'ir.EmptyStat'> 140283902817896 {
parent = 140283903090584
}}"];
140283903256112 -> exit140283926441296 [label="set()"];

gen: set()
kill: set()
live_in: set()
live_out: set()

Instruction liveness
BASIC BLOCK:
140283903255664 [label="BB140283903255664{\nreg int t0 <- 1234\nauto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0\nreg int t1 <- global int x; _g_x: def byte 4\nreg int t2 <- global int x; _g_x: def byte 4\nreg int32_t t3 <- reg int t1 times reg int t2\nglobal int squ; _g_squ: def byte 4 <- reg int32_t t3}"];
140283903255664 -> exit140283903090640 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];


inst=reg int t0 <- 1234                                                               live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t0}
inst=auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t0              live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t0}                                  live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t1 <- global int x; _g_x: def byte 4                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int t1, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t2 <- global int x; _g_x: def byte 4                                     live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int t1, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                  live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t2, global int y; _g_y: def byte 4, reg int t1, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t3 <- reg int t1 times reg int t2                                    live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t2, global int y; _g_y: def byte 4, reg int t1, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                      live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t3}
inst=global int squ; _g_squ: def byte 4 <- reg int32_t t3                             live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t3}                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
BASIC BLOCK:
140283903256224 [label="BB140283903256224{\nreg int t4 <- 1\nreg int t5 <- minus reg int t4\nglobal int x; _g_x: def byte 4 <- reg int t5\nread reg int t6\nglobal int x; _g_x: def byte 4 <- reg int t6\nreg int t7 <- global int x; _g_x: def byte 4\nreg int t8 <- 100\nreg int32_t t9 <- reg int t7 gtr reg int t8\nbranch on reg int32_t t9 to auto label label2}"];
140283903256224 -> 140283903254992 [label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903256224 -> 140283903256392 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=reg int t4 <- 1                                                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int t5 <- minus reg int t4                                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t5}
inst=global int x; _g_x: def byte 4 <- reg int t5                                     live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t5}                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=read reg int t6                                                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t6}
inst=global int x; _g_x: def byte 4 <- reg int t6                                     live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t6}                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t7 <- global int x; _g_x: def byte 4                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t7, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int t8 <- 100                                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t7, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                              live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t7, reg int t8, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int32_t t9 <- reg int t7 gtr reg int t8                                      live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t7, reg int t8, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                  live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t9, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=branch on reg int32_t t9 to auto label label2                                    live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t9, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903254992 [label="BB140283903254992{\nreg int t11 <- global int x; _g_x: def byte 4\nprint reg int t11\nbranch  to auto label label1}"];
140283903254992 -> 140283903256056 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=reg int t11 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t11}
inst=print reg int t11                                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t11}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=branch  to auto label label1                                                     live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903256392 [label="BB140283903256392{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140283902794440 {
parent = 140283903090584
}\nreg int t12 <- global int x; _g_x: def byte 4\nreg int t14 <- minus reg int t12\nprint reg int t14}"];
140283903256392 -> 140283903256056 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=label2: <class 'ir.EmptyStat'> 140283902794440 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t12 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t12}
inst=reg int t14 <- minus reg int t12                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t12}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t14}
inst=print reg int t14                                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t14}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903256056 [label="BB140283903256056{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140283903228616 {
parent = 140283903090584
}\nreg int t15 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t15}"];
140283903256056 -> 140283903256280 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=label1: <class 'ir.EmptyStat'> 140283903228616 {
parent = 140283903090584
}      live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t15 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                                          live_out={reg int t15, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=global int x; _g_x: def byte 4 <- reg int t15                                    live_in={reg int t15, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903256280 [label="BB140283903256280{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140283903254936 {
parent = 140283903090584
}\nreg int t16 <- global int x; _g_x: def byte 4\nreg int t17 <- 10\nreg int32_t t18 <- reg int t16 leq reg int t17\nbranch on not reg int32_t t18 to auto label label4}"];
140283903256280 -> 140283903255944 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140283903256280 -> 140283903255104 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];


inst=label3: <class 'ir.EmptyStat'> 140283903254936 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t16 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int t17 <- 10                                                                live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4, reg int t17}
inst=reg int32_t t18 <- reg int t16 leq reg int t17                                   live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4, reg int t17}                live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t18, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=branch on not reg int32_t t18 to auto label label4                               live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t18, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                         live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903255944 [label="BB140283903255944{\ncall  to auto function square\nreg int t19 <- global int x; _g_x: def byte 4\nreg int t20 <- 1\nreg int32_t t21 <- reg int t19 plus reg int t20\nglobal int x; _g_x: def byte 4 <- reg int32_t t21\nreg int t23 <- global int squ; _g_squ: def byte 4\nprint reg int t23\nbranch  to auto label label3}"];
140283903255944 -> 140283903256280 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=call  to auto function square                                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t19 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={reg int t19, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t20 <- 1                                                                 live_in={reg int t19, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t19, reg int t20, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t21 <- reg int t19 plus reg int t20                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t19, reg int t20, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, reg int32_t t21}
inst=global int x; _g_x: def byte 4 <- reg int32_t t21                                live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, reg int32_t t21}                                                         live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t23 <- global int squ; _g_squ: def byte 4                                live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t23, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=print reg int t23                                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t23, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=branch  to auto label label3                                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903255104 [label="BB140283903255104{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140283903253640 {
parent = 140283903090584
}\nreg int t24 <- 101\nglobal int x; _g_x: def byte 4 <- reg int t24}"];
140283903255104 -> 140283903255440 [label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];


inst=label4: <class 'ir.EmptyStat'> 140283903253640 {
parent = 140283903090584
}      live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t24 <- 101                                                               live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t24, global char[5] arr; _g_arr: def byte 5}
inst=global int x; _g_x: def byte 4 <- reg int t24                                    live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t24, global char[5] arr; _g_arr: def byte 5}                                                                                                 live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903255440 [label="BB140283903255440{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140283902819632 {
parent = 140283903090584
}\nreg int t25 <- global int x; _g_x: def byte 4\nreg int t26 <- 105\nreg int32_t t27 <- reg int t25 leq reg int t26\nbranch on not reg int32_t t27 to auto label label6}"];
140283903255440 -> 140283903251232 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];
140283903255440 -> 140283903251288 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];


inst=label5: <class 'ir.EmptyStat'> 140283902819632 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t25 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t25}
inst=reg int t26 <- 105                                                               live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t25}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, reg int t25, global char[5] arr; _g_arr: def byte 5, reg int t26}
inst=reg int32_t t27 <- reg int t25 leq reg int t26                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, reg int t25, global char[5] arr; _g_arr: def byte 5, reg int t26}                                                    live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t27}
inst=branch on not reg int32_t t27 to auto label label6                               live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t27}                                                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903251232 [label="BB140283903251232{\nreg int t28 <- global int x; _g_x: def byte 4\nreg int t29 <- global int x; _g_x: def byte 4\nreg int t30 <- 100\nreg int32_t t31 <- reg int t29 minus reg int t30\nreg int t32 <- 1\nreg int32_t t33 <- reg int32_t t31 times reg int t32\nreg &char t34 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t35 <- reg &char t34 plus reg int32_t t33\n[reg &char t35] <- reg int t28\nreg int t36 <- global int x; _g_x: def byte 4\nreg int t37 <- 100\nreg int32_t t38 <- reg int t36 minus reg int t37\nreg int t39 <- 1\nreg int32_t t41 <- reg int32_t t38 times reg int t39\nreg &char t46 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t47 <- reg &char t46 plus reg int32_t t41\nreg char t45 <- [reg &char t47]\nprint reg char t45\nreg int t48 <- global int x; _g_x: def byte 4\nreg int t49 <- 1\nreg int32_t t50 <- reg int t48 plus reg int t49\nglobal int x; _g_x: def byte 4 <- reg int32_t t50\nbranch  to auto label label5}"];
140283903251232 -> 140283903255440 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}"];


inst=reg int t28 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t28}
inst=reg int t29 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t28}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t29}
inst=reg int t30 <- 100                                                               live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t29}                                                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int t30, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t29}
inst=reg int32_t t31 <- reg int t29 minus reg int t30                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int t30, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t29}                                       live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int32_t t31, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t32 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int32_t t31, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int32_t t31, reg int t32, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t33 <- reg int32_t t31 times reg int t32                             live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, reg int32_t t31, reg int t32, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                   live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t33}
inst=reg &char t34 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t33}                                                live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t34, reg int32_t t33}
inst=reg &char t35 <- reg &char t34 plus reg int32_t t33                              live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t34, reg int32_t t33}                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t35}
inst=[reg &char t35] <- reg int t28                                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t28, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t35}                                                  live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t36 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t36}
inst=reg int t37 <- 100                                                               live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t36}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t36, reg int t37}
inst=reg int32_t t38 <- reg int t36 minus reg int t37                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t36, reg int t37}                                                    live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t38}
inst=reg int t39 <- 1                                                                 live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t38}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t39, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t38}
inst=reg int32_t t41 <- reg int32_t t38 times reg int t39                             live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t39, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t38}                                                live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t41}
inst=reg &char t46 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t41}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t41, reg &char t46, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &char t47 <- reg &char t46 plus reg int32_t t41                              live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t41, reg &char t46, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t47, global char[5] arr; _g_arr: def byte 5}
inst=reg char t45 <- [reg &char t47]                                                  live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg &char t47, global char[5] arr; _g_arr: def byte 5}                                                               live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg char t45}
inst=print reg char t45                                                               live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg char t45}                                                                live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t48 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t48}
inst=reg int t49 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t48}                                                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t48, reg int t49}
inst=reg int32_t t50 <- reg int t48 plus reg int t49                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t48, reg int t49}                                                                                    live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t50}
inst=global int x; _g_x: def byte 4 <- reg int32_t t50                                live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t50}                                                                                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=branch  to auto label label5                                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
BASIC BLOCK:
140283903251288 [label="BB140283903251288{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140283903290000 {
parent = 140283903090584
}\nreg int t51 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t51\nreg int t52 <- 1\nglobal int y; _g_y: def byte 4 <- reg int t52}"];
140283903251288 -> 140283903252408 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=label6: <class 'ir.EmptyStat'> 140283903290000 {
parent = 140283903090584
}      live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t51 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t51}
inst=global int x; _g_x: def byte 4 <- reg int t51                                    live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t51}                                                                                                 live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
inst=reg int t52 <- 1                                                                 live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}                                                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t52}
inst=global int y; _g_y: def byte 4 <- reg int t52                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t52}                                                                 live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
BASIC BLOCK:
140283903252408 [label="BB140283903252408{\n[auto label label9]\nlabel9: <class 'ir.EmptyStat'> 140283903259536 {
parent = 140283903090584
}\nreg int t53 <- global int x; _g_x: def byte 4\nreg int t54 <- 5\nreg int32_t t55 <- reg int t53 leq reg int t54\nbranch on not reg int32_t t55 to auto label label10}"];
140283903252408 -> 140283903253248 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903252408 -> 140283903256112 [style=dashed,label="set()"];


inst=label9: <class 'ir.EmptyStat'> 140283903259536 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t53 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={reg int t53, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t54 <- 5                                                                 live_in={reg int t53, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t53, global short[5, 5] multid; _g_multid: def byte 50, reg int t54, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t55 <- reg int t53 leq reg int t54                                   live_in={reg int t53, global short[5, 5] multid; _g_multid: def byte 50, reg int t54, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int32_t t55, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=branch on not reg int32_t t55 to auto label label10                              live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int32_t t55, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
BASIC BLOCK:
140283903253248 [label="BB140283903253248{\n[auto label label7]\nlabel7: <class 'ir.EmptyStat'> 140283903258920 {
parent = 140283903090584
}\nreg int t56 <- global int y; _g_y: def byte 4\nreg int t57 <- 5\nreg int32_t t58 <- reg int t56 leq reg int t57\nbranch on not reg int32_t t58 to auto label label8}"];
140283903253248 -> 140283903254368 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140283903253248 -> 140283903251344 [style=dashed,label="{global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];


inst=label7: <class 'ir.EmptyStat'> 140283903258920 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t56 <- global int y; _g_y: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t56}
inst=reg int t57 <- 5                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t56}                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t57, reg int t56}
inst=reg int32_t t58 <- reg int t56 leq reg int t57                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t57, reg int t56}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t58}
inst=branch on not reg int32_t t58 to auto label label8                               live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t58}                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
BASIC BLOCK:
140283903254368 [label="BB140283903254368{\nreg int t59 <- global int x; _g_x: def byte 4\nreg int t60 <- 1\nreg int32_t t62 <- reg int t59 times reg int t60\nreg &char t64 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t65 <- reg &char t64 plus reg int32_t t62\nreg char t63 <- [reg &char t65]\nreg int t66 <- global int x; _g_x: def byte 4\nreg int t67 <- 10\nreg int32_t t68 <- reg int t66 times reg int t67\nreg int t69 <- global int y; _g_y: def byte 4\nreg int t70 <- 2\nreg int32_t t71 <- reg int t69 times reg int t70\nreg int32_t t72 <- reg int32_t t68 plus reg int32_t t71\nreg &short t73 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t74 <- reg &short t73 plus reg int32_t t72\n[reg &short t74] <- reg char t63\nreg int t75 <- global int x; _g_x: def byte 4\nreg int t76 <- 10\nreg int32_t t77 <- reg int t75 times reg int t76\nreg int t78 <- global int y; _g_y: def byte 4\nreg int t79 <- 2\nreg int32_t t80 <- reg int t78 times reg int t79\nreg int32_t t82 <- reg int32_t t77 plus reg int32_t t80\nreg &short t87 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t88 <- reg &short t87 plus reg int32_t t82\nreg short t86 <- [reg &short t88]\nprint reg short t86\nreg int t89 <- global int x; _g_x: def byte 4\nreg int t90 <- 1\nreg int32_t t91 <- reg int t89 plus reg int t90\nglobal int x; _g_x: def byte 4 <- reg int32_t t91\nreg int t92 <- global int y; _g_y: def byte 4\nreg int t93 <- 1\nreg int32_t t94 <- reg int t92 plus reg int t93\nglobal int y; _g_y: def byte 4 <- reg int32_t t94\nbranch  to auto label label7}"];
140283903254368 -> 140283903253248 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=reg int t59 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t59}
inst=reg int t60 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t59}                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t59, reg int t60}
inst=reg int32_t t62 <- reg int t59 times reg int t60                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t59, reg int t60}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &char t64 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, reg &char t64, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &char t65 <- reg &char t64 plus reg int32_t t62                              live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, reg &char t64, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t65}
inst=reg char t63 <- [reg &char t65]                                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t65}                               live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t66 <- global int x; _g_x: def byte 4                                    live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int t66, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t67 <- 10                                                                live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int t66, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                   live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int t66, global int y; _g_y: def byte 4, reg int t67, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t68 <- reg int t66 times reg int t67                                 live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int t66, global int y; _g_y: def byte 4, reg int t67, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}      live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t69 <- global int y; _g_y: def byte 4                                    live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}               live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t63, reg int32_t t68, global int y; _g_y: def byte 4, reg int t69, global char[5] arr; _g_arr: def byte 5}
inst=reg int t70 <- 2                                                                 live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg char t63, reg int32_t t68, global int y; _g_y: def byte 4, reg int t69, global char[5] arr; _g_arr: def byte 5}  live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg char t63, reg int t70, global int y; _g_y: def byte 4, reg int t69}
inst=reg int32_t t71 <- reg int t69 times reg int t70                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg char t63, reg int t70, global int y; _g_y: def byte 4, reg int t69} live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t71}
inst=reg int32_t t72 <- reg int32_t t68 plus reg int32_t t71                          live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t71} live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t73 <- &(global short[5, 5] multid; _g_multid: def byte 50)           live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}               live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &short t73}
inst=reg &short t74 <- reg &short t73 plus reg int32_t t72                            live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &short t73} live_out={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg &short t74, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=[reg &short t74] <- reg char t63                                                 live_in={reg char t63, global short[5, 5] multid; _g_multid: def byte 50, reg &short t74, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t75 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={reg int t75, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t76 <- 10                                                                live_in={reg int t75, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t75, global short[5, 5] multid; _g_multid: def byte 50, reg int t76, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t77 <- reg int t75 times reg int t76                                 live_in={reg int t75, global short[5, 5] multid; _g_multid: def byte 50, reg int t76, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t78 <- global int y; _g_y: def byte 4                                    live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int t78, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t79 <- 2                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int t78, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int t78, reg int t79, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t80 <- reg int t78 times reg int t79                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int t78, reg int t79, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}   live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int32_t t80, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t82 <- reg int32_t t77 plus reg int32_t t80                          live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t77, reg int32_t t80, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}            live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t82, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t87 <- &(global short[5, 5] multid; _g_multid: def byte 50)           live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t82, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t82, reg &short t87, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t88 <- reg &short t87 plus reg int32_t t82                            live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t82, reg &short t87, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg &short t88, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg short t86 <- [reg &short t88]                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, reg &short t88, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg short t86}
inst=print reg short t86                                                              live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg short t86}                               live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t89 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t89, global int y; _g_y: def byte 4}
inst=reg int t90 <- 1                                                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t89, global int y; _g_y: def byte 4}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t89, global int y; _g_y: def byte 4, reg int t90, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t91 <- reg int t89 plus reg int t90                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t89, global int y; _g_y: def byte 4, reg int t90, global char[5] arr; _g_arr: def byte 5}                                                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t91, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=global int x; _g_x: def byte 4 <- reg int32_t t91                                live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t91, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=reg int t92 <- global int y; _g_y: def byte 4                                    live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t92}
inst=reg int t93 <- 1                                                                 live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t92}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t92, reg int t93}
inst=reg int32_t t94 <- reg int t92 plus reg int t93                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t92, reg int t93}                                                    live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t94}
inst=global int y; _g_y: def byte 4 <- reg int32_t t94                                live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int32_t t94}                                                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=branch  to auto label label7                                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
BASIC BLOCK:
140283903251344 [label="BB140283903251344{\n[auto label label8]\nlabel8: <class 'ir.EmptyStat'> 140283902795728 {
parent = 140283903090584
}\nbranch  to auto label label9}"];
140283903251344 -> 140283903252408 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=label8: <class 'ir.EmptyStat'> 140283902795728 {
parent = 140283903090584
}      live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
inst=branch  to auto label label9                                                     live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}                                              live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
BASIC BLOCK:
140283903256112 [label="BB140283903256112{\n[auto label label10]\nlabel10: <class 'ir.EmptyStat'> 140283902817896 {
parent = 140283903090584
}}"];
140283903256112 -> exit140283926441296 [label="set()"];


inst=label10: <class 'ir.EmptyStat'> 140283902817896 {
parent = 140283903090584
}     live_in=set()                                                                                                                                                                                                    live_out=set()                                                                           


REGALLOC


LIVENESS INTERVALS:
[{'var': reg int t0, 'interv': range(0, 1)}, {'var': reg int t1, 'interv': range(2, 4)}, {'var': reg int t2, 'interv': range(3, 4)}, {'var': reg int32_t t3, 'interv': range(4, 5)}, {'var': reg int t4, 'interv': range(6, 7)}, {'var': reg int t5, 'interv': range(7, 8)}, {'var': reg int t6, 'interv': range(9, 10)}, {'var': reg int t7, 'interv': range(11, 13)}, {'var': reg int t8, 'interv': range(12, 13)}, {'var': reg int32_t t9, 'interv': range(13, 14)}, {'var': reg int t11, 'interv': range(15, 16)}, {'var': reg int t12, 'interv': range(19, 20)}, {'var': reg int t14, 'interv': range(20, 21)}, {'var': reg int t15, 'interv': range(23, 24)}, {'var': reg int t16, 'interv': range(26, 28)}, {'var': reg int t17, 'interv': range(27, 28)}, {'var': reg int32_t t18, 'interv': range(28, 29)}, {'var': reg int t19, 'interv': range(31, 33)}, {'var': reg int t20, 'interv': range(32, 33)}, {'var': reg int32_t t21, 'interv': range(33, 34)}, {'var': reg int t23, 'interv': range(35, 36)}, {'var': reg int t24, 'interv': range(39, 40)}, {'var': reg int t25, 'interv': range(42, 44)}, {'var': reg int t26, 'interv': range(43, 44)}, {'var': reg int32_t t27, 'interv': range(44, 45)}, {'var': reg int t28, 'interv': range(46, 54)}, {'var': reg int t29, 'interv': range(47, 49)}, {'var': reg int t30, 'interv': range(48, 49)}, {'var': reg int32_t t31, 'interv': range(49, 51)}, {'var': reg int t32, 'interv': range(50, 51)}, {'var': reg int32_t t33, 'interv': range(51, 53)}, {'var': reg &char t34, 'interv': range(52, 53)}, {'var': reg &char t35, 'interv': range(53, 54)}, {'var': reg int t36, 'interv': range(55, 57)}, {'var': reg int t37, 'interv': range(56, 57)}, {'var': reg int32_t t38, 'interv': range(57, 59)}, {'var': reg int t39, 'interv': range(58, 59)}, {'var': reg int32_t t41, 'interv': range(59, 61)}, {'var': reg &char t46, 'interv': range(60, 61)}, {'var': reg &char t47, 'interv': range(61, 62)}, {'var': reg char t45, 'interv': range(62, 63)}, {'var': reg int t48, 'interv': range(64, 66)}, {'var': reg int t49, 'interv': range(65, 66)}, {'var': reg int32_t t50, 'interv': range(66, 67)}, {'var': reg int t51, 'interv': range(70, 71)}, {'var': reg int t52, 'interv': range(72, 73)}, {'var': reg int t53, 'interv': range(75, 77)}, {'var': reg int t54, 'interv': range(76, 77)}, {'var': reg int32_t t55, 'interv': range(77, 78)}, {'var': reg int t56, 'interv': range(80, 82)}, {'var': reg int t57, 'interv': range(81, 82)}, {'var': reg int32_t t58, 'interv': range(82, 83)}, {'var': reg int t59, 'interv': range(84, 86)}, {'var': reg int t60, 'interv': range(85, 86)}, {'var': reg int32_t t62, 'interv': range(86, 88)}, {'var': reg &char t64, 'interv': range(87, 88)}, {'var': reg &char t65, 'interv': range(88, 89)}, {'var': reg char t63, 'interv': range(89, 99)}, {'var': reg int t66, 'interv': range(90, 92)}, {'var': reg int t67, 'interv': range(91, 92)}, {'var': reg int32_t t68, 'interv': range(92, 96)}, {'var': reg int t69, 'interv': range(93, 95)}, {'var': reg int t70, 'interv': range(94, 95)}, {'var': reg int32_t t71, 'interv': range(95, 96)}, {'var': reg int32_t t72, 'interv': range(96, 98)}, {'var': reg &short t73, 'interv': range(97, 98)}, {'var': reg &short t74, 'interv': range(98, 99)}, {'var': reg int t75, 'interv': range(100, 102)}, {'var': reg int t76, 'interv': range(101, 102)}, {'var': reg int32_t t77, 'interv': range(102, 106)}, {'var': reg int t78, 'interv': range(103, 105)}, {'var': reg int t79, 'interv': range(104, 105)}, {'var': reg int32_t t80, 'interv': range(105, 106)}, {'var': reg int32_t t82, 'interv': range(106, 108)}, {'var': reg &short t87, 'interv': range(107, 108)}, {'var': reg &short t88, 'interv': range(108, 109)}, {'var': reg short t86, 'interv': range(109, 110)}, {'var': reg int t89, 'interv': range(111, 113)}, {'var': reg int t90, 'interv': range(112, 113)}, {'var': reg int32_t t91, 'interv': range(113, 114)}, {'var': reg int t92, 'interv': range(115, 117)}, {'var': reg int t93, 'interv': range(116, 117)}, {'var': reg int32_t t94, 'interv': range(117, 118)}]
vartoreg = {reg int t0: 0, reg int t1: 1, reg int t2: 2, reg int32_t t3: 3, reg int t4: 4, reg int t5: 5, reg int t6: 6, reg int t7: 7, reg int t8: 8, reg int32_t t9: 0, reg int t11: 1, reg int t12: 2, reg int t14: 3, reg int t15: 4, reg int t16: 5, reg int t17: 6, reg int32_t t18: 7, reg int t19: 8, reg int t20: 0, reg int32_t t21: 1, reg int t23: 2, reg int t24: 3, reg int t25: 4, reg int t26: 5, reg int32_t t27: 6, reg int t28: 7, reg int t29: 8, reg int t30: 0, reg int32_t t31: 1, reg int t32: 2, reg int32_t t33: 3, reg &char t34: 4, reg &char t35: 5, reg int t36: 6, reg int t37: 7, reg int32_t t38: 8, reg int t39: 0, reg int32_t t41: 1, reg &char t46: 2, reg &char t47: 3, reg char t45: 4, reg int t48: 5, reg int t49: 6, reg int32_t t50: 7, reg int t51: 8, reg int t52: 0, reg int t53: 1, reg int t54: 2, reg int32_t t55: 3, reg int t56: 4, reg int t57: 5, reg int32_t t58: 6, reg int t59: 7, reg int t60: 8, reg int32_t t62: 0, reg &char t64: 1, reg &char t65: 2, reg char t63: 3, reg int t66: 4, reg int t67: 5, reg int32_t t68: 6, reg int t69: 7, reg int t70: 8, reg int32_t t71: 0, reg int32_t t72: 1, reg &short t73: 2, reg &short t74: 4, reg int t75: 5, reg int t76: 6, reg int32_t t77: 7, reg int t78: 8, reg int t79: 0, reg int32_t t80: 1, reg int32_t t82: 2, reg &short t87: 3, reg &short t88: 4, reg short t86: 5, reg int t89: 6, reg int t90: 7, reg int32_t t91: 8, reg int t92: 0, reg int t93: 1, reg int32_t t94: 2}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_y, 4
	.comm _g_squ, 4
	.comm _g_arr, 5
	.comm _g_multid, 50
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 140283903090584 type <class 'ir.StatList'>
	mov r4, #1
	mvn r5, r4
	add r5, r5, #1
	ldr r12, .const0
	str r5, [r12]
	push {r0, r1, r2, r3}
	bl __pl0_read
	mov r6, r0
	pop {r0, r1, r2, r3}
	ldr r12, .const1
	str r6, [r12]
	ldr r12, .const2
	ldr r7, [r12]
	mov r8, #100
	cmp r7, r8
	movgt r0, #1
	movle r0, #0
	tst r0, r0
	bne label2
	ldr r12, .const3
	ldr r1, [r12]
	push {r0, r1, r2, r3}
	mov r0, r1
	bl __pl0_print
	pop {r0, r1, r2, r3}
	b label1
label2:
	@ emptystat
	ldr r12, .const4
	ldr r2, [r12]
	mvn r3, r2
	add r3, r3, #1
	push {r0, r1, r2, r3}
	mov r0, r3
	bl __pl0_print
	pop {r0, r1, r2, r3}
label1:
	@ emptystat
	mov r4, #1
	ldr r12, .const5
	str r4, [r12]
label3:
	@ emptystat
	ldr r12, .const6
	ldr r5, [r12]
	mov r6, #10
	cmp r5, r6
	movle r7, #1
	movgt r7, #0
	tst r7, r7
	beq label4
	push {r0, r1, r2, r3}
	bl square
	pop {r0, r1, r2, r3}
	ldr r12, .const7
	ldr r8, [r12]
	mov r0, #1
	add r1, r8, r0
	ldr r12, .const8
	str r1, [r12]
	ldr r12, .const9
	ldr r2, [r12]
	push {r0, r1, r2, r3}
	mov r0, r2
	bl __pl0_print
	pop {r0, r1, r2, r3}
	b label3
label4:
	@ emptystat
	mov r3, #101
	ldr r12, .const10
	str r3, [r12]
label5:
	@ emptystat
	ldr r12, .const11
	ldr r4, [r12]
	mov r5, #105
	cmp r4, r5
	movle r6, #1
	movgt r6, #0
	tst r6, r6
	beq label6
	ldr r12, .const12
	ldr r7, [r12]
	ldr r12, .const13
	ldr r8, [r12]
	mov r0, #100
	sub r1, r8, r0
	mov r2, #1
	mul r3, r1, r2
	ldr r4, .const14
	add r5, r4, r3
	strb r7, [r5]
	ldr r12, .const15
	ldr r6, [r12]
	mov r7, #100
	sub r8, r6, r7
	mov r0, #1
	mul r1, r8, r0
	ldr r2, .const16
	add r3, r2, r1
	ldrb r4, [r3]
	push {r0, r1, r2, r3}
	mov r0, r4
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const17
	ldr r5, [r12]
	mov r6, #1
	add r7, r5, r6
	ldr r12, .const18
	str r7, [r12]
	b label5
label6:
	@ emptystat
	mov r8, #1
	ldr r12, .const19
	str r8, [r12]
	mov r0, #1
	ldr r12, .const20
	str r0, [r12]
label9:
	@ emptystat
	ldr r12, .const21
	ldr r1, [r12]
	mov r2, #5
	cmp r1, r2
	movle r3, #1
	movgt r3, #0
	tst r3, r3
	beq label10
label7:
	@ emptystat
	ldr r12, .const22
	ldr r4, [r12]
	mov r5, #5
	cmp r4, r5
	movle r6, #1
	movgt r6, #0
	tst r6, r6
	beq label8
	ldr r12, .const23
	ldr r7, [r12]
	mov r8, #1
	mul r0, r7, r8
	ldr r1, .const24
	add r2, r1, r0
	ldrb r3, [r2]
	ldr r12, .const25
	ldr r4, [r12]
	mov r5, #10
	mul r6, r4, r5
	ldr r12, .const26
	ldr r7, [r12]
	mov r8, #2
	mul r0, r7, r8
	add r1, r6, r0
	ldr r2, .const27
	add r4, r2, r1
	strh r3, [r4]
	ldr r12, .const28
	ldr r5, [r12]
	mov r6, #10
	mul r7, r5, r6
	ldr r12, .const29
	ldr r8, [r12]
	mov r0, #2
	mul r1, r8, r0
	add r2, r7, r1
	ldr r3, .const30
	add r4, r3, r2
	ldrh r5, [r4]
	push {r0, r1, r2, r3}
	mov r0, r5
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const31
	ldr r6, [r12]
	mov r7, #1
	add r8, r6, r7
	ldr r12, .const32
	str r8, [r12]
	ldr r12, .const33
	ldr r0, [r12]
	mov r1, #1
	add r2, r0, r1
	ldr r12, .const34
	str r2, [r12]
	b label7
label8:
	@ emptystat
	b label9
label10:
	@ emptystat
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const0:
	.word _g_x
.const1:
	.word _g_x
.const2:
	.word _g_x
.const3:
	.word _g_x
.const4:
	.word _g_x
.const5:
	.word _g_x
.const6:
	.word _g_x
.const7:
	.word _g_x
.const8:
	.word _g_x
.const9:
	.word _g_squ
.const10:
	.word _g_x
.const11:
	.word _g_x
.const12:
	.word _g_x
.const13:
	.word _g_x
.const14:
	.word _g_arr
.const15:
	.word _g_x
.const16:
	.word _g_arr
.const17:
	.word _g_x
.const18:
	.word _g_x
.const19:
	.word _g_x
.const20:
	.word _g_y
.const21:
	.word _g_x
.const22:
	.word _g_y
.const23:
	.word _g_x
.const24:
	.word _g_arr
.const25:
	.word _g_x
.const26:
	.word _g_y
.const27:
	.word _g_multid
.const28:
	.word _g_x
.const29:
	.word _g_y
.const30:
	.word _g_multid
.const31:
	.word _g_x
.const32:
	.word _g_x
.const33:
	.word _g_y
.const34:
	.word _g_y

square:
@ block
	.equ _l_square_test, -4
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #4
	@ irnode 140283903089856 type <class 'ir.StatList'>
	ldr r0, .const35
	str r0, [r11, #_l_square_test]
	ldr r12, .const36
	ldr r1, [r12]
	ldr r12, .const37
	ldr r2, [r12]
	mul r3, r1, r2
	ldr r12, .const38
	str r3, [r12]
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const35:
	.word 1234
.const36:
	.word _g_x
.const37:
	.word _g_x
.const38:
	.word _g_squ

