Compiler arguments: ['main.py']

--- Compiling Program ---
Input Program Snippet:
--------------------
VAR x, y, squ;
VAR arr[5]: char;
var multid[5][5]: short;
{ New variables for loop tests }
VAR i, j, k, m, n, p, q, sum, r;
VAR sm_idx;                 { Loop counter for strip mining test (sm = strip...
--------------------
--- Starting Compilation ---

--- Parsing Program ---
start <function Parser.program at 0x7e07bbcac700>
getsym: varsym var
start <function Parser.block at 0x7e07bbcac3a0>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident y
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident squ
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident arr
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident char
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident multid
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident short
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident i
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident j
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident k
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident m
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident n
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident p
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident q
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident sum
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == comma
getsym: ident r
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_idx
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_source_arr
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 128
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident int
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident sm_dest_arr
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 128
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident int
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: procsym procedure
accepting constsym == procsym
accepting varsym == procsym
accepting procsym == procsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
start <function Parser.block at 0x7e07bbcac3a0>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident test
start <function Parser.vardef at 0x7e07bbcac5e0>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7e07bbcac5e0>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident test
StatList : new 138571679813696
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up test
Looking up test
expecting becomes
accepting becomes == becomes
getsym: number 1234
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679814032 of type <class 'ir.AssignStat'> to 138571679813696
accepting semicolon == semicolon
getsym: ident squ
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up squ
Looking up squ
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: times *
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
getsym: ident x
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679814320 of type <class 'ir.AssignStat'> to 138571679813696
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571679813696 : [ 138571679814032 138571679814320 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.block at 0x7e07bbcac3a0>
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
Looking up square
accepting procsym == beginsym
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 138571679814464
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: minus -
start <function Parser.expression at 0x7e07bbcac040>
getsym: number 1
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679814752 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: read read
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == read
accepting callsym == read
accepting beginsym == read
accepting ifsym == read
accepting whilesym == read
accepting forsym == read
accepting print == read
accepting read == read
getsym: ident x
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679814848 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: ident x
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == ident
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: gtr >
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 100
condition operator gtr number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571679815376
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: minus -
start <function Parser.expression at 0x7e07bbcac040>
getsym: ident x
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679815664 of type <class 'ir.PrintStat'> to 138571679815376
expecting endsym
accepting endsym == endsym
getsym: elsesym else
StatList 138571679815376 : [ 138571679815664 ]
end <function Parser.statement at 0x7e07bbcac280>
accepting elsesym == elsesym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571679815808
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679815136 of type <class 'ir.PrintStat'> to 138571679815808
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571679815808 : [ 138571679815136 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679815424 of type <class 'ir.IfStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679816000 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == ident
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 10
condition operator leq number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: callsym call
StatList : new 138571679816480
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == callsym
accepting callsym == callsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up square
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679816528 of type <class 'ir.CallStat'> to 138571679816480
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 1
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679816912 of type <class 'ir.AssignStat'> to 138571679816480
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident squ
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: endsym end
Looking up squ
Looking up squ
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679817056 of type <class 'ir.PrintStat'> to 138571679816480
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571679816480 : [ 138571679816528 138571679816912 138571679817056 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679817152 of type <class 'ir.WhileStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 101
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571679817296 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == ident
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 105
condition operator leq number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident arr
StatList : new 138571679817632
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 100
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680275184 of type <class 'ir.AssignStat'> to 138571679817632
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 100
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680276144 of type <class 'ir.PrintStat'> to 138571679817632
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 1
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680274032 of type <class 'ir.AssignStat'> to 138571679817632
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571679817632 : [ 138571680275184 138571680276144 138571680274032 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680273984 of type <class 'ir.WhileStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680273792 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680273552 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == ident
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: whilesym while
StatList : new 138571680272784
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident y
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == ident
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: leq <=
Looking up y
Looking up y
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident multid
StatList : new 138571680072128
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680073520 of type <class 'ir.AssignStat'> to 138571680072128
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident multid
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680072368 of type <class 'ir.PrintStat'> to 138571680072128
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 1
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680074336 of type <class 'ir.AssignStat'> to 138571680072128
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: ident y
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up y
Looking up y
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: number 1
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680074672 of type <class 'ir.AssignStat'> to 138571680072128
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 138571680072128 : [ 138571680073520 138571680072368 138571680074336 138571680074672 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680074720 of type <class 'ir.WhileStat'> to 138571680272784
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680272784 : [ 138571680074720 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680074768 of type <class 'ir.WhileStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident a
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int a' and body_symtab for 'a'
FOR LOOP - Variable symbol: auto int a
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 20
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680075056
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident a
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up a
Looking up a
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680075392 of type <class 'ir.PrintStat'> to 138571680075056
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680075056 : [ 138571680075392 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680534336 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident i
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up i
Looking up i
expecting becomes
accepting becomes == becomes
getsym: number 10
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680534480 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99991
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680533904 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident i
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int i' and body_symtab for 'i'
FOR LOOP - Variable symbol: auto int i
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 15
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680533472
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident i
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up i
Looking up i
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680533280 of type <class 'ir.PrintStat'> to 138571680533472
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680533472 : [ 138571680533280 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680532608 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88881
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680532464 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99992
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680532272 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident j
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int j' and body_symtab for 'j'
FOR LOOP - Variable symbol: auto int j
expecting becomes
accepting becomes == becomes
getsym: number 5
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680531936
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident j
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up j
Looking up j
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680531744 of type <class 'ir.PrintStat'> to 138571680531936
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680531936 : [ 138571680531744 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680531072 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88882
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680530928 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99993
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680530736 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident k
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int k' and body_symtab for 'k'
FOR LOOP - Variable symbol: auto int k
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680432240
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 77777
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680432192 of type <class 'ir.PrintStat'> to 138571680432240
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident k
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up k
Looking up k
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680432624 of type <class 'ir.PrintStat'> to 138571680432240
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680432240 : [ 138571680432192 138571680432624 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680433344 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88883
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680433488 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99994
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680433680 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident m
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int m' and body_symtab for 'm'
FOR LOOP - Variable symbol: auto int m
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 6
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680434064
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident m
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up m
Looking up m
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680436176 of type <class 'ir.PrintStat'> to 138571680434064
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680434064 : [ 138571680436176 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680435504 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88884
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680435360 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99995
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680435168 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident n
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int n' and body_symtab for 'n'
FOR LOOP - Variable symbol: auto int n
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 7
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680434832
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident n
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up n
Looking up n
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680434640 of type <class 'ir.PrintStat'> to 138571680434832
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680434832 : [ 138571680434640 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680346416 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88885
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680346224 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99996
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680346752 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident p
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int p' and body_symtab for 'p'
FOR LOOP - Variable symbol: auto int p
expecting becomes
accepting becomes == becomes
getsym: number 10
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 12
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680347232
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident p
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up p
Looking up p
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680347280 of type <class 'ir.PrintStat'> to 138571680347232
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680347232 : [ 138571680347280 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680348144 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88886
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680347904 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident sum
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680348288 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99997
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680348384 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident q
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int q' and body_symtab for 'q'
FOR LOOP - Variable symbol: auto int q
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 5
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident sum
StatList : new 138571680348720
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up sum
Looking up sum
expecting becomes
accepting becomes == becomes
getsym: ident sum
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up sum
Looking up sum
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: ident q
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680349296 of type <class 'ir.AssignStat'> to 138571680348720
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident q
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up q
Looking up q
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680349440 of type <class 'ir.PrintStat'> to 138571680348720
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680349104 of type <class 'ir.PrintStat'> to 138571680348720
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680348720 : [ 138571680349296 138571680349440 138571680349104 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680349680 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sum
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up sum
Looking up sum
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680770848 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88887
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680771424 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 100
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680772048 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 99998
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680771904 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident r
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int r' and body_symtab for 'r'
FOR LOOP - Variable symbol: auto int r
expecting becomes
accepting becomes == becomes
getsym: number 1
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 3
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 138571680771280
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: ident r
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up r
Looking up r
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680770752 of type <class 'ir.AssignStat'> to 138571680771280
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680770608 of type <class 'ir.PrintStat'> to 138571680771280
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680771280 : [ 138571680770752 138571680770608 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680305648 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680305792 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 88888
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680305984 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 999990
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680306176 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ident sm_idx
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: becomes :=
Looking up sm_idx
Looking up sm_idx
expecting becomes
accepting becomes == becomes
getsym: number 0
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680306368 of type <class 'ir.AssignStat'> to 138571679814464
accepting semicolon == semicolon
getsym: forsym for
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == forsym
accepting callsym == forsym
accepting beginsym == forsym
accepting ifsym == forsym
accepting whilesym == forsym
accepting forsym == forsym
getsym: ident sm_idx
FOR LOOP - Start parsing
expecting ident
accepting ident == ident
getsym: becomes :=
FOR LOOP - Created symbol 'auto int sm_idx' and body_symtab for 'sm_idx'
FOR LOOP - Variable symbol: auto int sm_idx
expecting becomes
accepting becomes == becomes
getsym: number 0
FOR LOOP - Assignment operator found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: tosym to
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - Start expression parsed
expecting tosym
accepting tosym == tosym
getsym: number 127
FOR LOOP - 'to' keyword found
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
FOR LOOP - End expression parsed
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
FOR LOOP - 'do' keyword found
FOR LOOP - Parsing body, next token: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident sm_dest_arr
StatList : new 138571680306608
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: ident sm_idx
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident sm_source_arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up sm_source_arr
Looking up sm_source_arr
expecting lspar
accepting lspar == lspar
getsym: ident sm_idx
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: rspar ]
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: plus +
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
getsym: ident sm_idx
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: semicolon ;
Looking up sm_idx
Looking up sm_idx
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680307568 of type <class 'ir.AssignStat'> to 138571680306608
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680306608 : [ 138571680307568 ]
end <function Parser.statement at 0x7e07bbcac280>
FOR LOOP - Body parsed, next token: semicolon ;
FOR LOOP - Complete, returning ForStat
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680308144 of type <class 'ir.ForStat'> to 138571679814464
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: number 127
start <function Parser.condition at 0x7e07bbcac160>
accepting oddsym == number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: geq >=
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
getsym: number 0
condition operator geq number
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.condition at 0x7e07bbcac160>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 138571680308480
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 76543
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680308672 of type <class 'ir.PrintStat'> to 138571680308480
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 0
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680309104 of type <class 'ir.PrintStat'> to 138571680308480
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 64
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680252304 of type <class 'ir.PrintStat'> to 138571680308480
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: ident sm_dest_arr
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == ident
getsym: lspar [
Looking up sm_dest_arr
Looking up sm_dest_arr
expecting lspar
accepting lspar == lspar
getsym: number 127
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680252784 of type <class 'ir.PrintStat'> to 138571680308480
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 138571680308480 : [ 138571680308672 138571680309104 138571680252304 138571680252784 ]
end <function Parser.statement at 0x7e07bbcac280>
accepting elsesym == semicolon
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680252928 of type <class 'ir.IfStat'> to 138571679814464
accepting semicolon == semicolon
getsym: print print
start <function Parser.statement at 0x7e07bbcac280>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting forsym == print
accepting print == print
getsym: number 888880
start <function Parser.expression at 0x7e07bbcac040>
start <function Parser.term at 0x7e07bbc92ee0>
start <function Parser.factor at 0x7e07bbc92dc0>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7e07bbc92dc0>
end <function Parser.term at 0x7e07bbc92ee0>
end <function Parser.expression at 0x7e07bbcac040>
end <function Parser.statement at 0x7e07bbcac280>
StatList: appending 138571680253072 of type <class 'ir.PrintStat'> to 138571679814464
accepting semicolon == semicolon
getsym: endsym end
Found END immediately after semicolon, ending statement list.
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 138571679814464 : [ 138571679814752 138571679814848 138571679815424 138571679816000 138571679817152 138571679817296 138571680273984 138571680273792 138571680273552 138571680074768 138571680534336 138571680534480 138571680533904 138571680532608 138571680532464 138571680532272 138571680531072 138571680530928 138571680530736 138571680433344 138571680433488 138571680433680 138571680435504 138571680435360 138571680435168 138571680346416 138571680346224 138571680346752 138571680348144 138571680347904 138571680348288 138571680348384 138571680349680 138571680770848 138571680771424 138571680772048 138571680771904 138571680305648 138571680305792 138571680305984 138571680306176 138571680306368 138571680308144 138571680252928 138571680253072 ]
end <function Parser.statement at 0x7e07bbcac280>
end <function Parser.block at 0x7e07bbcac3a0>
expecting period
accepting period == period
end <function Parser.program at 0x7e07bbcac700>

--- Initial IR Tree (from Parser) ---
<class 'ir.Block'> 138571680253168 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 138571679814464 {
	parent = 138571680253168
		children:
		<class 'ir.AssignStat'> 138571679814752 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.UnExpr'> 138571679814656 {
			parent = 138571679814752
				children:
				'minus'
				<class 'ir.Const'> 138571679814560 {
				parent = 138571679814656
					value: 	1
					symbol: 	None
				}
			}
			offset: 	None
		}
		<class 'ir.AssignStat'> 138571679814848 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.ReadStat'> 138571680285984 {
			parent = 138571679814848
			}
			offset: 	None
		}
		<class 'ir.IfStat'> 138571679815424 {
		parent = 138571679814464
			thenpart: 	<class 'ir.StatList'> 138571679815376 {
			parent = 138571679815424
				children:
				<class 'ir.PrintStat'> 138571679815664 {
				parent = 138571679815376
					children:
					<class 'ir.UnExpr'> 138571679815568 {
					parent = 138571679815664
						children:
						'minus'
						<class 'ir.Var'> 138571679815520 {
						parent = 138571679815568
							symbol: 	global int x
						}
					}
					expr: 	<class 'ir.UnExpr'> 138571679815568 {
					parent = 138571679815664
						children:
						'minus'
						<class 'ir.Var'> 138571679815520 {
						parent = 138571679815568
							symbol: 	global int x
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 138571679815088 {
			parent = 138571679815424
				children:
				'gtr'
				<class 'ir.Var'> 138571679814896 {
				parent = 138571679815088
					symbol: 	global int x
				}
				<class 'ir.Const'> 138571679814992 {
				parent = 138571679815088
					value: 	100
					symbol: 	None
				}
			}
			elsepart: 	<class 'ir.StatList'> 138571679815808 {
			parent = 138571679815424
				children:
				<class 'ir.PrintStat'> 138571679815136 {
				parent = 138571679815808
					children:
					<class 'ir.Var'> 138571679815712 {
					parent = 138571679815136
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 138571679815712 {
					parent = 138571679815136
						symbol: 	global int x
					}
				}
			}
		}
		<class 'ir.AssignStat'> 138571679816000 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 138571679815904 {
			parent = 138571679816000
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.WhileStat'> 138571679817152 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571679816480 {
			parent = 138571679817152
				children:
				<class 'ir.CallStat'> 138571679816528 {
				parent = 138571679816480
					call: 	<class 'ir.CallExpr'> 138571679816384 {
					parent = 138571679816528
						symbol: 	auto function square
					}
				}
				<class 'ir.AssignStat'> 138571679816912 {
				parent = 138571679816480
					symbol: 	global int x
					expr: 	<class 'ir.BinExpr'> 138571679816816 {
					parent = 138571679816912
						children:
						'plus'
						<class 'ir.Var'> 138571679816624 {
						parent = 138571679816816
							symbol: 	global int x
						}
						<class 'ir.Const'> 138571679816720 {
						parent = 138571679816816
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
				}
				<class 'ir.PrintStat'> 138571679817056 {
				parent = 138571679816480
					children:
					<class 'ir.Var'> 138571679816960 {
					parent = 138571679817056
						symbol: 	global int squ
					}
					expr: 	<class 'ir.Var'> 138571679816960 {
					parent = 138571679817056
						symbol: 	global int squ
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 138571679816336 {
			parent = 138571679817152
				children:
				'leq'
				<class 'ir.Var'> 138571679816048 {
				parent = 138571679816336
					symbol: 	global int x
				}
				<class 'ir.Const'> 138571679816144 {
				parent = 138571679816336
					value: 	10
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 138571679817296 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 138571679817200 {
			parent = 138571679817296
				value: 	101
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.WhileStat'> 138571680273984 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571679817632 {
			parent = 138571680273984
				children:
				<class 'ir.AssignStat'> 138571680275184 {
				parent = 138571679817632
					symbol: 	global char[5] arr
					expr: 	<class 'ir.Var'> 138571680275424 {
					parent = 138571680275184
						symbol: 	global int x
					}
					offset: 	<class 'ir.BinExpr'> 138571680275280 {
					parent = 138571680275184
						children:
						'times'
						<class 'ir.BinExpr'> 138571680275520 {
						parent = 138571680275280
							children:
							'minus'
							<class 'ir.Var'> 138571680275040 {
							parent = 138571680275520
								symbol: 	global int x
							}
							<class 'ir.Const'> 138571680275376 {
							parent = 138571680275520
								value: 	100
								symbol: 	None
							}
						}
						<class 'ir.Const'> 138571680275232 {
						parent = 138571680275280
							value: 	1
							symbol: 	None
						}
					}
				}
				<class 'ir.PrintStat'> 138571680276144 {
				parent = 138571679817632
					children:
					<class 'ir.ArrayElement'> 138571680275952 {
					parent = 138571680276144
						children:
						<class 'ir.BinExpr'> 138571680276048 {
						parent = 138571680275952
							children:
							'times'
							<class 'ir.BinExpr'> 138571680275856 {
							parent = 138571680276048
								children:
								'minus'
								<class 'ir.Var'> 138571680286896 {
								parent = 138571680275856
									symbol: 	global int x
								}
								<class 'ir.Const'> 138571680275760 {
								parent = 138571680275856
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 138571680275136 {
							parent = 138571680276048
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
						offset: 	<class 'ir.BinExpr'> 138571680276048 {
						parent = 138571680275952
							children:
							'times'
							<class 'ir.BinExpr'> 138571680275856 {
							parent = 138571680276048
								children:
								'minus'
								<class 'ir.Var'> 138571680286896 {
								parent = 138571680275856
									symbol: 	global int x
								}
								<class 'ir.Const'> 138571680275760 {
								parent = 138571680275856
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 138571680275136 {
							parent = 138571680276048
								value: 	1
								symbol: 	None
							}
						}
					}
					expr: 	<class 'ir.ArrayElement'> 138571680275952 {
					parent = 138571680276144
						children:
						<class 'ir.BinExpr'> 138571680276048 {
						parent = 138571680275952
							children:
							'times'
							<class 'ir.BinExpr'> 138571680275856 {
							parent = 138571680276048
								children:
								'minus'
								<class 'ir.Var'> 138571680286896 {
								parent = 138571680275856
									symbol: 	global int x
								}
								<class 'ir.Const'> 138571680275760 {
								parent = 138571680275856
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 138571680275136 {
							parent = 138571680276048
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
						offset: 	<class 'ir.BinExpr'> 138571680276048 {
						parent = 138571680275952
							children:
							'times'
							<class 'ir.BinExpr'> 138571680275856 {
							parent = 138571680276048
								children:
								'minus'
								<class 'ir.Var'> 138571680286896 {
								parent = 138571680275856
									symbol: 	global int x
								}
								<class 'ir.Const'> 138571680275760 {
								parent = 138571680275856
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 138571680275136 {
							parent = 138571680276048
								value: 	1
								symbol: 	None
							}
						}
					}
				}
				<class 'ir.AssignStat'> 138571680274032 {
				parent = 138571679817632
					symbol: 	global int x
					expr: 	<class 'ir.BinExpr'> 138571680274992 {
					parent = 138571680274032
						children:
						'plus'
						<class 'ir.Var'> 138571680276288 {
						parent = 138571680274992
							symbol: 	global int x
						}
						<class 'ir.Const'> 138571680276384 {
						parent = 138571680274992
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
				}
			}
			cond: 	<class 'ir.BinExpr'> 138571679817536 {
			parent = 138571680273984
				children:
				'leq'
				<class 'ir.Var'> 138571679817344 {
				parent = 138571679817536
					symbol: 	global int x
				}
				<class 'ir.Const'> 138571679817440 {
				parent = 138571679817536
					value: 	105
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 138571680273792 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 138571680273888 {
			parent = 138571680273792
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.AssignStat'> 138571680273552 {
		parent = 138571679814464
			symbol: 	global int y
			expr: 	<class 'ir.Const'> 138571680273744 {
			parent = 138571680273552
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.WhileStat'> 138571680074768 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680272784 {
			parent = 138571680074768
				children:
				<class 'ir.WhileStat'> 138571680074720 {
				parent = 138571680272784
					body: 	<class 'ir.StatList'> 138571680072128 {
					parent = 138571680074720
						children:
						<class 'ir.AssignStat'> 138571680073520 {
						parent = 138571680072128
							symbol: 	global short[5, 5] multid
							expr: 	<class 'ir.ArrayElement'> 138571680073712 {
							parent = 138571680073520
								children:
								<class 'ir.BinExpr'> 138571680073616 {
								parent = 138571680073712
									children:
									'times'
									<class 'ir.Var'> 138571680073184 {
									parent = 138571680073616
										symbol: 	global int x
									}
									<class 'ir.Const'> 138571680073808 {
									parent = 138571680073616
										value: 	1
										symbol: 	None
									}
								}
								symbol: 	global char[5] arr
								offset: 	<class 'ir.BinExpr'> 138571680073616 {
								parent = 138571680073712
									children:
									'times'
									<class 'ir.Var'> 138571680073184 {
									parent = 138571680073616
										symbol: 	global int x
									}
									<class 'ir.Const'> 138571680073808 {
									parent = 138571680073616
										value: 	1
										symbol: 	None
									}
								}
							}
							offset: 	<class 'ir.BinExpr'> 138571680073904 {
							parent = 138571680073520
								children:
								'plus'
								<class 'ir.BinExpr'> 138571680074096 {
								parent = 138571680073904
									children:
									'times'
									<class 'ir.Var'> 138571680072032 {
									parent = 138571680074096
										symbol: 	global int x
									}
									<class 'ir.Const'> 138571680072416 {
									parent = 138571680074096
										value: 	10
										symbol: 	None
									}
								}
								<class 'ir.BinExpr'> 138571680074000 {
								parent = 138571680073904
									children:
									'times'
									<class 'ir.Var'> 138571680072272 {
									parent = 138571680074000
										symbol: 	global int y
									}
									<class 'ir.Const'> 138571680072512 {
									parent = 138571680074000
										value: 	2
										symbol: 	None
									}
								}
							}
						}
						<class 'ir.PrintStat'> 138571680072368 {
						parent = 138571680072128
							children:
							<class 'ir.ArrayElement'> 138571680073088 {
							parent = 138571680072368
								children:
								<class 'ir.BinExpr'> 138571680072656 {
								parent = 138571680073088
									children:
									'plus'
									<class 'ir.BinExpr'> 138571680072992 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680287136 {
										parent = 138571680072992
											symbol: 	global int x
										}
										<class 'ir.Const'> 138571680073424 {
										parent = 138571680072992
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 138571680072800 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680073328 {
										parent = 138571680072800
											symbol: 	global int y
										}
										<class 'ir.Const'> 138571680072896 {
										parent = 138571680072800
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
								offset: 	<class 'ir.BinExpr'> 138571680072656 {
								parent = 138571680073088
									children:
									'plus'
									<class 'ir.BinExpr'> 138571680072992 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680287136 {
										parent = 138571680072992
											symbol: 	global int x
										}
										<class 'ir.Const'> 138571680073424 {
										parent = 138571680072992
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 138571680072800 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680073328 {
										parent = 138571680072800
											symbol: 	global int y
										}
										<class 'ir.Const'> 138571680072896 {
										parent = 138571680072800
											value: 	2
											symbol: 	None
										}
									}
								}
							}
							expr: 	<class 'ir.ArrayElement'> 138571680073088 {
							parent = 138571680072368
								children:
								<class 'ir.BinExpr'> 138571680072656 {
								parent = 138571680073088
									children:
									'plus'
									<class 'ir.BinExpr'> 138571680072992 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680287136 {
										parent = 138571680072992
											symbol: 	global int x
										}
										<class 'ir.Const'> 138571680073424 {
										parent = 138571680072992
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 138571680072800 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680073328 {
										parent = 138571680072800
											symbol: 	global int y
										}
										<class 'ir.Const'> 138571680072896 {
										parent = 138571680072800
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
								offset: 	<class 'ir.BinExpr'> 138571680072656 {
								parent = 138571680073088
									children:
									'plus'
									<class 'ir.BinExpr'> 138571680072992 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680287136 {
										parent = 138571680072992
											symbol: 	global int x
										}
										<class 'ir.Const'> 138571680073424 {
										parent = 138571680072992
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 138571680072800 {
									parent = 138571680072656
										children:
										'times'
										<class 'ir.Var'> 138571680073328 {
										parent = 138571680072800
											symbol: 	global int y
										}
										<class 'ir.Const'> 138571680072896 {
										parent = 138571680072800
											value: 	2
											symbol: 	None
										}
									}
								}
							}
						}
						<class 'ir.AssignStat'> 138571680074336 {
						parent = 138571680072128
							symbol: 	global int x
							expr: 	<class 'ir.BinExpr'> 138571680074240 {
							parent = 138571680074336
								children:
								'plus'
								<class 'ir.Var'> 138571680072320 {
								parent = 138571680074240
									symbol: 	global int x
								}
								<class 'ir.Const'> 138571680072560 {
								parent = 138571680074240
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
						}
						<class 'ir.AssignStat'> 138571680074672 {
						parent = 138571680072128
							symbol: 	global int y
							expr: 	<class 'ir.BinExpr'> 138571680074576 {
							parent = 138571680074672
								children:
								'plus'
								<class 'ir.Var'> 138571680074384 {
								parent = 138571680074576
									symbol: 	global int y
								}
								<class 'ir.Const'> 138571680074480 {
								parent = 138571680074576
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
						}
					}
					cond: 	<class 'ir.BinExpr'> 138571680071792 {
					parent = 138571680074720
						children:
						'leq'
						<class 'ir.Var'> 138571680272592 {
						parent = 138571680071792
							symbol: 	global int y
						}
						<class 'ir.Const'> 138571680071888 {
						parent = 138571680071792
							value: 	5
							symbol: 	None
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 138571680272976 {
			parent = 138571680074768
				children:
				'leq'
				<class 'ir.Var'> 138571680286080 {
				parent = 138571680272976
					symbol: 	global int x
				}
				<class 'ir.Const'> 138571680273072 {
				parent = 138571680272976
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.ForStat'> 138571680534336 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680075056 {
			parent = 138571680534336
				children:
				<class 'ir.PrintStat'> 138571680075392 {
				parent = 138571680075056
					children:
					<class 'ir.Var'> 138571680075488 {
					parent = 138571680075392
						symbol: 	auto int a
					}
					expr: 	<class 'ir.Var'> 138571680075488 {
					parent = 138571680075392
						symbol: 	auto int a
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680534288 {
			parent = 138571680534336
				symbol: 	auto int a
				expr: 	<class 'ir.BinExpr'> 138571680534192 {
				parent = 138571680534288
					children:
					'plus'
					<class 'ir.Var'> 138571680075248 {
					parent = 138571680534192
						symbol: 	auto int a
					}
					<class 'ir.Const'> 138571680534096 {
					parent = 138571680534192
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680075152 {
			parent = 138571680534336
				children:
				'leq'
				<class 'ir.Var'> 138571680075632 {
				parent = 138571680075152
					symbol: 	auto int a
				}
				<class 'ir.Const'> 138571680074960 {
				parent = 138571680075152
					value: 	20
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 138571680534480 {
		parent = 138571679814464
			symbol: 	global int i
			expr: 	<class 'ir.Const'> 138571680534384 {
			parent = 138571680534480
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.PrintStat'> 138571680533904 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680287232 {
			parent = 138571680533904
				value: 	99991
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680287232 {
			parent = 138571680533904
				value: 	99991
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680532608 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680533472 {
			parent = 138571680532608
				children:
				<class 'ir.PrintStat'> 138571680533280 {
				parent = 138571680533472
					children:
					<class 'ir.Var'> 138571680533376 {
					parent = 138571680533280
						symbol: 	global int i
					}
					expr: 	<class 'ir.Var'> 138571680533376 {
					parent = 138571680533280
						symbol: 	global int i
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680532656 {
			parent = 138571680532608
				symbol: 	auto int i
				expr: 	<class 'ir.BinExpr'> 138571680532752 {
				parent = 138571680532656
					children:
					'plus'
					<class 'ir.Var'> 138571680532944 {
					parent = 138571680532752
						symbol: 	auto int i
					}
					<class 'ir.Const'> 138571680532848 {
					parent = 138571680532752
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680533040 {
			parent = 138571680532608
				children:
				'leq'
				<class 'ir.Var'> 138571680533136 {
				parent = 138571680533040
					symbol: 	auto int i
				}
				<class 'ir.Const'> 138571680533568 {
				parent = 138571680533040
					value: 	15
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680532464 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680532560 {
			parent = 138571680532464
				value: 	88881
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680532560 {
			parent = 138571680532464
				value: 	88881
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680532272 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680532368 {
			parent = 138571680532272
				value: 	99992
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680532368 {
			parent = 138571680532272
				value: 	99992
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680531072 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680531936 {
			parent = 138571680531072
				children:
				<class 'ir.PrintStat'> 138571680531744 {
				parent = 138571680531936
					children:
					<class 'ir.Var'> 138571680531840 {
					parent = 138571680531744
						symbol: 	global int j
					}
					expr: 	<class 'ir.Var'> 138571680531840 {
					parent = 138571680531744
						symbol: 	global int j
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680531120 {
			parent = 138571680531072
				symbol: 	auto int j
				expr: 	<class 'ir.BinExpr'> 138571680531216 {
				parent = 138571680531120
					children:
					'plus'
					<class 'ir.Var'> 138571680531408 {
					parent = 138571680531216
						symbol: 	auto int j
					}
					<class 'ir.Const'> 138571680531312 {
					parent = 138571680531216
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680531504 {
			parent = 138571680531072
				children:
				'leq'
				<class 'ir.Var'> 138571680531600 {
				parent = 138571680531504
					symbol: 	auto int j
				}
				<class 'ir.Const'> 138571680532032 {
				parent = 138571680531504
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680530928 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680531024 {
			parent = 138571680530928
				value: 	88882
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680531024 {
			parent = 138571680530928
				value: 	88882
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680530736 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680530832 {
			parent = 138571680530736
				value: 	99993
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680530832 {
			parent = 138571680530736
				value: 	99993
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680433344 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680432240 {
			parent = 138571680433344
				children:
				<class 'ir.PrintStat'> 138571680432192 {
				parent = 138571680432240
					children:
					<class 'ir.Const'> 138571680432432 {
					parent = 138571680432192
						value: 	77777
						symbol: 	None
					}
					expr: 	<class 'ir.Const'> 138571680432432 {
					parent = 138571680432192
						value: 	77777
						symbol: 	None
					}
				}
				<class 'ir.PrintStat'> 138571680432624 {
				parent = 138571680432240
					children:
					<class 'ir.Var'> 138571680432528 {
					parent = 138571680432624
						symbol: 	global int k
					}
					expr: 	<class 'ir.Var'> 138571680432528 {
					parent = 138571680432624
						symbol: 	global int k
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680433296 {
			parent = 138571680433344
				symbol: 	auto int k
				expr: 	<class 'ir.BinExpr'> 138571680433200 {
				parent = 138571680433296
					children:
					'plus'
					<class 'ir.Var'> 138571680432960 {
					parent = 138571680433200
						symbol: 	auto int k
					}
					<class 'ir.Const'> 138571680433104 {
					parent = 138571680433200
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680432864 {
			parent = 138571680433344
				children:
				'leq'
				<class 'ir.Var'> 138571680432768 {
				parent = 138571680432864
					symbol: 	auto int k
				}
				<class 'ir.Const'> 138571680530496 {
				parent = 138571680432864
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680433488 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680433392 {
			parent = 138571680433488
				value: 	88883
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680433392 {
			parent = 138571680433488
				value: 	88883
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680433680 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680433584 {
			parent = 138571680433680
				value: 	99994
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680433584 {
			parent = 138571680433680
				value: 	99994
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680435504 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680434064 {
			parent = 138571680435504
				children:
				<class 'ir.PrintStat'> 138571680436176 {
				parent = 138571680434064
					children:
					<class 'ir.Var'> 138571680434160 {
					parent = 138571680436176
						symbol: 	global int m
					}
					expr: 	<class 'ir.Var'> 138571680434160 {
					parent = 138571680436176
						symbol: 	global int m
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680435552 {
			parent = 138571680435504
				symbol: 	auto int m
				expr: 	<class 'ir.BinExpr'> 138571680435648 {
				parent = 138571680435552
					children:
					'plus'
					<class 'ir.Var'> 138571680435840 {
					parent = 138571680435648
						symbol: 	auto int m
					}
					<class 'ir.Const'> 138571680435744 {
					parent = 138571680435648
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680435936 {
			parent = 138571680435504
				children:
				'leq'
				<class 'ir.Var'> 138571680436032 {
				parent = 138571680435936
					symbol: 	auto int m
				}
				<class 'ir.Const'> 138571680433920 {
				parent = 138571680435936
					value: 	6
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680435360 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680435456 {
			parent = 138571680435360
				value: 	88884
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680435456 {
			parent = 138571680435360
				value: 	88884
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680435168 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680435264 {
			parent = 138571680435168
				value: 	99995
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680435264 {
			parent = 138571680435168
				value: 	99995
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680346416 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680434832 {
			parent = 138571680346416
				children:
				<class 'ir.PrintStat'> 138571680434640 {
				parent = 138571680434832
					children:
					<class 'ir.Var'> 138571680434736 {
					parent = 138571680434640
						symbol: 	global int n
					}
					expr: 	<class 'ir.Var'> 138571680434736 {
					parent = 138571680434640
						symbol: 	global int n
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680346464 {
			parent = 138571680346416
				symbol: 	auto int n
				expr: 	<class 'ir.BinExpr'> 138571680346560 {
				parent = 138571680346464
					children:
					'plus'
					<class 'ir.Var'> 138571680434304 {
					parent = 138571680346560
						symbol: 	auto int n
					}
					<class 'ir.Const'> 138571680346176 {
					parent = 138571680346560
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680434400 {
			parent = 138571680346416
				children:
				'leq'
				<class 'ir.Var'> 138571680434496 {
				parent = 138571680434400
					symbol: 	auto int n
				}
				<class 'ir.Const'> 138571680434928 {
				parent = 138571680434400
					value: 	7
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680346224 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680346368 {
			parent = 138571680346224
				value: 	88885
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680346368 {
			parent = 138571680346224
				value: 	88885
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680346752 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680346656 {
			parent = 138571680346752
				value: 	99996
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680346656 {
			parent = 138571680346752
				value: 	99996
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680348144 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680347232 {
			parent = 138571680348144
				children:
				<class 'ir.PrintStat'> 138571680347280 {
				parent = 138571680347232
					children:
					<class 'ir.Var'> 138571680347088 {
					parent = 138571680347280
						symbol: 	global int p
					}
					expr: 	<class 'ir.Var'> 138571680347088 {
					parent = 138571680347280
						symbol: 	global int p
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680348096 {
			parent = 138571680348144
				symbol: 	auto int p
				expr: 	<class 'ir.BinExpr'> 138571680348000 {
				parent = 138571680348096
					children:
					'plus'
					<class 'ir.Var'> 138571680347472 {
					parent = 138571680348000
						symbol: 	auto int p
					}
					<class 'ir.Const'> 138571680347712 {
					parent = 138571680348000
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680347568 {
			parent = 138571680348144
				children:
				'leq'
				<class 'ir.Var'> 138571680347424 {
				parent = 138571680347568
					symbol: 	auto int p
				}
				<class 'ir.Const'> 138571680346992 {
				parent = 138571680347568
					value: 	12
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680347904 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680348192 {
			parent = 138571680347904
				value: 	88886
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680348192 {
			parent = 138571680347904
				value: 	88886
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 138571680348288 {
		parent = 138571679814464
			symbol: 	global int sum
			expr: 	<class 'ir.Const'> 138571680347760 {
			parent = 138571680348288
				value: 	0
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.PrintStat'> 138571680348384 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680287952 {
			parent = 138571680348384
				value: 	99997
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680287952 {
			parent = 138571680348384
				value: 	99997
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680349680 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680348720 {
			parent = 138571680349680
				children:
				<class 'ir.AssignStat'> 138571680349296 {
				parent = 138571680348720
					symbol: 	global int sum
					expr: 	<class 'ir.BinExpr'> 138571680349008 {
					parent = 138571680349296
						children:
						'plus'
						<class 'ir.Var'> 138571680348816 {
						parent = 138571680349008
							symbol: 	global int sum
						}
						<class 'ir.Var'> 138571680348912 {
						parent = 138571680349008
							symbol: 	global int q
						}
					}
					offset: 	None
				}
				<class 'ir.PrintStat'> 138571680349440 {
				parent = 138571680348720
					children:
					<class 'ir.Var'> 138571680349344 {
					parent = 138571680349440
						symbol: 	global int q
					}
					expr: 	<class 'ir.Var'> 138571680349344 {
					parent = 138571680349440
						symbol: 	global int q
					}
				}
				<class 'ir.PrintStat'> 138571680349104 {
				parent = 138571680348720
					children:
					<class 'ir.Var'> 138571680349248 {
					parent = 138571680349104
						symbol: 	global int sum
					}
					expr: 	<class 'ir.Var'> 138571680349248 {
					parent = 138571680349104
						symbol: 	global int sum
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680349728 {
			parent = 138571680349680
				symbol: 	auto int q
				expr: 	<class 'ir.BinExpr'> 138571680349824 {
				parent = 138571680349728
					children:
					'plus'
					<class 'ir.Var'> 138571680350016 {
					parent = 138571680349824
						symbol: 	auto int q
					}
					<class 'ir.Const'> 138571680349920 {
					parent = 138571680349824
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680350112 {
			parent = 138571680349680
				children:
				'leq'
				<class 'ir.Var'> 138571680349632 {
				parent = 138571680350112
					symbol: 	auto int q
				}
				<class 'ir.Const'> 138571680348624 {
				parent = 138571680350112
					value: 	5
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680770848 {
		parent = 138571679814464
			children:
			<class 'ir.Var'> 138571680770416 {
			parent = 138571680770848
				symbol: 	global int sum
			}
			expr: 	<class 'ir.Var'> 138571680770416 {
			parent = 138571680770848
				symbol: 	global int sum
			}
		}
		<class 'ir.PrintStat'> 138571680771424 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680771328 {
			parent = 138571680771424
				value: 	88887
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680771328 {
			parent = 138571680771424
				value: 	88887
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 138571680772048 {
		parent = 138571679814464
			symbol: 	global int x
			expr: 	<class 'ir.Const'> 138571680771520 {
			parent = 138571680772048
				value: 	100
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.PrintStat'> 138571680771904 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680772000 {
			parent = 138571680771904
				value: 	99998
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680772000 {
			parent = 138571680771904
				value: 	99998
				symbol: 	None
			}
		}
		<class 'ir.ForStat'> 138571680305648 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680771280 {
			parent = 138571680305648
				children:
				<class 'ir.AssignStat'> 138571680770752 {
				parent = 138571680771280
					symbol: 	global int x
					expr: 	<class 'ir.BinExpr'> 138571680770992 {
					parent = 138571680770752
						children:
						'plus'
						<class 'ir.Var'> 138571680771184 {
						parent = 138571680770992
							symbol: 	global int x
						}
						<class 'ir.Var'> 138571680771088 {
						parent = 138571680770992
							symbol: 	global int r
						}
					}
					offset: 	None
				}
				<class 'ir.PrintStat'> 138571680770608 {
				parent = 138571680771280
					children:
					<class 'ir.Var'> 138571680770704 {
					parent = 138571680770608
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 138571680770704 {
					parent = 138571680770608
						symbol: 	global int x
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680305600 {
			parent = 138571680305648
				symbol: 	auto int r
				expr: 	<class 'ir.BinExpr'> 138571680305504 {
				parent = 138571680305600
					children:
					'plus'
					<class 'ir.Var'> 138571680305312 {
					parent = 138571680305504
						symbol: 	auto int r
					}
					<class 'ir.Const'> 138571680305408 {
					parent = 138571680305504
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680305216 {
			parent = 138571680305648
				children:
				'leq'
				<class 'ir.Var'> 138571680770464 {
				parent = 138571680305216
					symbol: 	auto int r
				}
				<class 'ir.Const'> 138571680771664 {
				parent = 138571680305216
					value: 	3
					symbol: 	None
				}
			}
		}
		<class 'ir.PrintStat'> 138571680305792 {
		parent = 138571679814464
			children:
			<class 'ir.Var'> 138571680305696 {
			parent = 138571680305792
				symbol: 	global int x
			}
			expr: 	<class 'ir.Var'> 138571680305696 {
			parent = 138571680305792
				symbol: 	global int x
			}
		}
		<class 'ir.PrintStat'> 138571680305984 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680305888 {
			parent = 138571680305984
				value: 	88888
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680305888 {
			parent = 138571680305984
				value: 	88888
				symbol: 	None
			}
		}
		<class 'ir.PrintStat'> 138571680306176 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680306080 {
			parent = 138571680306176
				value: 	999990
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680306080 {
			parent = 138571680306176
				value: 	999990
				symbol: 	None
			}
		}
		<class 'ir.AssignStat'> 138571680306368 {
		parent = 138571679814464
			symbol: 	global int sm_idx
			expr: 	<class 'ir.Const'> 138571680306272 {
			parent = 138571680306368
				value: 	0
				symbol: 	None
			}
			offset: 	None
		}
		<class 'ir.ForStat'> 138571680308144 {
		parent = 138571679814464
			body: 	<class 'ir.StatList'> 138571680306608 {
			parent = 138571680308144
				children:
				<class 'ir.AssignStat'> 138571680307568 {
				parent = 138571680306608
					symbol: 	global int[128] sm_dest_arr
					expr: 	<class 'ir.BinExpr'> 138571680307472 {
					parent = 138571680307568
						children:
						'plus'
						<class 'ir.ArrayElement'> 138571680307136 {
						parent = 138571680307472
							children:
							<class 'ir.BinExpr'> 138571680307232 {
							parent = 138571680307136
								children:
								'times'
								<class 'ir.Var'> 138571680306848 {
								parent = 138571680307232
									symbol: 	global int sm_idx
								}
								<class 'ir.Const'> 138571680307040 {
								parent = 138571680307232
									value: 	4
									symbol: 	None
								}
							}
							symbol: 	global int[128] sm_source_arr
							offset: 	<class 'ir.BinExpr'> 138571680307232 {
							parent = 138571680307136
								children:
								'times'
								<class 'ir.Var'> 138571680306848 {
								parent = 138571680307232
									symbol: 	global int sm_idx
								}
								<class 'ir.Const'> 138571680307040 {
								parent = 138571680307232
									value: 	4
									symbol: 	None
								}
							}
						}
						<class 'ir.Var'> 138571680307328 {
						parent = 138571680307472
							symbol: 	global int sm_idx
						}
					}
					offset: 	<class 'ir.BinExpr'> 138571680306944 {
					parent = 138571680307568
						children:
						'times'
						<class 'ir.Var'> 138571680306704 {
						parent = 138571680306944
							symbol: 	global int sm_idx
						}
						<class 'ir.Const'> 138571680306752 {
						parent = 138571680306944
							value: 	4
							symbol: 	None
						}
					}
				}
			}
			step: 	<class 'ir.AssignStat'> 138571680308096 {
			parent = 138571680308144
				symbol: 	auto int sm_idx
				expr: 	<class 'ir.BinExpr'> 138571680308000 {
				parent = 138571680308096
					children:
					'plus'
					<class 'ir.Var'> 138571680307808 {
					parent = 138571680308000
						symbol: 	auto int sm_idx
					}
					<class 'ir.Const'> 138571680307904 {
					parent = 138571680308000
						value: 	1
						symbol: 	None
					}
				}
				offset: 	None
			}
			cond: 	<class 'ir.BinExpr'> 138571680307712 {
			parent = 138571680308144
				children:
				'leq'
				<class 'ir.Var'> 138571680307616 {
				parent = 138571680307712
					symbol: 	auto int sm_idx
				}
				<class 'ir.Const'> 138571680306512 {
				parent = 138571680307712
					value: 	127
					symbol: 	None
				}
			}
		}
		<class 'ir.IfStat'> 138571680252928 {
		parent = 138571679814464
			thenpart: 	<class 'ir.StatList'> 138571680308480 {
			parent = 138571680252928
				children:
				<class 'ir.PrintStat'> 138571680308672 {
				parent = 138571680308480
					children:
					<class 'ir.Const'> 138571680308576 {
					parent = 138571680308672
						value: 	76543
						symbol: 	None
					}
					expr: 	<class 'ir.Const'> 138571680308576 {
					parent = 138571680308672
						value: 	76543
						symbol: 	None
					}
				}
				<class 'ir.PrintStat'> 138571680309104 {
				parent = 138571680308480
					children:
					<class 'ir.ArrayElement'> 138571680308912 {
					parent = 138571680309104
						children:
						<class 'ir.BinExpr'> 138571680309008 {
						parent = 138571680308912
							children:
							'times'
							<class 'ir.Const'> 138571680308768 {
							parent = 138571680309008
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 138571680308816 {
							parent = 138571680309008
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680309008 {
						parent = 138571680308912
							children:
							'times'
							<class 'ir.Const'> 138571680308768 {
							parent = 138571680309008
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 138571680308816 {
							parent = 138571680309008
								value: 	4
								symbol: 	None
							}
						}
					}
					expr: 	<class 'ir.ArrayElement'> 138571680308912 {
					parent = 138571680309104
						children:
						<class 'ir.BinExpr'> 138571680309008 {
						parent = 138571680308912
							children:
							'times'
							<class 'ir.Const'> 138571680308768 {
							parent = 138571680309008
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 138571680308816 {
							parent = 138571680309008
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680309008 {
						parent = 138571680308912
							children:
							'times'
							<class 'ir.Const'> 138571680308768 {
							parent = 138571680309008
								value: 	0
								symbol: 	None
							}
							<class 'ir.Const'> 138571680308816 {
							parent = 138571680309008
								value: 	4
								symbol: 	None
							}
						}
					}
				}
				<class 'ir.PrintStat'> 138571680252304 {
				parent = 138571680308480
					children:
					<class 'ir.ArrayElement'> 138571680252112 {
					parent = 138571680252304
						children:
						<class 'ir.BinExpr'> 138571680252208 {
						parent = 138571680252112
							children:
							'times'
							<class 'ir.Const'> 138571680251968 {
							parent = 138571680252208
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252016 {
							parent = 138571680252208
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680252208 {
						parent = 138571680252112
							children:
							'times'
							<class 'ir.Const'> 138571680251968 {
							parent = 138571680252208
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252016 {
							parent = 138571680252208
								value: 	4
								symbol: 	None
							}
						}
					}
					expr: 	<class 'ir.ArrayElement'> 138571680252112 {
					parent = 138571680252304
						children:
						<class 'ir.BinExpr'> 138571680252208 {
						parent = 138571680252112
							children:
							'times'
							<class 'ir.Const'> 138571680251968 {
							parent = 138571680252208
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252016 {
							parent = 138571680252208
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680252208 {
						parent = 138571680252112
							children:
							'times'
							<class 'ir.Const'> 138571680251968 {
							parent = 138571680252208
								value: 	64
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252016 {
							parent = 138571680252208
								value: 	4
								symbol: 	None
							}
						}
					}
				}
				<class 'ir.PrintStat'> 138571680252784 {
				parent = 138571680308480
					children:
					<class 'ir.ArrayElement'> 138571680252592 {
					parent = 138571680252784
						children:
						<class 'ir.BinExpr'> 138571680252688 {
						parent = 138571680252592
							children:
							'times'
							<class 'ir.Const'> 138571680252448 {
							parent = 138571680252688
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252496 {
							parent = 138571680252688
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680252688 {
						parent = 138571680252592
							children:
							'times'
							<class 'ir.Const'> 138571680252448 {
							parent = 138571680252688
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252496 {
							parent = 138571680252688
								value: 	4
								symbol: 	None
							}
						}
					}
					expr: 	<class 'ir.ArrayElement'> 138571680252592 {
					parent = 138571680252784
						children:
						<class 'ir.BinExpr'> 138571680252688 {
						parent = 138571680252592
							children:
							'times'
							<class 'ir.Const'> 138571680252448 {
							parent = 138571680252688
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252496 {
							parent = 138571680252688
								value: 	4
								symbol: 	None
							}
						}
						symbol: 	global int[128] sm_dest_arr
						offset: 	<class 'ir.BinExpr'> 138571680252688 {
						parent = 138571680252592
							children:
							'times'
							<class 'ir.Const'> 138571680252448 {
							parent = 138571680252688
								value: 	127
								symbol: 	None
							}
							<class 'ir.Const'> 138571680252496 {
							parent = 138571680252688
								value: 	4
								symbol: 	None
							}
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 138571680308384 {
			parent = 138571680252928
				children:
				'geq'
				<class 'ir.Const'> 138571680308192 {
				parent = 138571680308384
					value: 	127
					symbol: 	None
				}
				<class 'ir.Const'> 138571680308288 {
				parent = 138571680308384
					value: 	0
					symbol: 	None
				}
			}
			elsepart: 	None
		}
		<class 'ir.PrintStat'> 138571680253072 {
		parent = 138571679814464
			children:
			<class 'ir.Const'> 138571680252976 {
			parent = 138571680253072
				value: 	888880
				symbol: 	None
			}
			expr: 	<class 'ir.Const'> 138571680252976 {
			parent = 138571680253072
				value: 	888880
				symbol: 	None
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 138571681090576 {
	parent = 138571680253168
		children:
		<class 'ir.FunctionDef'> 138571679814368 {
		parent = 138571681090576
			body: 	<class 'ir.Block'> 138571680285696 {
			parent = 138571679814368
				body: 	<class 'ir.StatList'> 138571679813696 {
				parent = 138571680285696
					children:
					<class 'ir.AssignStat'> 138571679814032 {
					parent = 138571679813696
						symbol: 	auto int test
						expr: 	<class 'ir.Const'> 138571679813840 {
						parent = 138571679814032
							value: 	1234
							symbol: 	None
						}
						offset: 	None
					}
					<class 'ir.AssignStat'> 138571679814320 {
					parent = 138571679813696
						symbol: 	global int squ
						expr: 	<class 'ir.BinExpr'> 138571679814224 {
						parent = 138571679814320
							children:
							'times'
							<class 'ir.Var'> 138571679814080 {
							parent = 138571679814224
								symbol: 	global int x
							}
							<class 'ir.Var'> 138571679813744 {
							parent = 138571679814224
								symbol: 	global int x
							}
						}
						offset: 	None
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 138571680288624 {
				parent = 138571680285696
				}
			}
			symbol: 	auto function square
		}
	}
}

--- Navigating: Applying Lowering ---
StatList : new 138571680253456
Lowering <class 'ir.Const'> 138571679814560
StatList : new 138571680253360
Lowering <class 'ir.UnExpr'> 138571679814656
StatList : new 138571679814656
Lowering <class 'ir.AssignStat'> 138571679814752
StatList : new 138571680253408
Lowering <class 'ir.ReadStat'> 138571680285984
StatList : new 138571680285984
Lowering <class 'ir.AssignStat'> 138571679814848
StatList : new 138571680253936
Lowering <class 'ir.Var'> 138571679815520
StatList : new 138571680254224
Lowering <class 'ir.UnExpr'> 138571679815568
Cannot lower 138571680253888 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680253936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680253840
Lowering <class 'ir.UnExpr'> 138571679815568
StatList : new 138571680254272
Lowering <class 'ir.PrintStat'> 138571679815664
Cannot lower 138571679815376 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680254560
Lowering <class 'ir.Var'> 138571679814896
StatList : new 138571680254656
Lowering <class 'ir.Const'> 138571679814992
StatList : new 138571680254848
Lowering <class 'ir.BinExpr'> 138571679815088
StatList : new 138571680254944
Lowering <class 'ir.Var'> 138571679815712
StatList : new 138571680255136
Lowering <class 'ir.Var'> 138571679815712
StatList : new 138571680255232
Lowering <class 'ir.PrintStat'> 138571679815136
Cannot lower 138571679815808 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680255568
Lowering <class 'ir.IfStat'> 138571679815424
StatList : new 138571680255760
Lowering <class 'ir.Const'> 138571679815904
StatList : new 138571679815904
Lowering <class 'ir.AssignStat'> 138571679816000
Cannot lower 138571679816384 <class 'ir.CallExpr'> 'CallExpr' object has no attribute 'lower'
Lowering <class 'ir.CallStat'> 138571679816528
StatList : new 138571680092272
Lowering <class 'ir.Var'> 138571679816624
StatList : new 138571680092416
Lowering <class 'ir.Const'> 138571679816720
StatList : new 138571680092608
Lowering <class 'ir.BinExpr'> 138571679816816
StatList : new 138571679816816
Lowering <class 'ir.AssignStat'> 138571679816912
StatList : new 138571680092752
Lowering <class 'ir.Var'> 138571679816960
StatList : new 138571680092944
Lowering <class 'ir.Var'> 138571679816960
StatList : new 138571680093040
Lowering <class 'ir.PrintStat'> 138571679817056
Cannot lower 138571679816480 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680093232
Lowering <class 'ir.Var'> 138571679816048
StatList : new 138571680093328
Lowering <class 'ir.Const'> 138571679816144
StatList : new 138571680093520
Lowering <class 'ir.BinExpr'> 138571679816336
StatList : new 138571680093760
Lowering <class 'ir.WhileStat'> 138571679817152
StatList : new 138571680093952
Lowering <class 'ir.Const'> 138571679817200
StatList : new 138571679817200
Lowering <class 'ir.AssignStat'> 138571679817296
StatList : new 138571680094144
Lowering <class 'ir.Var'> 138571680275424
StatList : new 138571680094288
Lowering <class 'ir.Var'> 138571680275040
StatList : new 138571680094480
Lowering <class 'ir.Const'> 138571680275376
StatList : new 138571680094672
Lowering <class 'ir.BinExpr'> 138571680275520
StatList : new 138571680275472
Lowering <class 'ir.Const'> 138571680275232
StatList : new 138571680094912
Lowering <class 'ir.BinExpr'> 138571680275280
StatList : new 138571680095248
Lowering <class 'ir.AssignStat'> 138571680275184
StatList : new 138571680095488
Lowering <class 'ir.Var'> 138571680286896
StatList : new 138571680095824
Lowering <class 'ir.Const'> 138571680275760
StatList : new 138571680096016
Lowering <class 'ir.BinExpr'> 138571680275856
StatList : new 138571680275904
Lowering <class 'ir.Const'> 138571680275136
StatList : new 138571680243776
Lowering <class 'ir.BinExpr'> 138571680276048
Cannot lower 138571680095440 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680095488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680095824 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680095776 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680096016 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275856 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680275904 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680243968
Lowering <class 'ir.BinExpr'> 138571680276048
StatList : new 138571680244496
Lowering <class 'ir.ArrayElement'> 138571680275952
Cannot lower 138571680095440 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680095488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680095824 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680095776 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680096016 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275856 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680275904 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680096160 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680243776 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680095440 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680095488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680095824 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680095776 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680096016 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680275856 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680275904 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680243920 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680243968 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680244928
Lowering <class 'ir.ArrayElement'> 138571680275952
StatList : new 138571680245072
Lowering <class 'ir.PrintStat'> 138571680276144
StatList : new 138571680245312
Lowering <class 'ir.Var'> 138571680276288
StatList : new 138571680245504
Lowering <class 'ir.Const'> 138571680276384
StatList : new 138571680245696
Lowering <class 'ir.BinExpr'> 138571680274992
StatList : new 138571680274992
Lowering <class 'ir.AssignStat'> 138571680274032
Cannot lower 138571679817632 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680245792
Lowering <class 'ir.Var'> 138571679817344
StatList : new 138571680245936
Lowering <class 'ir.Const'> 138571679817440
StatList : new 138571680246128
Lowering <class 'ir.BinExpr'> 138571679817536
StatList : new 138571680246368
Lowering <class 'ir.WhileStat'> 138571680273984
StatList : new 138571680246560
Lowering <class 'ir.Const'> 138571680273888
StatList : new 138571680273888
Lowering <class 'ir.AssignStat'> 138571680273792
StatList : new 138571680246752
Lowering <class 'ir.Const'> 138571680273744
StatList : new 138571680273744
Lowering <class 'ir.AssignStat'> 138571680273552
StatList : new 138571680246944
Lowering <class 'ir.Var'> 138571680073184
StatList : new 138571680247232
Lowering <class 'ir.Const'> 138571680073808
StatList : new 138571680247424
Lowering <class 'ir.BinExpr'> 138571680073616
Cannot lower 138571680246896 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680246944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073760 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680247232 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680247616
Lowering <class 'ir.BinExpr'> 138571680073616
StatList : new 138571680235920
Lowering <class 'ir.ArrayElement'> 138571680073712
StatList : new 138571680236064
Lowering <class 'ir.Var'> 138571680072032
StatList : new 138571680236256
Lowering <class 'ir.Const'> 138571680072416
StatList : new 138571680236448
Lowering <class 'ir.BinExpr'> 138571680074096
StatList : new 138571680074144
Lowering <class 'ir.Var'> 138571680072272
StatList : new 138571680236544
Lowering <class 'ir.Const'> 138571680072512
StatList : new 138571680236832
Lowering <class 'ir.BinExpr'> 138571680074000
StatList : new 138571680237024
Lowering <class 'ir.BinExpr'> 138571680073904
StatList : new 138571680237312
Lowering <class 'ir.AssignStat'> 138571680073520
StatList : new 138571680237552
Lowering <class 'ir.Var'> 138571680287136
StatList : new 138571680237888
Lowering <class 'ir.Const'> 138571680073424
StatList : new 138571680238080
Lowering <class 'ir.BinExpr'> 138571680072992
StatList : new 138571680072944
Lowering <class 'ir.Var'> 138571680073328
StatList : new 138571680238176
Lowering <class 'ir.Const'> 138571680072896
StatList : new 138571680238464
Lowering <class 'ir.BinExpr'> 138571680072800
StatList : new 138571680238656
Lowering <class 'ir.BinExpr'> 138571680072656
Cannot lower 138571680237504 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680237552 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073376 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680237888 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680237840 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238080 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680072992 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680072944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073136 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680238176 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680238272 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680238752
Lowering <class 'ir.BinExpr'> 138571680072656
StatList : new 138571680239328
Lowering <class 'ir.ArrayElement'> 138571680073088
Cannot lower 138571680237504 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680237552 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073376 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680237888 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680237840 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238080 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680072992 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680072944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073136 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680238176 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680238272 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680238608 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238656 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680237504 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680237552 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073376 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680237888 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680237840 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238080 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680072992 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571680072944 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680073136 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571680238176 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680238272 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680237600 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571680238752 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680186576
Lowering <class 'ir.ArrayElement'> 138571680073088
StatList : new 138571680186720
Lowering <class 'ir.PrintStat'> 138571680072368
StatList : new 138571680186960
Lowering <class 'ir.Var'> 138571680072320
StatList : new 138571680187152
Lowering <class 'ir.Const'> 138571680072560
StatList : new 138571680187344
Lowering <class 'ir.BinExpr'> 138571680074240
StatList : new 138571680074240
Lowering <class 'ir.AssignStat'> 138571680074336
StatList : new 138571680187488
Lowering <class 'ir.Var'> 138571680074384
StatList : new 138571680187632
Lowering <class 'ir.Const'> 138571680074480
StatList : new 138571680187824
Lowering <class 'ir.BinExpr'> 138571680074576
StatList : new 138571680074576
Lowering <class 'ir.AssignStat'> 138571680074672
Cannot lower 138571680072128 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680187968
Lowering <class 'ir.Var'> 138571680272592
StatList : new 138571680188112
Lowering <class 'ir.Const'> 138571680071888
StatList : new 138571680188304
Lowering <class 'ir.BinExpr'> 138571680071792
StatList : new 138571680188544
Lowering <class 'ir.WhileStat'> 138571680074720
Cannot lower 138571680272784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680188736
Lowering <class 'ir.Var'> 138571680286080
StatList : new 138571680188832
Lowering <class 'ir.Const'> 138571680273072
StatList : new 138571680189024
Lowering <class 'ir.BinExpr'> 138571680272976
StatList : new 138571680189264
Lowering <class 'ir.WhileStat'> 138571680074768
StatList : new 138571680189456
Lowering <class 'ir.Var'> 138571680075488
StatList : new 138571680189648
Lowering <class 'ir.Var'> 138571680075488
StatList : new 138571680189792
Lowering <class 'ir.PrintStat'> 138571680075392
Cannot lower 138571680075056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680189984
Lowering <class 'ir.Var'> 138571680075248
StatList : new 138571680190080
Lowering <class 'ir.Const'> 138571680534096
StatList : new 138571680190272
Lowering <class 'ir.BinExpr'> 138571680534192
StatList : new 138571680534192
Lowering <class 'ir.AssignStat'> 138571680534288
StatList : new 138571680161856
Lowering <class 'ir.Var'> 138571680075632
StatList : new 138571680162000
Lowering <class 'ir.Const'> 138571680074960
StatList : new 138571680162192
Lowering <class 'ir.BinExpr'> 138571680075152
StatList : new 138571680162336
Lowering ForStat 138571680534336 into StatList
StatList : new 138571680162528
Lowering <class 'ir.ForStat'> 138571680534336
StatList : new 138571680162432
Lowering <class 'ir.Const'> 138571680534384
StatList : new 138571680534384
Lowering <class 'ir.AssignStat'> 138571680534480
StatList : new 138571680162816
Lowering <class 'ir.Const'> 138571680287232
StatList : new 138571680163008
Lowering <class 'ir.Const'> 138571680287232
StatList : new 138571680163152
Lowering <class 'ir.PrintStat'> 138571680533904
StatList : new 138571680163392
Lowering <class 'ir.Var'> 138571680533376
StatList : new 138571680163584
Lowering <class 'ir.Var'> 138571680533376
StatList : new 138571680163680
Lowering <class 'ir.PrintStat'> 138571680533280
Cannot lower 138571680533472 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680163872
Lowering <class 'ir.Var'> 138571680532944
StatList : new 138571680163968
Lowering <class 'ir.Const'> 138571680532848
StatList : new 138571680164160
Lowering <class 'ir.BinExpr'> 138571680532752
StatList : new 138571680532752
Lowering <class 'ir.AssignStat'> 138571680532656
StatList : new 138571680164304
Lowering <class 'ir.Var'> 138571680533136
StatList : new 138571680164496
Lowering <class 'ir.Const'> 138571680533568
StatList : new 138571680164688
Lowering <class 'ir.BinExpr'> 138571680533040
StatList : new 138571680238944
Lowering ForStat 138571680532608 into StatList
StatList : new 138571680239040
Lowering <class 'ir.ForStat'> 138571680532608
StatList : new 138571680239328
Lowering <class 'ir.Const'> 138571680532560
StatList : new 138571680238848
Lowering <class 'ir.Const'> 138571680532560
StatList : new 138571680237648
Lowering <class 'ir.PrintStat'> 138571680532464
StatList : new 138571680247424
Lowering <class 'ir.Const'> 138571680532368
StatList : new 138571680244448
Lowering <class 'ir.Const'> 138571680532368
StatList : new 138571680244496
Lowering <class 'ir.PrintStat'> 138571680532272
StatList : new 138571680244256
Lowering <class 'ir.Var'> 138571680531840
StatList : new 138571680243824
Lowering <class 'ir.Var'> 138571680531840
StatList : new 138571680095584
Lowering <class 'ir.PrintStat'> 138571680531744
Cannot lower 138571680531936 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680254944
Lowering <class 'ir.Var'> 138571680531408
StatList : new 138571680253984
Lowering <class 'ir.Const'> 138571680531312
StatList : new 138571679815088
Lowering <class 'ir.BinExpr'> 138571680531216
StatList : new 138571679815664
Lowering <class 'ir.AssignStat'> 138571680531120
StatList : new 138571679816576
Lowering <class 'ir.Var'> 138571680531600
StatList : new 138571680276192
Lowering <class 'ir.Const'> 138571680532032
StatList : new 138571680531168
Lowering <class 'ir.BinExpr'> 138571680531504
StatList : new 138571680531408
Lowering ForStat 138571680531072 into StatList
StatList : new 138571680532368
Lowering <class 'ir.ForStat'> 138571680531072
StatList : new 138571680531840
Lowering <class 'ir.Const'> 138571680531024
StatList : new 138571680532992
Lowering <class 'ir.Const'> 138571680531024
StatList : new 138571680533280
Lowering <class 'ir.PrintStat'> 138571680530928
StatList : new 138571680075392
Lowering <class 'ir.Const'> 138571680530832
StatList : new 138571680072848
Lowering <class 'ir.Const'> 138571680530832
StatList : new 138571680075728
Lowering <class 'ir.PrintStat'> 138571680530736
StatList : new 138571680164832
Lowering <class 'ir.Const'> 138571680432432
StatList : new 138571680163440
Lowering <class 'ir.Const'> 138571680432432
StatList : new 138571680162864
Lowering <class 'ir.PrintStat'> 138571680432192
StatList : new 138571680164976
Lowering <class 'ir.Var'> 138571680432528
StatList : new 138571680165120
Lowering <class 'ir.Var'> 138571680432528
StatList : new 138571680165216
Lowering <class 'ir.PrintStat'> 138571680432624
Cannot lower 138571680432240 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680165408
Lowering <class 'ir.Var'> 138571680432960
StatList : new 138571680165504
Lowering <class 'ir.Const'> 138571680433104
StatList : new 138571680165696
Lowering <class 'ir.BinExpr'> 138571680433200
StatList : new 138571680433200
Lowering <class 'ir.AssignStat'> 138571680433296
StatList : new 138571680149568
Lowering <class 'ir.Var'> 138571680432768
StatList : new 138571680149712
Lowering <class 'ir.Const'> 138571680530496
StatList : new 138571680149904
Lowering <class 'ir.BinExpr'> 138571680432864
StatList : new 138571680150048
Lowering ForStat 138571680433344 into StatList
StatList : new 138571680150240
Lowering <class 'ir.ForStat'> 138571680433344
StatList : new 138571680150144
Lowering <class 'ir.Const'> 138571680433392
StatList : new 138571680150528
Lowering <class 'ir.Const'> 138571680433392
StatList : new 138571680150624
Lowering <class 'ir.PrintStat'> 138571680433488
StatList : new 138571680150864
Lowering <class 'ir.Const'> 138571680433584
StatList : new 138571680151008
Lowering <class 'ir.Const'> 138571680433584
StatList : new 138571680151104
Lowering <class 'ir.PrintStat'> 138571680433680
StatList : new 138571680151344
Lowering <class 'ir.Var'> 138571680434160
StatList : new 138571680151536
Lowering <class 'ir.Var'> 138571680434160
StatList : new 138571680151632
Lowering <class 'ir.PrintStat'> 138571680436176
Cannot lower 138571680434064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680151824
Lowering <class 'ir.Var'> 138571680435840
StatList : new 138571680151920
Lowering <class 'ir.Const'> 138571680435744
StatList : new 138571680152112
Lowering <class 'ir.BinExpr'> 138571680435648
StatList : new 138571680435648
Lowering <class 'ir.AssignStat'> 138571680435552
StatList : new 138571680152256
Lowering <class 'ir.Var'> 138571680436032
StatList : new 138571680152448
Lowering <class 'ir.Const'> 138571680433920
StatList : new 138571680152640
Lowering <class 'ir.BinExpr'> 138571680435936
StatList : new 138571680152784
Lowering ForStat 138571680435504 into StatList
StatList : new 138571680152976
Lowering <class 'ir.ForStat'> 138571680435504
StatList : new 138571680152880
Lowering <class 'ir.Const'> 138571680435456
StatList : new 138571680153264
Lowering <class 'ir.Const'> 138571680435456
StatList : new 138571680153360
Lowering <class 'ir.PrintStat'> 138571680435360
StatList : new 138571680153552
Lowering <class 'ir.Const'> 138571680435264
StatList : new 138571680129232
Lowering <class 'ir.Const'> 138571680435264
StatList : new 138571680129328
Lowering <class 'ir.PrintStat'> 138571680435168
StatList : new 138571680129568
Lowering <class 'ir.Var'> 138571680434736
StatList : new 138571680129760
Lowering <class 'ir.Var'> 138571680434736
StatList : new 138571680129856
Lowering <class 'ir.PrintStat'> 138571680434640
Cannot lower 138571680434832 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680130048
Lowering <class 'ir.Var'> 138571680434304
StatList : new 138571680130144
Lowering <class 'ir.Const'> 138571680346176
StatList : new 138571680130336
Lowering <class 'ir.BinExpr'> 138571680346560
StatList : new 138571680346560
Lowering <class 'ir.AssignStat'> 138571680346464
StatList : new 138571680130480
Lowering <class 'ir.Var'> 138571680434496
StatList : new 138571680130672
Lowering <class 'ir.Const'> 138571680434928
StatList : new 138571680130864
Lowering <class 'ir.BinExpr'> 138571680434400
StatList : new 138571680131008
Lowering ForStat 138571680346416 into StatList
StatList : new 138571680131200
Lowering <class 'ir.ForStat'> 138571680346416
StatList : new 138571680131104
Lowering <class 'ir.Const'> 138571680346368
StatList : new 138571680131488
Lowering <class 'ir.Const'> 138571680346368
StatList : new 138571680131584
Lowering <class 'ir.PrintStat'> 138571680346224
StatList : new 138571680131824
Lowering <class 'ir.Const'> 138571680346656
StatList : new 138571680131968
Lowering <class 'ir.Const'> 138571680346656
StatList : new 138571680132064
Lowering <class 'ir.PrintStat'> 138571680346752
StatList : new 138571680132304
Lowering <class 'ir.Var'> 138571680347088
StatList : new 138571680132496
Lowering <class 'ir.Var'> 138571680347088
StatList : new 138571680132592
Lowering <class 'ir.PrintStat'> 138571680347280
Cannot lower 138571680347232 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571680132784
Lowering <class 'ir.Var'> 138571680347472
StatList : new 138571680132880
Lowering <class 'ir.Const'> 138571680347712
StatList : new 138571680133072
Lowering <class 'ir.BinExpr'> 138571680348000
StatList : new 138571680348000
Lowering <class 'ir.AssignStat'> 138571680348096
StatList : new 138571679801504
Lowering <class 'ir.Var'> 138571680347424
StatList : new 138571679801696
Lowering <class 'ir.Const'> 138571680346992
StatList : new 138571679801888
Lowering <class 'ir.BinExpr'> 138571680347568
StatList : new 138571679802032
Lowering ForStat 138571680348144 into StatList
StatList : new 138571679802224
Lowering <class 'ir.ForStat'> 138571680348144
StatList : new 138571679802128
Lowering <class 'ir.Const'> 138571680348192
StatList : new 138571679802512
Lowering <class 'ir.Const'> 138571680348192
StatList : new 138571679802608
Lowering <class 'ir.PrintStat'> 138571680347904
StatList : new 138571679802800
Lowering <class 'ir.Const'> 138571680347760
StatList : new 138571680347760
Lowering <class 'ir.AssignStat'> 138571680348288
StatList : new 138571679802992
Lowering <class 'ir.Const'> 138571680287952
StatList : new 138571679803184
Lowering <class 'ir.Const'> 138571680287952
StatList : new 138571679803280
Lowering <class 'ir.PrintStat'> 138571680348384
StatList : new 138571679803520
Lowering <class 'ir.Var'> 138571680348816
StatList : new 138571679803664
Lowering <class 'ir.Var'> 138571680348912
StatList : new 138571679803856
Lowering <class 'ir.BinExpr'> 138571680349008
StatList : new 138571680349008
Lowering <class 'ir.AssignStat'> 138571680349296
StatList : new 138571679804000
Lowering <class 'ir.Var'> 138571680349344
StatList : new 138571679804240
Lowering <class 'ir.Var'> 138571680349344
StatList : new 138571679804336
Lowering <class 'ir.PrintStat'> 138571680349440
StatList : new 138571679804576
Lowering <class 'ir.Var'> 138571680349248
StatList : new 138571679804720
Lowering <class 'ir.Var'> 138571680349248
StatList : new 138571679804816
Lowering <class 'ir.PrintStat'> 138571680349104
Cannot lower 138571680348720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679805008
Lowering <class 'ir.Var'> 138571680350016
StatList : new 138571679805104
Lowering <class 'ir.Const'> 138571680349920
StatList : new 138571679805296
Lowering <class 'ir.BinExpr'> 138571680349824
StatList : new 138571680349824
Lowering <class 'ir.AssignStat'> 138571680349728
StatList : new 138571679805552
Lowering <class 'ir.Var'> 138571680349632
StatList : new 138571679805696
Lowering <class 'ir.Const'> 138571680348624
StatList : new 138571679805888
Lowering <class 'ir.BinExpr'> 138571680350112
StatList : new 138571679806032
Lowering ForStat 138571680349680 into StatList
StatList : new 138571679806224
Lowering <class 'ir.ForStat'> 138571680349680
StatList : new 138571679806128
Lowering <class 'ir.Var'> 138571680770416
StatList : new 138571679806512
Lowering <class 'ir.Var'> 138571680770416
StatList : new 138571679806608
Lowering <class 'ir.PrintStat'> 138571680770848
StatList : new 138571679806848
Lowering <class 'ir.Const'> 138571680771328
StatList : new 138571679806992
Lowering <class 'ir.Const'> 138571680771328
StatList : new 138571679807088
Lowering <class 'ir.PrintStat'> 138571680771424
StatList : new 138571679807280
Lowering <class 'ir.Const'> 138571680771520
StatList : new 138571680771520
Lowering <class 'ir.AssignStat'> 138571680772048
StatList : new 138571679807472
Lowering <class 'ir.Const'> 138571680772000
StatList : new 138571679807664
Lowering <class 'ir.Const'> 138571680772000
StatList : new 138571679807760
Lowering <class 'ir.PrintStat'> 138571680771904
StatList : new 138571679808000
Lowering <class 'ir.Var'> 138571680771184
StatList : new 138571679808144
Lowering <class 'ir.Var'> 138571680771088
StatList : new 138571679808336
Lowering <class 'ir.BinExpr'> 138571680770992
StatList : new 138571680770992
Lowering <class 'ir.AssignStat'> 138571680770752
StatList : new 138571679808480
Lowering <class 'ir.Var'> 138571680770704
StatList : new 138571679808720
Lowering <class 'ir.Var'> 138571680770704
StatList : new 138571679808816
Lowering <class 'ir.PrintStat'> 138571680770608
Cannot lower 138571680771280 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679809008
Lowering <class 'ir.Var'> 138571680305312
StatList : new 138571679809104
Lowering <class 'ir.Const'> 138571680305408
StatList : new 138571679809296
Lowering <class 'ir.BinExpr'> 138571680305504
StatList : new 138571680305504
Lowering <class 'ir.AssignStat'> 138571680305600
StatList : new 138571679809440
Lowering <class 'ir.Var'> 138571680770464
StatList : new 138571679842464
Lowering <class 'ir.Const'> 138571680771664
StatList : new 138571679842656
Lowering <class 'ir.BinExpr'> 138571680305216
StatList : new 138571679842800
Lowering ForStat 138571680305648 into StatList
StatList : new 138571679842992
Lowering <class 'ir.ForStat'> 138571680305648
StatList : new 138571679842896
Lowering <class 'ir.Var'> 138571680305696
StatList : new 138571679843280
Lowering <class 'ir.Var'> 138571680305696
StatList : new 138571679843376
Lowering <class 'ir.PrintStat'> 138571680305792
StatList : new 138571679843616
Lowering <class 'ir.Const'> 138571680305888
StatList : new 138571679843760
Lowering <class 'ir.Const'> 138571680305888
StatList : new 138571679843856
Lowering <class 'ir.PrintStat'> 138571680305984
StatList : new 138571679844096
Lowering <class 'ir.Const'> 138571680306080
StatList : new 138571679844240
Lowering <class 'ir.Const'> 138571680306080
StatList : new 138571679844336
Lowering <class 'ir.PrintStat'> 138571680306176
StatList : new 138571679844528
Lowering <class 'ir.Const'> 138571680306272
StatList : new 138571680306272
Lowering <class 'ir.AssignStat'> 138571680306368
StatList : new 138571679844720
Lowering <class 'ir.Var'> 138571680306848
StatList : new 138571679845056
Lowering <class 'ir.Const'> 138571680307040
StatList : new 138571679845248
Lowering <class 'ir.BinExpr'> 138571680307232
Cannot lower 138571679844672 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 138571679844720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680307088 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679845056 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679845440
Lowering <class 'ir.BinExpr'> 138571680307232
StatList : new 138571679845968
Lowering <class 'ir.ArrayElement'> 138571680307136
StatList : new 138571679846112
Lowering <class 'ir.Var'> 138571680307328
StatList : new 138571679846304
Lowering <class 'ir.BinExpr'> 138571680307472
StatList : new 138571679866992
Lowering <class 'ir.Var'> 138571680306704
StatList : new 138571679867136
Lowering <class 'ir.Const'> 138571680306752
StatList : new 138571679867328
Lowering <class 'ir.BinExpr'> 138571680306944
StatList : new 138571679867664
Lowering <class 'ir.AssignStat'> 138571680307568
Cannot lower 138571680306608 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679867904
Lowering <class 'ir.Var'> 138571680307808
StatList : new 138571679868048
Lowering <class 'ir.Const'> 138571680307904
StatList : new 138571679868240
Lowering <class 'ir.BinExpr'> 138571680308000
StatList : new 138571680308000
Lowering <class 'ir.AssignStat'> 138571680308096
StatList : new 138571679868384
Lowering <class 'ir.Var'> 138571680307616
StatList : new 138571679868576
Lowering <class 'ir.Const'> 138571680306512
StatList : new 138571679868768
Lowering <class 'ir.BinExpr'> 138571680307712
StatList : new 138571679868912
Lowering ForStat 138571680308144 into StatList
StatList : new 138571679869104
Lowering <class 'ir.ForStat'> 138571680308144
StatList : new 138571679869008
Lowering <class 'ir.Const'> 138571680308576
StatList : new 138571679869392
Lowering <class 'ir.Const'> 138571680308576
StatList : new 138571679869536
Lowering <class 'ir.PrintStat'> 138571680308672
StatList : new 138571679869776
Lowering <class 'ir.Const'> 138571680308768
StatList : new 138571679869968
Lowering <class 'ir.Const'> 138571680308816
StatList : new 138571679870160
Lowering <class 'ir.BinExpr'> 138571680309008
Cannot lower 138571679869728 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869776 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680308864 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869968 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679870352
Lowering <class 'ir.BinExpr'> 138571680309008
StatList : new 138571679870880
Lowering <class 'ir.ArrayElement'> 138571680308912
Cannot lower 138571679869728 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869776 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680308864 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869968 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679869920 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679870160 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679869728 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869776 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680308864 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679869968 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679870304 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679870352 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679891856
Lowering <class 'ir.ArrayElement'> 138571680308912
StatList : new 138571679892000
Lowering <class 'ir.PrintStat'> 138571680309104
StatList : new 138571679892240
Lowering <class 'ir.Const'> 138571680251968
StatList : new 138571679892528
Lowering <class 'ir.Const'> 138571680252016
StatList : new 138571679892720
Lowering <class 'ir.BinExpr'> 138571680252208
Cannot lower 138571679892192 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892240 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679892912
Lowering <class 'ir.BinExpr'> 138571680252208
StatList : new 138571679893440
Lowering <class 'ir.ArrayElement'> 138571680252112
Cannot lower 138571679892192 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892240 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679892480 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679892720 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679892192 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892240 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252064 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679892528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679892864 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679892912 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679893872
Lowering <class 'ir.ArrayElement'> 138571680252112
StatList : new 138571679894112
Lowering <class 'ir.PrintStat'> 138571680252304
StatList : new 138571679894304
Lowering <class 'ir.Const'> 138571680252448
StatList : new 138571679894592
Lowering <class 'ir.Const'> 138571680252496
StatList : new 138571679894784
Lowering <class 'ir.BinExpr'> 138571680252688
Cannot lower 138571679894256 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252544 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894592 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679894976
Lowering <class 'ir.BinExpr'> 138571680252688
StatList : new 138571679895504
Lowering <class 'ir.ArrayElement'> 138571680252592
Cannot lower 138571679894256 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252544 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894592 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679894544 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679894784 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679894256 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894304 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680252544 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 138571679894592 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571679894928 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 138571679894976 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679904192
Lowering <class 'ir.ArrayElement'> 138571680252592
StatList : new 138571679904336
Lowering <class 'ir.PrintStat'> 138571680252784
Cannot lower 138571680308480 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679904576
Lowering <class 'ir.Const'> 138571680308192
StatList : new 138571679904720
Lowering <class 'ir.Const'> 138571680308288
StatList : new 138571679904912
Lowering <class 'ir.BinExpr'> 138571680308384
StatList : new 138571679905008
Lowering <class 'ir.IfStat'> 138571680252928
StatList : new 138571679905200
Lowering <class 'ir.Const'> 138571680252976
StatList : new 138571679905392
Lowering <class 'ir.Const'> 138571680252976
StatList : new 138571679905488
Lowering <class 'ir.PrintStat'> 138571680253072
Cannot lower 138571679814464 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 138571679905728
Lowering <class 'ir.Const'> 138571679813840
StatList : new 138571679813840
Lowering <class 'ir.AssignStat'> 138571679814032
StatList : new 138571679905920
Lowering <class 'ir.Var'> 138571679814080
StatList : new 138571679906112
Lowering <class 'ir.Var'> 138571679813744
StatList : new 138571679906304
Lowering <class 'ir.BinExpr'> 138571679814224
StatList : new 138571679814224
Lowering <class 'ir.AssignStat'> 138571679814320
Cannot lower 138571679813696 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 138571680288624 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
Cannot lower 138571680285696 <class 'ir.Block'> 'Block' object has no attribute 'lower'
Cannot lower 138571679814368 <class 'ir.FunctionDef'> 'FunctionDef' object has no attribute 'lower'
Cannot lower 138571681090576 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
Cannot lower 138571680253168 <class 'ir.Block'> 'Block' object has no attribute 'lower'

--- IR Tree After Lowering ---
<class 'ir.Block'> 138571680253168 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 138571679814464 {
	parent = 138571680253168
		children:
		<class 'ir.StatList'> 138571679814656 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680253360 {
			parent = 138571679814656
				children:
				<class 'ir.StatList'> 138571680253456 {
				parent = 138571680253360
					children:
					reg int t0 <- 1
				}
				reg int t1 <- minus reg int t0
			}
			global int x <- reg int t1
		}
		<class 'ir.StatList'> 138571680285984 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680253408 {
			parent = 138571680285984
				children:
				read reg int t2
			}
			global int x <- reg int t2
		}
		<class 'ir.StatList'> 138571680255568 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680254848 {
			parent = 138571680255568
				children:
				<class 'ir.StatList'> 138571680254560 {
				parent = 138571680254848
					children:
					reg int t6 <- global int x
				}
				<class 'ir.StatList'> 138571680254656 {
				parent = 138571680254848
					children:
					reg int t7 <- 100
				}
				reg int32_t t8 <- reg int t6 gtr reg int t7
			}
			branch on reg int32_t t8 to auto label label2
			<class 'ir.StatList'> 138571679815808 {
			parent = 138571680255568
				children:
				<class 'ir.StatList'> 138571680255232 {
				parent = 138571679815808
					children:
					<class 'ir.StatList'> 138571680255136 {
					parent = 138571680255232
						children:
						reg int t10 <- global int x
					}
					print reg int t10
				}
			}
			branch  to auto label label1
			label2: <class 'ir.StatList'> 138571679815376 {
			parent = 138571680255568
				children:
				<class 'ir.StatList'> 138571680254272 {
				parent = 138571679815376
					children:
					<class 'ir.StatList'> 138571680253840 {
					parent = 138571680254272
						children:
						<class 'ir.StatList'> 138571680253936 {
						parent = 138571680253840
							children:
							reg int t3 <- global int x
						}
						reg int t5 <- minus reg int t3
					}
					print reg int t5
				}
			}
			label1: <class 'ir.EmptyStat'> 138571679815712 {
			parent = 138571680255568
			}
		}
		<class 'ir.StatList'> 138571679815904 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680255760 {
			parent = 138571679815904
				children:
				reg int t11 <- 1
			}
			global int x <- reg int t11
		}
		<class 'ir.StatList'> 138571680093760 {
		parent = 138571679814464
			children:
			label3: <class 'ir.StatList'> 138571680093520 {
			parent = 138571680093760
				children:
				<class 'ir.StatList'> 138571680093232 {
				parent = 138571680093520
					children:
					reg int t17 <- global int x
				}
				<class 'ir.StatList'> 138571680093328 {
				parent = 138571680093520
					children:
					reg int t18 <- 10
				}
				reg int32_t t19 <- reg int t17 leq reg int t18
			}
			branch on not reg int32_t t19 to auto label label4
			<class 'ir.StatList'> 138571679816480 {
			parent = 138571680093760
				children:
				call  to auto function square
				<class 'ir.StatList'> 138571679816816 {
				parent = 138571679816480
					children:
					<class 'ir.StatList'> 138571680092608 {
					parent = 138571679816816
						children:
						<class 'ir.StatList'> 138571680092272 {
						parent = 138571680092608
							children:
							reg int t12 <- global int x
						}
						<class 'ir.StatList'> 138571680092416 {
						parent = 138571680092608
							children:
							reg int t13 <- 1
						}
						reg int32_t t14 <- reg int t12 plus reg int t13
					}
					global int x <- reg int32_t t14
				}
				<class 'ir.StatList'> 138571680093040 {
				parent = 138571679816480
					children:
					<class 'ir.StatList'> 138571680092944 {
					parent = 138571680093040
						children:
						reg int t16 <- global int squ
					}
					print reg int t16
				}
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 138571679816144 {
			parent = 138571680093760
			}
		}
		<class 'ir.StatList'> 138571679817200 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680093952 {
			parent = 138571679817200
				children:
				reg int t20 <- 101
			}
			global int x <- reg int t20
		}
		<class 'ir.StatList'> 138571680246368 {
		parent = 138571679814464
			children:
			label5: <class 'ir.StatList'> 138571680246128 {
			parent = 138571680246368
				children:
				<class 'ir.StatList'> 138571680245792 {
				parent = 138571680246128
					children:
					reg int t44 <- global int x
				}
				<class 'ir.StatList'> 138571680245936 {
				parent = 138571680246128
					children:
					reg int t45 <- 105
				}
				reg int32_t t46 <- reg int t44 leq reg int t45
			}
			branch on not reg int32_t t46 to auto label label6
			<class 'ir.StatList'> 138571679817632 {
			parent = 138571680246368
				children:
				<class 'ir.StatList'> 138571680095248 {
				parent = 138571679817632
					children:
					<class 'ir.StatList'> 138571680094144 {
					parent = 138571680095248
						children:
						reg int t21 <- global int x
					}
					<class 'ir.StatList'> 138571680094912 {
					parent = 138571680095248
						children:
						<class 'ir.StatList'> 138571680094672 {
						parent = 138571680094912
							children:
							<class 'ir.StatList'> 138571680094288 {
							parent = 138571680094672
								children:
								reg int t22 <- global int x
							}
							<class 'ir.StatList'> 138571680094480 {
							parent = 138571680094672
								children:
								reg int t23 <- 100
							}
							reg int32_t t24 <- reg int t22 minus reg int t23
						}
						<class 'ir.StatList'> 138571680275472 {
						parent = 138571680094912
							children:
							reg int t25 <- 1
						}
						reg int32_t t26 <- reg int32_t t24 times reg int t25
					}
					reg &char t27 <- &(global char[5] arr)
					reg &char t28 <- reg &char t27 plus reg int32_t t26
					[reg &char t28] <- reg int t21
				}
				<class 'ir.StatList'> 138571680245072 {
				parent = 138571679817632
					children:
					<class 'ir.StatList'> 138571680244928 {
					parent = 138571680245072
						children:
						<class 'ir.StatList'> 138571680243968 {
						parent = 138571680244928
							children:
							<class 'ir.StatList'> 138571680096016 {
							parent = 138571680243968
								children:
								<class 'ir.StatList'> 138571680095488 {
								parent = 138571680096016
									children:
									reg int t29 <- global int x
								}
								<class 'ir.StatList'> 138571680095824 {
								parent = 138571680096016
									children:
									reg int t30 <- 100
								}
								reg int32_t t31 <- reg int t29 minus reg int t30
							}
							<class 'ir.StatList'> 138571680275904 {
							parent = 138571680243968
								children:
								reg int t32 <- 1
							}
							reg int32_t t34 <- reg int32_t t31 times reg int t32
						}
						reg &char t39 <- &(global char[5] arr)
						reg &char t40 <- reg &char t39 plus reg int32_t t34
						reg char t38 <- [reg &char t40]
					}
					print reg char t38
				}
				<class 'ir.StatList'> 138571680274992 {
				parent = 138571679817632
					children:
					<class 'ir.StatList'> 138571680245696 {
					parent = 138571680274992
						children:
						<class 'ir.StatList'> 138571680245312 {
						parent = 138571680245696
							children:
							reg int t41 <- global int x
						}
						<class 'ir.StatList'> 138571680245504 {
						parent = 138571680245696
							children:
							reg int t42 <- 1
						}
						reg int32_t t43 <- reg int t41 plus reg int t42
					}
					global int x <- reg int32_t t43
				}
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 138571679817440 {
			parent = 138571680246368
			}
		}
		<class 'ir.StatList'> 138571680273888 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680246560 {
			parent = 138571680273888
				children:
				reg int t47 <- 1
			}
			global int x <- reg int t47
		}
		<class 'ir.StatList'> 138571680273744 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680246752 {
			parent = 138571680273744
				children:
				reg int t48 <- 1
			}
			global int y <- reg int t48
		}
		<class 'ir.StatList'> 138571680189264 {
		parent = 138571679814464
			children:
			label9: <class 'ir.StatList'> 138571680189024 {
			parent = 138571680189264
				children:
				<class 'ir.StatList'> 138571680188736 {
				parent = 138571680189024
					children:
					reg int t88 <- global int x
				}
				<class 'ir.StatList'> 138571680188832 {
				parent = 138571680189024
					children:
					reg int t89 <- 5
				}
				reg int32_t t90 <- reg int t88 leq reg int t89
			}
			branch on not reg int32_t t90 to auto label label10
			<class 'ir.StatList'> 138571680272784 {
			parent = 138571680189264
				children:
				<class 'ir.StatList'> 138571680188544 {
				parent = 138571680272784
					children:
					label7: <class 'ir.StatList'> 138571680188304 {
					parent = 138571680188544
						children:
						<class 'ir.StatList'> 138571680187968 {
						parent = 138571680188304
							children:
							reg int t85 <- global int y
						}
						<class 'ir.StatList'> 138571680188112 {
						parent = 138571680188304
							children:
							reg int t86 <- 5
						}
						reg int32_t t87 <- reg int t85 leq reg int t86
					}
					branch on not reg int32_t t87 to auto label label8
					<class 'ir.StatList'> 138571680072128 {
					parent = 138571680188544
						children:
						<class 'ir.StatList'> 138571680237312 {
						parent = 138571680072128
							children:
							<class 'ir.StatList'> 138571680235920 {
							parent = 138571680237312
								children:
								<class 'ir.StatList'> 138571680247616 {
								parent = 138571680235920
									children:
									<class 'ir.StatList'> 138571680246944 {
									parent = 138571680247616
										children:
										reg int t49 <- global int x
									}
									<class 'ir.StatList'> 138571680247232 {
									parent = 138571680247616
										children:
										reg int t50 <- 1
									}
									reg int32_t t52 <- reg int t49 times reg int t50
								}
								reg &char t54 <- &(global char[5] arr)
								reg &char t55 <- reg &char t54 plus reg int32_t t52
								reg char t53 <- [reg &char t55]
							}
							<class 'ir.StatList'> 138571680237024 {
							parent = 138571680237312
								children:
								<class 'ir.StatList'> 138571680236448 {
								parent = 138571680237024
									children:
									<class 'ir.StatList'> 138571680236064 {
									parent = 138571680236448
										children:
										reg int t56 <- global int x
									}
									<class 'ir.StatList'> 138571680236256 {
									parent = 138571680236448
										children:
										reg int t57 <- 10
									}
									reg int32_t t58 <- reg int t56 times reg int t57
								}
								<class 'ir.StatList'> 138571680236832 {
								parent = 138571680237024
									children:
									<class 'ir.StatList'> 138571680074144 {
									parent = 138571680236832
										children:
										reg int t59 <- global int y
									}
									<class 'ir.StatList'> 138571680236544 {
									parent = 138571680236832
										children:
										reg int t60 <- 2
									}
									reg int32_t t61 <- reg int t59 times reg int t60
								}
								reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
							}
							reg &short t63 <- &(global short[5, 5] multid)
							reg &short t64 <- reg &short t63 plus reg int32_t t62
							[reg &short t64] <- reg char t53
						}
						<class 'ir.StatList'> 138571680186720 {
						parent = 138571680072128
							children:
							<class 'ir.StatList'> 138571680186576 {
							parent = 138571680186720
								children:
								<class 'ir.StatList'> 138571680238752 {
								parent = 138571680186576
									children:
									<class 'ir.StatList'> 138571680238080 {
									parent = 138571680238752
										children:
										<class 'ir.StatList'> 138571680237552 {
										parent = 138571680238080
											children:
											reg int t65 <- global int x
										}
										<class 'ir.StatList'> 138571680237888 {
										parent = 138571680238080
											children:
											reg int t66 <- 10
										}
										reg int32_t t67 <- reg int t65 times reg int t66
									}
									<class 'ir.StatList'> 138571680238464 {
									parent = 138571680238752
										children:
										<class 'ir.StatList'> 138571680072944 {
										parent = 138571680238464
											children:
											reg int t68 <- global int y
										}
										<class 'ir.StatList'> 138571680238176 {
										parent = 138571680238464
											children:
											reg int t69 <- 2
										}
										reg int32_t t70 <- reg int t68 times reg int t69
									}
									reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
								}
								reg &short t77 <- &(global short[5, 5] multid)
								reg &short t78 <- reg &short t77 plus reg int32_t t72
								reg short t76 <- [reg &short t78]
							}
							print reg short t76
						}
						<class 'ir.StatList'> 138571680074240 {
						parent = 138571680072128
							children:
							<class 'ir.StatList'> 138571680187344 {
							parent = 138571680074240
								children:
								<class 'ir.StatList'> 138571680186960 {
								parent = 138571680187344
									children:
									reg int t79 <- global int x
								}
								<class 'ir.StatList'> 138571680187152 {
								parent = 138571680187344
									children:
									reg int t80 <- 1
								}
								reg int32_t t81 <- reg int t79 plus reg int t80
							}
							global int x <- reg int32_t t81
						}
						<class 'ir.StatList'> 138571680074576 {
						parent = 138571680072128
							children:
							<class 'ir.StatList'> 138571680187824 {
							parent = 138571680074576
								children:
								<class 'ir.StatList'> 138571680187488 {
								parent = 138571680187824
									children:
									reg int t82 <- global int y
								}
								<class 'ir.StatList'> 138571680187632 {
								parent = 138571680187824
									children:
									reg int t83 <- 1
								}
								reg int32_t t84 <- reg int t82 plus reg int t83
							}
							global int y <- reg int32_t t84
						}
					}
					branch  to auto label label7
					label8: <class 'ir.EmptyStat'> 138571680071888 {
					parent = 138571680188544
					}
				}
			}
			branch  to auto label label9
			label10: <class 'ir.EmptyStat'> 138571680273072 {
			parent = 138571680189264
			}
		}
		<class 'ir.StatList'> 138571680162528 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680075680 {
			parent = 138571680162528
				symbol: 	auto int a
				expr: 	<class 'ir.Const'> 138571680074864 {
				parent = 138571680075680
					value: 	10
					symbol: 	None
				}
				offset: 	None
			}
			label11: <class 'ir.StatList'> 138571680162192 {
			parent = 138571680162528
				children:
				<class 'ir.StatList'> 138571680161856 {
				parent = 138571680162192
					children:
					reg int t96 <- auto int a
				}
				<class 'ir.StatList'> 138571680162000 {
				parent = 138571680162192
					children:
					reg int t97 <- 20
				}
				reg int32_t t98 <- reg int t96 leq reg int t97
			}
			branch on not reg int32_t t98 to auto label label13
			<class 'ir.StatList'> 138571680189792 {
			parent = 138571680162528
				children:
				<class 'ir.StatList'> 138571680189648 {
				parent = 138571680189792
					children:
					reg int t92 <- auto int a
				}
				print reg int t92
			}
			<class 'ir.StatList'> 138571680190272 {
			parent = 138571680162528
				children:
				<class 'ir.StatList'> 138571680189984 {
				parent = 138571680190272
					children:
					reg int t93 <- auto int a
				}
				<class 'ir.StatList'> 138571680190080 {
				parent = 138571680190272
					children:
					reg int t94 <- 1
				}
				reg int32_t t95 <- reg int t93 plus reg int t94
			}
			auto int a <- reg int32_t t95
			branch  to auto label label11
			label13: <class 'ir.EmptyStat'> 138571680075104 {
			parent = 138571680162528
			}
		}
		<class 'ir.StatList'> 138571680534384 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680162432 {
			parent = 138571680534384
				children:
				reg int t99 <- 10
			}
			global int i <- reg int t99
		}
		<class 'ir.StatList'> 138571680163152 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680163008 {
			parent = 138571680163152
				children:
				reg int t101 <- 99991
			}
			print reg int t101
		}
		<class 'ir.StatList'> 138571680239040 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680533184 {
			parent = 138571680239040
				symbol: 	auto int i
				expr: 	<class 'ir.Const'> 138571680533664 {
				parent = 138571680533184
					value: 	10
					symbol: 	None
				}
				offset: 	None
			}
			label14: <class 'ir.StatList'> 138571680164688 {
			parent = 138571680239040
				children:
				<class 'ir.StatList'> 138571680164304 {
				parent = 138571680164688
					children:
					reg int t107 <- auto int i
				}
				<class 'ir.StatList'> 138571680164496 {
				parent = 138571680164688
					children:
					reg int t108 <- 15
				}
				reg int32_t t109 <- reg int t107 leq reg int t108
			}
			branch on not reg int32_t t109 to auto label label16
			<class 'ir.StatList'> 138571680163680 {
			parent = 138571680239040
				children:
				<class 'ir.StatList'> 138571680163584 {
				parent = 138571680163680
					children:
					reg int t103 <- global int i
				}
				print reg int t103
			}
			<class 'ir.StatList'> 138571680164160 {
			parent = 138571680239040
				children:
				<class 'ir.StatList'> 138571680163872 {
				parent = 138571680164160
					children:
					reg int t104 <- auto int i
				}
				<class 'ir.StatList'> 138571680163968 {
				parent = 138571680164160
					children:
					reg int t105 <- 1
				}
				reg int32_t t106 <- reg int t104 plus reg int t105
			}
			auto int i <- reg int32_t t106
			branch  to auto label label14
			label16: <class 'ir.EmptyStat'> 138571680189552 {
			parent = 138571680239040
			}
		}
		<class 'ir.StatList'> 138571680237648 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680238848 {
			parent = 138571680237648
				children:
				reg int t111 <- 88881
			}
			print reg int t111
		}
		<class 'ir.StatList'> 138571680244496 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680244448 {
			parent = 138571680244496
				children:
				reg int t113 <- 99992
			}
			print reg int t113
		}
		<class 'ir.StatList'> 138571680532368 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680531648 {
			parent = 138571680532368
				symbol: 	auto int j
				expr: 	<class 'ir.Const'> 138571680532128 {
				parent = 138571680531648
					value: 	5
					symbol: 	None
				}
				offset: 	None
			}
			label17: <class 'ir.StatList'> 138571680531168 {
			parent = 138571680532368
				children:
				<class 'ir.StatList'> 138571679816576 {
				parent = 138571680531168
					children:
					reg int t119 <- auto int j
				}
				<class 'ir.StatList'> 138571680276192 {
				parent = 138571680531168
					children:
					reg int t120 <- 5
				}
				reg int32_t t121 <- reg int t119 leq reg int t120
			}
			branch on not reg int32_t t121 to auto label label19
			<class 'ir.StatList'> 138571680095584 {
			parent = 138571680532368
				children:
				<class 'ir.StatList'> 138571680243824 {
				parent = 138571680095584
					children:
					reg int t115 <- global int j
				}
				print reg int t115
			}
			<class 'ir.StatList'> 138571679815088 {
			parent = 138571680532368
				children:
				<class 'ir.StatList'> 138571680254944 {
				parent = 138571679815088
					children:
					reg int t116 <- auto int j
				}
				<class 'ir.StatList'> 138571680253984 {
				parent = 138571679815088
					children:
					reg int t117 <- 1
				}
				reg int32_t t118 <- reg int t116 plus reg int t117
			}
			auto int j <- reg int32_t t118
			branch  to auto label label17
			label19: <class 'ir.EmptyStat'> 138571680531984 {
			parent = 138571680532368
			}
		}
		<class 'ir.StatList'> 138571680533280 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680532992 {
			parent = 138571680533280
				children:
				reg int t123 <- 88882
			}
			print reg int t123
		}
		<class 'ir.StatList'> 138571680075728 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680072848 {
			parent = 138571680075728
				children:
				reg int t125 <- 99993
			}
			print reg int t125
		}
		<class 'ir.StatList'> 138571680150240 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680432720 {
			parent = 138571680150240
				symbol: 	auto int k
				expr: 	<class 'ir.Const'> 138571680530592 {
				parent = 138571680432720
					value: 	10
					symbol: 	None
				}
				offset: 	None
			}
			label20: <class 'ir.StatList'> 138571680149904 {
			parent = 138571680150240
				children:
				<class 'ir.StatList'> 138571680149568 {
				parent = 138571680149904
					children:
					reg int t133 <- auto int k
				}
				<class 'ir.StatList'> 138571680149712 {
				parent = 138571680149904
					children:
					reg int t134 <- 5
				}
				reg int32_t t135 <- reg int t133 leq reg int t134
			}
			branch on not reg int32_t t135 to auto label label22
			<class 'ir.StatList'> 138571680162864 {
			parent = 138571680150240
				children:
				<class 'ir.StatList'> 138571680163440 {
				parent = 138571680162864
					children:
					reg int t127 <- 77777
				}
				print reg int t127
			}
			<class 'ir.StatList'> 138571680165216 {
			parent = 138571680150240
				children:
				<class 'ir.StatList'> 138571680165120 {
				parent = 138571680165216
					children:
					reg int t129 <- global int k
				}
				print reg int t129
			}
			<class 'ir.StatList'> 138571680165696 {
			parent = 138571680150240
				children:
				<class 'ir.StatList'> 138571680165408 {
				parent = 138571680165696
					children:
					reg int t130 <- auto int k
				}
				<class 'ir.StatList'> 138571680165504 {
				parent = 138571680165696
					children:
					reg int t131 <- 1
				}
				reg int32_t t132 <- reg int t130 plus reg int t131
			}
			auto int k <- reg int32_t t132
			branch  to auto label label20
			label22: <class 'ir.EmptyStat'> 138571680432336 {
			parent = 138571680150240
			}
		}
		<class 'ir.StatList'> 138571680150624 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680150528 {
			parent = 138571680150624
				children:
				reg int t137 <- 88883
			}
			print reg int t137
		}
		<class 'ir.StatList'> 138571680151104 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680151008 {
			parent = 138571680151104
				children:
				reg int t139 <- 99994
			}
			print reg int t139
		}
		<class 'ir.StatList'> 138571680152976 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680436080 {
			parent = 138571680152976
				symbol: 	auto int m
				expr: 	<class 'ir.Const'> 138571680433824 {
				parent = 138571680436080
					value: 	1
					symbol: 	None
				}
				offset: 	None
			}
			label23: <class 'ir.StatList'> 138571680152640 {
			parent = 138571680152976
				children:
				<class 'ir.StatList'> 138571680152256 {
				parent = 138571680152640
					children:
					reg int t145 <- auto int m
				}
				<class 'ir.StatList'> 138571680152448 {
				parent = 138571680152640
					children:
					reg int t146 <- 6
				}
				reg int32_t t147 <- reg int t145 leq reg int t146
			}
			branch on not reg int32_t t147 to auto label label25
			<class 'ir.StatList'> 138571680151632 {
			parent = 138571680152976
				children:
				<class 'ir.StatList'> 138571680151536 {
				parent = 138571680151632
					children:
					reg int t141 <- global int m
				}
				print reg int t141
			}
			<class 'ir.StatList'> 138571680152112 {
			parent = 138571680152976
				children:
				<class 'ir.StatList'> 138571680151824 {
				parent = 138571680152112
					children:
					reg int t142 <- auto int m
				}
				<class 'ir.StatList'> 138571680151920 {
				parent = 138571680152112
					children:
					reg int t143 <- 1
				}
				reg int32_t t144 <- reg int t142 plus reg int t143
			}
			auto int m <- reg int32_t t144
			branch  to auto label label23
			label25: <class 'ir.EmptyStat'> 138571680434016 {
			parent = 138571680152976
			}
		}
		<class 'ir.StatList'> 138571680153360 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680153264 {
			parent = 138571680153360
				children:
				reg int t149 <- 88884
			}
			print reg int t149
		}
		<class 'ir.StatList'> 138571680129328 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680129232 {
			parent = 138571680129328
				children:
				reg int t151 <- 99995
			}
			print reg int t151
		}
		<class 'ir.StatList'> 138571680131200 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680434544 {
			parent = 138571680131200
				symbol: 	auto int n
				expr: 	<class 'ir.Const'> 138571680435024 {
				parent = 138571680434544
					value: 	1
					symbol: 	None
				}
				offset: 	None
			}
			label26: <class 'ir.StatList'> 138571680130864 {
			parent = 138571680131200
				children:
				<class 'ir.StatList'> 138571680130480 {
				parent = 138571680130864
					children:
					reg int t157 <- auto int n
				}
				<class 'ir.StatList'> 138571680130672 {
				parent = 138571680130864
					children:
					reg int t158 <- 7
				}
				reg int32_t t159 <- reg int t157 leq reg int t158
			}
			branch on not reg int32_t t159 to auto label label28
			<class 'ir.StatList'> 138571680129856 {
			parent = 138571680131200
				children:
				<class 'ir.StatList'> 138571680129760 {
				parent = 138571680129856
					children:
					reg int t153 <- global int n
				}
				print reg int t153
			}
			<class 'ir.StatList'> 138571680130336 {
			parent = 138571680131200
				children:
				<class 'ir.StatList'> 138571680130048 {
				parent = 138571680130336
					children:
					reg int t154 <- auto int n
				}
				<class 'ir.StatList'> 138571680130144 {
				parent = 138571680130336
					children:
					reg int t155 <- 1
				}
				reg int32_t t156 <- reg int t154 plus reg int t155
			}
			auto int n <- reg int32_t t156
			branch  to auto label label26
			label28: <class 'ir.EmptyStat'> 138571680434880 {
			parent = 138571680131200
			}
		}
		<class 'ir.StatList'> 138571680131584 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680131488 {
			parent = 138571680131584
				children:
				reg int t161 <- 88885
			}
			print reg int t161
		}
		<class 'ir.StatList'> 138571680132064 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571680131968 {
			parent = 138571680132064
				children:
				reg int t163 <- 99996
			}
			print reg int t163
		}
		<class 'ir.StatList'> 138571679802224 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680347376 {
			parent = 138571679802224
				symbol: 	auto int p
				expr: 	<class 'ir.Const'> 138571680346896 {
				parent = 138571680347376
					value: 	10
					symbol: 	None
				}
				offset: 	None
			}
			label29: <class 'ir.StatList'> 138571679801888 {
			parent = 138571679802224
				children:
				<class 'ir.StatList'> 138571679801504 {
				parent = 138571679801888
					children:
					reg int t169 <- auto int p
				}
				<class 'ir.StatList'> 138571679801696 {
				parent = 138571679801888
					children:
					reg int t170 <- 12
				}
				reg int32_t t171 <- reg int t169 leq reg int t170
			}
			branch on not reg int32_t t171 to auto label label31
			<class 'ir.StatList'> 138571680132592 {
			parent = 138571679802224
				children:
				<class 'ir.StatList'> 138571680132496 {
				parent = 138571680132592
					children:
					reg int t165 <- global int p
				}
				print reg int t165
			}
			<class 'ir.StatList'> 138571680133072 {
			parent = 138571679802224
				children:
				<class 'ir.StatList'> 138571680132784 {
				parent = 138571680133072
					children:
					reg int t166 <- auto int p
				}
				<class 'ir.StatList'> 138571680132880 {
				parent = 138571680133072
					children:
					reg int t167 <- 1
				}
				reg int32_t t168 <- reg int t166 plus reg int t167
			}
			auto int p <- reg int32_t t168
			branch  to auto label label29
			label31: <class 'ir.EmptyStat'> 138571680347136 {
			parent = 138571679802224
			}
		}
		<class 'ir.StatList'> 138571679802608 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679802512 {
			parent = 138571679802608
				children:
				reg int t173 <- 88886
			}
			print reg int t173
		}
		<class 'ir.StatList'> 138571680347760 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679802800 {
			parent = 138571680347760
				children:
				reg int t174 <- 0
			}
			global int sum <- reg int t174
		}
		<class 'ir.StatList'> 138571679803280 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679803184 {
			parent = 138571679803280
				children:
				reg int t176 <- 99997
			}
			print reg int t176
		}
		<class 'ir.StatList'> 138571679806224 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680349584 {
			parent = 138571679806224
				symbol: 	auto int q
				expr: 	<class 'ir.Const'> 138571680348528 {
				parent = 138571680349584
					value: 	1
					symbol: 	None
				}
				offset: 	None
			}
			label32: <class 'ir.StatList'> 138571679805888 {
			parent = 138571679806224
				children:
				<class 'ir.StatList'> 138571679805552 {
				parent = 138571679805888
					children:
					reg int t187 <- auto int q
				}
				<class 'ir.StatList'> 138571679805696 {
				parent = 138571679805888
					children:
					reg int t188 <- 5
				}
				reg int32_t t189 <- reg int t187 leq reg int t188
			}
			branch on not reg int32_t t189 to auto label label34
			<class 'ir.StatList'> 138571680349008 {
			parent = 138571679806224
				children:
				<class 'ir.StatList'> 138571679803856 {
				parent = 138571680349008
					children:
					<class 'ir.StatList'> 138571679803520 {
					parent = 138571679803856
						children:
						reg int t177 <- global int sum
					}
					<class 'ir.StatList'> 138571679803664 {
					parent = 138571679803856
						children:
						reg int t178 <- global int q
					}
					reg int32_t t179 <- reg int t177 plus reg int t178
				}
				global int sum <- reg int32_t t179
			}
			<class 'ir.StatList'> 138571679804336 {
			parent = 138571679806224
				children:
				<class 'ir.StatList'> 138571679804240 {
				parent = 138571679804336
					children:
					reg int t181 <- global int q
				}
				print reg int t181
			}
			<class 'ir.StatList'> 138571679804816 {
			parent = 138571679806224
				children:
				<class 'ir.StatList'> 138571679804720 {
				parent = 138571679804816
					children:
					reg int t183 <- global int sum
				}
				print reg int t183
			}
			<class 'ir.StatList'> 138571679805296 {
			parent = 138571679806224
				children:
				<class 'ir.StatList'> 138571679805008 {
				parent = 138571679805296
					children:
					reg int t184 <- auto int q
				}
				<class 'ir.StatList'> 138571679805104 {
				parent = 138571679805296
					children:
					reg int t185 <- 1
				}
				reg int32_t t186 <- reg int t184 plus reg int t185
			}
			auto int q <- reg int32_t t186
			branch  to auto label label32
			label34: <class 'ir.EmptyStat'> 138571680348672 {
			parent = 138571679806224
			}
		}
		<class 'ir.StatList'> 138571679806608 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679806512 {
			parent = 138571679806608
				children:
				reg int t191 <- global int sum
			}
			print reg int t191
		}
		<class 'ir.StatList'> 138571679807088 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679806992 {
			parent = 138571679807088
				children:
				reg int t193 <- 88887
			}
			print reg int t193
		}
		<class 'ir.StatList'> 138571680771520 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679807280 {
			parent = 138571680771520
				children:
				reg int t194 <- 100
			}
			global int x <- reg int t194
		}
		<class 'ir.StatList'> 138571679807760 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679807664 {
			parent = 138571679807760
				children:
				reg int t196 <- 99998
			}
			print reg int t196
		}
		<class 'ir.StatList'> 138571679842992 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680770512 {
			parent = 138571679842992
				symbol: 	auto int r
				expr: 	<class 'ir.Const'> 138571680771760 {
				parent = 138571680770512
					value: 	1
					symbol: 	None
				}
				offset: 	None
			}
			label35: <class 'ir.StatList'> 138571679842656 {
			parent = 138571679842992
				children:
				<class 'ir.StatList'> 138571679809440 {
				parent = 138571679842656
					children:
					reg int t205 <- auto int r
				}
				<class 'ir.StatList'> 138571679842464 {
				parent = 138571679842656
					children:
					reg int t206 <- 3
				}
				reg int32_t t207 <- reg int t205 leq reg int t206
			}
			branch on not reg int32_t t207 to auto label label37
			<class 'ir.StatList'> 138571680770992 {
			parent = 138571679842992
				children:
				<class 'ir.StatList'> 138571679808336 {
				parent = 138571680770992
					children:
					<class 'ir.StatList'> 138571679808000 {
					parent = 138571679808336
						children:
						reg int t197 <- global int x
					}
					<class 'ir.StatList'> 138571679808144 {
					parent = 138571679808336
						children:
						reg int t198 <- global int r
					}
					reg int32_t t199 <- reg int t197 plus reg int t198
				}
				global int x <- reg int32_t t199
			}
			<class 'ir.StatList'> 138571679808816 {
			parent = 138571679842992
				children:
				<class 'ir.StatList'> 138571679808720 {
				parent = 138571679808816
					children:
					reg int t201 <- global int x
				}
				print reg int t201
			}
			<class 'ir.StatList'> 138571679809296 {
			parent = 138571679842992
				children:
				<class 'ir.StatList'> 138571679809008 {
				parent = 138571679809296
					children:
					reg int t202 <- auto int r
				}
				<class 'ir.StatList'> 138571679809104 {
				parent = 138571679809296
					children:
					reg int t203 <- 1
				}
				reg int32_t t204 <- reg int t202 plus reg int t203
			}
			auto int r <- reg int32_t t204
			branch  to auto label label35
			label37: <class 'ir.EmptyStat'> 138571680771616 {
			parent = 138571679842992
			}
		}
		<class 'ir.StatList'> 138571679843376 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679843280 {
			parent = 138571679843376
				children:
				reg int t209 <- global int x
			}
			print reg int t209
		}
		<class 'ir.StatList'> 138571679843856 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679843760 {
			parent = 138571679843856
				children:
				reg int t211 <- 88888
			}
			print reg int t211
		}
		<class 'ir.StatList'> 138571679844336 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679844240 {
			parent = 138571679844336
				children:
				reg int t213 <- 999990
			}
			print reg int t213
		}
		<class 'ir.StatList'> 138571680306272 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679844528 {
			parent = 138571680306272
				children:
				reg int t214 <- 0
			}
			global int sm_idx <- reg int t214
		}
		<class 'ir.StatList'> 138571679869104 {
		parent = 138571679814464
			children:
			<class 'ir.AssignStat'> 138571680288528 {
			parent = 138571679869104
				symbol: 	auto int sm_idx
				expr: 	<class 'ir.Const'> 138571680306416 {
				parent = 138571680288528
					value: 	0
					symbol: 	None
				}
				offset: 	None
			}
			label38: <class 'ir.StatList'> 138571679868768 {
			parent = 138571679869104
				children:
				<class 'ir.StatList'> 138571679868384 {
				parent = 138571679868768
					children:
					reg int t232 <- auto int sm_idx
				}
				<class 'ir.StatList'> 138571679868576 {
				parent = 138571679868768
					children:
					reg int t233 <- 127
				}
				reg int32_t t234 <- reg int t232 leq reg int t233
			}
			branch on not reg int32_t t234 to auto label label40
			<class 'ir.StatList'> 138571679867664 {
			parent = 138571679869104
				children:
				<class 'ir.StatList'> 138571679846304 {
				parent = 138571679867664
					children:
					<class 'ir.StatList'> 138571679845968 {
					parent = 138571679846304
						children:
						<class 'ir.StatList'> 138571679845440 {
						parent = 138571679845968
							children:
							<class 'ir.StatList'> 138571679844720 {
							parent = 138571679845440
								children:
								reg int t215 <- global int sm_idx
							}
							<class 'ir.StatList'> 138571679845056 {
							parent = 138571679845440
								children:
								reg int t216 <- 4
							}
							reg int32_t t218 <- reg int t215 times reg int t216
						}
						reg &int t220 <- &(global int[128] sm_source_arr)
						reg &int t221 <- reg &int t220 plus reg int32_t t218
						reg int t219 <- [reg &int t221]
					}
					<class 'ir.StatList'> 138571679846112 {
					parent = 138571679846304
						children:
						reg int t222 <- global int sm_idx
					}
					reg int32_t t223 <- reg int t219 plus reg int t222
				}
				<class 'ir.StatList'> 138571679867328 {
				parent = 138571679867664
					children:
					<class 'ir.StatList'> 138571679866992 {
					parent = 138571679867328
						children:
						reg int t224 <- global int sm_idx
					}
					<class 'ir.StatList'> 138571679867136 {
					parent = 138571679867328
						children:
						reg int t225 <- 4
					}
					reg int32_t t226 <- reg int t224 times reg int t225
				}
				reg &int t227 <- &(global int[128] sm_dest_arr)
				reg &int t228 <- reg &int t227 plus reg int32_t t226
				[reg &int t228] <- reg int32_t t223
			}
			<class 'ir.StatList'> 138571679868240 {
			parent = 138571679869104
				children:
				<class 'ir.StatList'> 138571679867904 {
				parent = 138571679868240
					children:
					reg int t229 <- auto int sm_idx
				}
				<class 'ir.StatList'> 138571679868048 {
				parent = 138571679868240
					children:
					reg int t230 <- 1
				}
				reg int32_t t231 <- reg int t229 plus reg int t230
			}
			auto int sm_idx <- reg int32_t t231
			branch  to auto label label38
			label40: <class 'ir.EmptyStat'> 138571680306560 {
			parent = 138571679869104
			}
		}
		<class 'ir.StatList'> 138571679905008 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679904912 {
			parent = 138571679905008
				children:
				<class 'ir.StatList'> 138571679904576 {
				parent = 138571679904912
					children:
					reg int t267 <- 127
				}
				<class 'ir.StatList'> 138571679904720 {
				parent = 138571679904912
					children:
					reg int t268 <- 0
				}
				reg int32_t t269 <- reg int t267 geq reg int t268
			}
			branch on not reg int32_t t269 to auto label label41
			<class 'ir.StatList'> 138571680308480 {
			parent = 138571679905008
				children:
				<class 'ir.StatList'> 138571679869536 {
				parent = 138571680308480
					children:
					<class 'ir.StatList'> 138571679869392 {
					parent = 138571679869536
						children:
						reg int t236 <- 76543
					}
					print reg int t236
				}
				<class 'ir.StatList'> 138571679892000 {
				parent = 138571680308480
					children:
					<class 'ir.StatList'> 138571679891856 {
					parent = 138571679892000
						children:
						<class 'ir.StatList'> 138571679870352 {
						parent = 138571679891856
							children:
							<class 'ir.StatList'> 138571679869776 {
							parent = 138571679870352
								children:
								reg int t237 <- 0
							}
							<class 'ir.StatList'> 138571679869968 {
							parent = 138571679870352
								children:
								reg int t238 <- 4
							}
							reg int32_t t240 <- reg int t237 times reg int t238
						}
						reg &int t245 <- &(global int[128] sm_dest_arr)
						reg &int t246 <- reg &int t245 plus reg int32_t t240
						reg int t244 <- [reg &int t246]
					}
					print reg int t244
				}
				<class 'ir.StatList'> 138571679894112 {
				parent = 138571680308480
					children:
					<class 'ir.StatList'> 138571679893872 {
					parent = 138571679894112
						children:
						<class 'ir.StatList'> 138571679892912 {
						parent = 138571679893872
							children:
							<class 'ir.StatList'> 138571679892240 {
							parent = 138571679892912
								children:
								reg int t247 <- 64
							}
							<class 'ir.StatList'> 138571679892528 {
							parent = 138571679892912
								children:
								reg int t248 <- 4
							}
							reg int32_t t250 <- reg int t247 times reg int t248
						}
						reg &int t255 <- &(global int[128] sm_dest_arr)
						reg &int t256 <- reg &int t255 plus reg int32_t t250
						reg int t254 <- [reg &int t256]
					}
					print reg int t254
				}
				<class 'ir.StatList'> 138571679904336 {
				parent = 138571680308480
					children:
					<class 'ir.StatList'> 138571679904192 {
					parent = 138571679904336
						children:
						<class 'ir.StatList'> 138571679894976 {
						parent = 138571679904192
							children:
							<class 'ir.StatList'> 138571679894304 {
							parent = 138571679894976
								children:
								reg int t257 <- 127
							}
							<class 'ir.StatList'> 138571679894592 {
							parent = 138571679894976
								children:
								reg int t258 <- 4
							}
							reg int32_t t260 <- reg int t257 times reg int t258
						}
						reg &int t265 <- &(global int[128] sm_dest_arr)
						reg &int t266 <- reg &int t265 plus reg int32_t t260
						reg int t264 <- [reg &int t266]
					}
					print reg int t264
				}
			}
			label41: <class 'ir.EmptyStat'> 138571680308432 {
			parent = 138571679905008
			}
		}
		<class 'ir.StatList'> 138571679905488 {
		parent = 138571679814464
			children:
			<class 'ir.StatList'> 138571679905392 {
			parent = 138571679905488
				children:
				reg int t271 <- 888880
			}
			print reg int t271
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 138571681090576 {
	parent = 138571680253168
		children:
		<class 'ir.FunctionDef'> 138571679814368 {
		parent = 138571681090576
			body: 	<class 'ir.Block'> 138571680285696 {
			parent = 138571679814368
				body: 	<class 'ir.StatList'> 138571679813696 {
				parent = 138571680285696
					children:
					<class 'ir.StatList'> 138571679813840 {
					parent = 138571679813696
						children:
						<class 'ir.StatList'> 138571679905728 {
						parent = 138571679813840
							children:
							reg int t272 <- 1234
						}
						auto int test <- reg int t272
					}
					<class 'ir.StatList'> 138571679814224 {
					parent = 138571679813696
						children:
						<class 'ir.StatList'> 138571679906304 {
						parent = 138571679814224
							children:
							<class 'ir.StatList'> 138571679905920 {
							parent = 138571679906304
								children:
								reg int t273 <- global int x
							}
							<class 'ir.StatList'> 138571679906112 {
							parent = 138571679906304
								children:
								reg int t274 <- global int x
							}
							reg int32_t t275 <- reg int t273 times reg int t274
						}
						global int squ <- reg int32_t t275
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 138571680288624 {
				parent = 138571680285696
				}
			}
			symbol: 	auto function square
		}
	}
}

--- Navigating: Applying Flattening ---
Flattening 138571680253456 into 138571680253360
Flattening <class 'ir.StatList'> 138571680253456
Flattening 138571680253360 into 138571679814656
Flattening <class 'ir.StatList'> 138571680253360
Flattening 138571679814656 into 138571679814464
Flattening <class 'ir.StatList'> 138571679814656
Flattening 138571680253408 into 138571680285984
Flattening <class 'ir.StatList'> 138571680253408
Flattening 138571680285984 into 138571679814464
Flattening <class 'ir.StatList'> 138571680285984
Flattening 138571680254560 into 138571680254848
Flattening <class 'ir.StatList'> 138571680254560
Flattening 138571680254656 into 138571680254848
Flattening <class 'ir.StatList'> 138571680254656
Flattening 138571680254848 into 138571680255568
Flattening <class 'ir.StatList'> 138571680254848
Flattening 138571680255136 into 138571680255232
Flattening <class 'ir.StatList'> 138571680255136
Flattening 138571680255232 into 138571679815808
Flattening <class 'ir.StatList'> 138571680255232
Flattening 138571679815808 into 138571680255568
Flattening <class 'ir.StatList'> 138571679815808
Flattening 138571680253936 into 138571680253840
Flattening <class 'ir.StatList'> 138571680253936
Flattening 138571680253840 into 138571680254272
Flattening <class 'ir.StatList'> 138571680253840
Flattening 138571680254272 into 138571679815376
Flattening <class 'ir.StatList'> 138571680254272
Flattening 138571679815376 into 138571680255568
Flattening <class 'ir.StatList'> 138571679815376
Flattening 138571680255568 into 138571679814464
Flattening <class 'ir.StatList'> 138571680255568
Flattening 138571680255760 into 138571679815904
Flattening <class 'ir.StatList'> 138571680255760
Flattening 138571679815904 into 138571679814464
Flattening <class 'ir.StatList'> 138571679815904
Flattening 138571680093232 into 138571680093520
Flattening <class 'ir.StatList'> 138571680093232
Flattening 138571680093328 into 138571680093520
Flattening <class 'ir.StatList'> 138571680093328
Flattening 138571680093520 into 138571680093760
Flattening <class 'ir.StatList'> 138571680093520
Flattening 138571680092272 into 138571680092608
Flattening <class 'ir.StatList'> 138571680092272
Flattening 138571680092416 into 138571680092608
Flattening <class 'ir.StatList'> 138571680092416
Flattening 138571680092608 into 138571679816816
Flattening <class 'ir.StatList'> 138571680092608
Flattening 138571679816816 into 138571679816480
Flattening <class 'ir.StatList'> 138571679816816
Flattening 138571680092944 into 138571680093040
Flattening <class 'ir.StatList'> 138571680092944
Flattening 138571680093040 into 138571679816480
Flattening <class 'ir.StatList'> 138571680093040
Flattening 138571679816480 into 138571680093760
Flattening <class 'ir.StatList'> 138571679816480
Flattening 138571680093760 into 138571679814464
Flattening <class 'ir.StatList'> 138571680093760
Flattening 138571680093952 into 138571679817200
Flattening <class 'ir.StatList'> 138571680093952
Flattening 138571679817200 into 138571679814464
Flattening <class 'ir.StatList'> 138571679817200
Flattening 138571680245792 into 138571680246128
Flattening <class 'ir.StatList'> 138571680245792
Flattening 138571680245936 into 138571680246128
Flattening <class 'ir.StatList'> 138571680245936
Flattening 138571680246128 into 138571680246368
Flattening <class 'ir.StatList'> 138571680246128
Flattening 138571680094144 into 138571680095248
Flattening <class 'ir.StatList'> 138571680094144
Flattening 138571680094288 into 138571680094672
Flattening <class 'ir.StatList'> 138571680094288
Flattening 138571680094480 into 138571680094672
Flattening <class 'ir.StatList'> 138571680094480
Flattening 138571680094672 into 138571680094912
Flattening <class 'ir.StatList'> 138571680094672
Flattening 138571680275472 into 138571680094912
Flattening <class 'ir.StatList'> 138571680275472
Flattening 138571680094912 into 138571680095248
Flattening <class 'ir.StatList'> 138571680094912
Flattening 138571680095248 into 138571679817632
Flattening <class 'ir.StatList'> 138571680095248
Flattening 138571680095488 into 138571680096016
Flattening <class 'ir.StatList'> 138571680095488
Flattening 138571680095824 into 138571680096016
Flattening <class 'ir.StatList'> 138571680095824
Flattening 138571680096016 into 138571680243968
Flattening <class 'ir.StatList'> 138571680096016
Flattening 138571680275904 into 138571680243968
Flattening <class 'ir.StatList'> 138571680275904
Flattening 138571680243968 into 138571680244928
Flattening <class 'ir.StatList'> 138571680243968
Flattening 138571680244928 into 138571680245072
Flattening <class 'ir.StatList'> 138571680244928
Flattening 138571680245072 into 138571679817632
Flattening <class 'ir.StatList'> 138571680245072
Flattening 138571680245312 into 138571680245696
Flattening <class 'ir.StatList'> 138571680245312
Flattening 138571680245504 into 138571680245696
Flattening <class 'ir.StatList'> 138571680245504
Flattening 138571680245696 into 138571680274992
Flattening <class 'ir.StatList'> 138571680245696
Flattening 138571680274992 into 138571679817632
Flattening <class 'ir.StatList'> 138571680274992
Flattening 138571679817632 into 138571680246368
Flattening <class 'ir.StatList'> 138571679817632
Flattening 138571680246368 into 138571679814464
Flattening <class 'ir.StatList'> 138571680246368
Flattening 138571680246560 into 138571680273888
Flattening <class 'ir.StatList'> 138571680246560
Flattening 138571680273888 into 138571679814464
Flattening <class 'ir.StatList'> 138571680273888
Flattening 138571680246752 into 138571680273744
Flattening <class 'ir.StatList'> 138571680246752
Flattening 138571680273744 into 138571679814464
Flattening <class 'ir.StatList'> 138571680273744
Flattening 138571680188736 into 138571680189024
Flattening <class 'ir.StatList'> 138571680188736
Flattening 138571680188832 into 138571680189024
Flattening <class 'ir.StatList'> 138571680188832
Flattening 138571680189024 into 138571680189264
Flattening <class 'ir.StatList'> 138571680189024
Flattening 138571680187968 into 138571680188304
Flattening <class 'ir.StatList'> 138571680187968
Flattening 138571680188112 into 138571680188304
Flattening <class 'ir.StatList'> 138571680188112
Flattening 138571680188304 into 138571680188544
Flattening <class 'ir.StatList'> 138571680188304
Flattening 138571680246944 into 138571680247616
Flattening <class 'ir.StatList'> 138571680246944
Flattening 138571680247232 into 138571680247616
Flattening <class 'ir.StatList'> 138571680247232
Flattening 138571680247616 into 138571680235920
Flattening <class 'ir.StatList'> 138571680247616
Flattening 138571680235920 into 138571680237312
Flattening <class 'ir.StatList'> 138571680235920
Flattening 138571680236064 into 138571680236448
Flattening <class 'ir.StatList'> 138571680236064
Flattening 138571680236256 into 138571680236448
Flattening <class 'ir.StatList'> 138571680236256
Flattening 138571680236448 into 138571680237024
Flattening <class 'ir.StatList'> 138571680236448
Flattening 138571680074144 into 138571680236832
Flattening <class 'ir.StatList'> 138571680074144
Flattening 138571680236544 into 138571680236832
Flattening <class 'ir.StatList'> 138571680236544
Flattening 138571680236832 into 138571680237024
Flattening <class 'ir.StatList'> 138571680236832
Flattening 138571680237024 into 138571680237312
Flattening <class 'ir.StatList'> 138571680237024
Flattening 138571680237312 into 138571680072128
Flattening <class 'ir.StatList'> 138571680237312
Flattening 138571680237552 into 138571680238080
Flattening <class 'ir.StatList'> 138571680237552
Flattening 138571680237888 into 138571680238080
Flattening <class 'ir.StatList'> 138571680237888
Flattening 138571680238080 into 138571680238752
Flattening <class 'ir.StatList'> 138571680238080
Flattening 138571680072944 into 138571680238464
Flattening <class 'ir.StatList'> 138571680072944
Flattening 138571680238176 into 138571680238464
Flattening <class 'ir.StatList'> 138571680238176
Flattening 138571680238464 into 138571680238752
Flattening <class 'ir.StatList'> 138571680238464
Flattening 138571680238752 into 138571680186576
Flattening <class 'ir.StatList'> 138571680238752
Flattening 138571680186576 into 138571680186720
Flattening <class 'ir.StatList'> 138571680186576
Flattening 138571680186720 into 138571680072128
Flattening <class 'ir.StatList'> 138571680186720
Flattening 138571680186960 into 138571680187344
Flattening <class 'ir.StatList'> 138571680186960
Flattening 138571680187152 into 138571680187344
Flattening <class 'ir.StatList'> 138571680187152
Flattening 138571680187344 into 138571680074240
Flattening <class 'ir.StatList'> 138571680187344
Flattening 138571680074240 into 138571680072128
Flattening <class 'ir.StatList'> 138571680074240
Flattening 138571680187488 into 138571680187824
Flattening <class 'ir.StatList'> 138571680187488
Flattening 138571680187632 into 138571680187824
Flattening <class 'ir.StatList'> 138571680187632
Flattening 138571680187824 into 138571680074576
Flattening <class 'ir.StatList'> 138571680187824
Flattening 138571680074576 into 138571680072128
Flattening <class 'ir.StatList'> 138571680074576
Flattening 138571680072128 into 138571680188544
Flattening <class 'ir.StatList'> 138571680072128
Flattening 138571680188544 into 138571680272784
Flattening <class 'ir.StatList'> 138571680188544
Flattening 138571680272784 into 138571680189264
Flattening <class 'ir.StatList'> 138571680272784
Flattening 138571680189264 into 138571679814464
Flattening <class 'ir.StatList'> 138571680189264
Flattening 138571680161856 into 138571680162192
Flattening <class 'ir.StatList'> 138571680161856
Flattening 138571680162000 into 138571680162192
Flattening <class 'ir.StatList'> 138571680162000
Flattening 138571680162192 into 138571680162528
Flattening <class 'ir.StatList'> 138571680162192
Flattening 138571680189648 into 138571680189792
Flattening <class 'ir.StatList'> 138571680189648
Flattening 138571680189792 into 138571680162528
Flattening <class 'ir.StatList'> 138571680189792
Flattening 138571680189984 into 138571680190272
Flattening <class 'ir.StatList'> 138571680189984
Flattening 138571680190080 into 138571680190272
Flattening <class 'ir.StatList'> 138571680190080
Flattening 138571680190272 into 138571680162528
Flattening <class 'ir.StatList'> 138571680190272
Flattening 138571680162528 into 138571679814464
Flattening <class 'ir.StatList'> 138571680162528
Flattening 138571680162432 into 138571680534384
Flattening <class 'ir.StatList'> 138571680162432
Flattening 138571680534384 into 138571679814464
Flattening <class 'ir.StatList'> 138571680534384
Flattening 138571680163008 into 138571680163152
Flattening <class 'ir.StatList'> 138571680163008
Flattening 138571680163152 into 138571679814464
Flattening <class 'ir.StatList'> 138571680163152
Flattening 138571680164304 into 138571680164688
Flattening <class 'ir.StatList'> 138571680164304
Flattening 138571680164496 into 138571680164688
Flattening <class 'ir.StatList'> 138571680164496
Flattening 138571680164688 into 138571680239040
Flattening <class 'ir.StatList'> 138571680164688
Flattening 138571680163584 into 138571680163680
Flattening <class 'ir.StatList'> 138571680163584
Flattening 138571680163680 into 138571680239040
Flattening <class 'ir.StatList'> 138571680163680
Flattening 138571680163872 into 138571680164160
Flattening <class 'ir.StatList'> 138571680163872
Flattening 138571680163968 into 138571680164160
Flattening <class 'ir.StatList'> 138571680163968
Flattening 138571680164160 into 138571680239040
Flattening <class 'ir.StatList'> 138571680164160
Flattening 138571680239040 into 138571679814464
Flattening <class 'ir.StatList'> 138571680239040
Flattening 138571680238848 into 138571680237648
Flattening <class 'ir.StatList'> 138571680238848
Flattening 138571680237648 into 138571679814464
Flattening <class 'ir.StatList'> 138571680237648
Flattening 138571680244448 into 138571680244496
Flattening <class 'ir.StatList'> 138571680244448
Flattening 138571680244496 into 138571679814464
Flattening <class 'ir.StatList'> 138571680244496
Flattening 138571679816576 into 138571680531168
Flattening <class 'ir.StatList'> 138571679816576
Flattening 138571680276192 into 138571680531168
Flattening <class 'ir.StatList'> 138571680276192
Flattening 138571680531168 into 138571680532368
Flattening <class 'ir.StatList'> 138571680531168
Flattening 138571680243824 into 138571680095584
Flattening <class 'ir.StatList'> 138571680243824
Flattening 138571680095584 into 138571680532368
Flattening <class 'ir.StatList'> 138571680095584
Flattening 138571680254944 into 138571679815088
Flattening <class 'ir.StatList'> 138571680254944
Flattening 138571680253984 into 138571679815088
Flattening <class 'ir.StatList'> 138571680253984
Flattening 138571679815088 into 138571680532368
Flattening <class 'ir.StatList'> 138571679815088
Flattening 138571680532368 into 138571679814464
Flattening <class 'ir.StatList'> 138571680532368
Flattening 138571680532992 into 138571680533280
Flattening <class 'ir.StatList'> 138571680532992
Flattening 138571680533280 into 138571679814464
Flattening <class 'ir.StatList'> 138571680533280
Flattening 138571680072848 into 138571680075728
Flattening <class 'ir.StatList'> 138571680072848
Flattening 138571680075728 into 138571679814464
Flattening <class 'ir.StatList'> 138571680075728
Flattening 138571680149568 into 138571680149904
Flattening <class 'ir.StatList'> 138571680149568
Flattening 138571680149712 into 138571680149904
Flattening <class 'ir.StatList'> 138571680149712
Flattening 138571680149904 into 138571680150240
Flattening <class 'ir.StatList'> 138571680149904
Flattening 138571680163440 into 138571680162864
Flattening <class 'ir.StatList'> 138571680163440
Flattening 138571680162864 into 138571680150240
Flattening <class 'ir.StatList'> 138571680162864
Flattening 138571680165120 into 138571680165216
Flattening <class 'ir.StatList'> 138571680165120
Flattening 138571680165216 into 138571680150240
Flattening <class 'ir.StatList'> 138571680165216
Flattening 138571680165408 into 138571680165696
Flattening <class 'ir.StatList'> 138571680165408
Flattening 138571680165504 into 138571680165696
Flattening <class 'ir.StatList'> 138571680165504
Flattening 138571680165696 into 138571680150240
Flattening <class 'ir.StatList'> 138571680165696
Flattening 138571680150240 into 138571679814464
Flattening <class 'ir.StatList'> 138571680150240
Flattening 138571680150528 into 138571680150624
Flattening <class 'ir.StatList'> 138571680150528
Flattening 138571680150624 into 138571679814464
Flattening <class 'ir.StatList'> 138571680150624
Flattening 138571680151008 into 138571680151104
Flattening <class 'ir.StatList'> 138571680151008
Flattening 138571680151104 into 138571679814464
Flattening <class 'ir.StatList'> 138571680151104
Flattening 138571680152256 into 138571680152640
Flattening <class 'ir.StatList'> 138571680152256
Flattening 138571680152448 into 138571680152640
Flattening <class 'ir.StatList'> 138571680152448
Flattening 138571680152640 into 138571680152976
Flattening <class 'ir.StatList'> 138571680152640
Flattening 138571680151536 into 138571680151632
Flattening <class 'ir.StatList'> 138571680151536
Flattening 138571680151632 into 138571680152976
Flattening <class 'ir.StatList'> 138571680151632
Flattening 138571680151824 into 138571680152112
Flattening <class 'ir.StatList'> 138571680151824
Flattening 138571680151920 into 138571680152112
Flattening <class 'ir.StatList'> 138571680151920
Flattening 138571680152112 into 138571680152976
Flattening <class 'ir.StatList'> 138571680152112
Flattening 138571680152976 into 138571679814464
Flattening <class 'ir.StatList'> 138571680152976
Flattening 138571680153264 into 138571680153360
Flattening <class 'ir.StatList'> 138571680153264
Flattening 138571680153360 into 138571679814464
Flattening <class 'ir.StatList'> 138571680153360
Flattening 138571680129232 into 138571680129328
Flattening <class 'ir.StatList'> 138571680129232
Flattening 138571680129328 into 138571679814464
Flattening <class 'ir.StatList'> 138571680129328
Flattening 138571680130480 into 138571680130864
Flattening <class 'ir.StatList'> 138571680130480
Flattening 138571680130672 into 138571680130864
Flattening <class 'ir.StatList'> 138571680130672
Flattening 138571680130864 into 138571680131200
Flattening <class 'ir.StatList'> 138571680130864
Flattening 138571680129760 into 138571680129856
Flattening <class 'ir.StatList'> 138571680129760
Flattening 138571680129856 into 138571680131200
Flattening <class 'ir.StatList'> 138571680129856
Flattening 138571680130048 into 138571680130336
Flattening <class 'ir.StatList'> 138571680130048
Flattening 138571680130144 into 138571680130336
Flattening <class 'ir.StatList'> 138571680130144
Flattening 138571680130336 into 138571680131200
Flattening <class 'ir.StatList'> 138571680130336
Flattening 138571680131200 into 138571679814464
Flattening <class 'ir.StatList'> 138571680131200
Flattening 138571680131488 into 138571680131584
Flattening <class 'ir.StatList'> 138571680131488
Flattening 138571680131584 into 138571679814464
Flattening <class 'ir.StatList'> 138571680131584
Flattening 138571680131968 into 138571680132064
Flattening <class 'ir.StatList'> 138571680131968
Flattening 138571680132064 into 138571679814464
Flattening <class 'ir.StatList'> 138571680132064
Flattening 138571679801504 into 138571679801888
Flattening <class 'ir.StatList'> 138571679801504
Flattening 138571679801696 into 138571679801888
Flattening <class 'ir.StatList'> 138571679801696
Flattening 138571679801888 into 138571679802224
Flattening <class 'ir.StatList'> 138571679801888
Flattening 138571680132496 into 138571680132592
Flattening <class 'ir.StatList'> 138571680132496
Flattening 138571680132592 into 138571679802224
Flattening <class 'ir.StatList'> 138571680132592
Flattening 138571680132784 into 138571680133072
Flattening <class 'ir.StatList'> 138571680132784
Flattening 138571680132880 into 138571680133072
Flattening <class 'ir.StatList'> 138571680132880
Flattening 138571680133072 into 138571679802224
Flattening <class 'ir.StatList'> 138571680133072
Flattening 138571679802224 into 138571679814464
Flattening <class 'ir.StatList'> 138571679802224
Flattening 138571679802512 into 138571679802608
Flattening <class 'ir.StatList'> 138571679802512
Flattening 138571679802608 into 138571679814464
Flattening <class 'ir.StatList'> 138571679802608
Flattening 138571679802800 into 138571680347760
Flattening <class 'ir.StatList'> 138571679802800
Flattening 138571680347760 into 138571679814464
Flattening <class 'ir.StatList'> 138571680347760
Flattening 138571679803184 into 138571679803280
Flattening <class 'ir.StatList'> 138571679803184
Flattening 138571679803280 into 138571679814464
Flattening <class 'ir.StatList'> 138571679803280
Flattening 138571679805552 into 138571679805888
Flattening <class 'ir.StatList'> 138571679805552
Flattening 138571679805696 into 138571679805888
Flattening <class 'ir.StatList'> 138571679805696
Flattening 138571679805888 into 138571679806224
Flattening <class 'ir.StatList'> 138571679805888
Flattening 138571679803520 into 138571679803856
Flattening <class 'ir.StatList'> 138571679803520
Flattening 138571679803664 into 138571679803856
Flattening <class 'ir.StatList'> 138571679803664
Flattening 138571679803856 into 138571680349008
Flattening <class 'ir.StatList'> 138571679803856
Flattening 138571680349008 into 138571679806224
Flattening <class 'ir.StatList'> 138571680349008
Flattening 138571679804240 into 138571679804336
Flattening <class 'ir.StatList'> 138571679804240
Flattening 138571679804336 into 138571679806224
Flattening <class 'ir.StatList'> 138571679804336
Flattening 138571679804720 into 138571679804816
Flattening <class 'ir.StatList'> 138571679804720
Flattening 138571679804816 into 138571679806224
Flattening <class 'ir.StatList'> 138571679804816
Flattening 138571679805008 into 138571679805296
Flattening <class 'ir.StatList'> 138571679805008
Flattening 138571679805104 into 138571679805296
Flattening <class 'ir.StatList'> 138571679805104
Flattening 138571679805296 into 138571679806224
Flattening <class 'ir.StatList'> 138571679805296
Flattening 138571679806224 into 138571679814464
Flattening <class 'ir.StatList'> 138571679806224
Flattening 138571679806512 into 138571679806608
Flattening <class 'ir.StatList'> 138571679806512
Flattening 138571679806608 into 138571679814464
Flattening <class 'ir.StatList'> 138571679806608
Flattening 138571679806992 into 138571679807088
Flattening <class 'ir.StatList'> 138571679806992
Flattening 138571679807088 into 138571679814464
Flattening <class 'ir.StatList'> 138571679807088
Flattening 138571679807280 into 138571680771520
Flattening <class 'ir.StatList'> 138571679807280
Flattening 138571680771520 into 138571679814464
Flattening <class 'ir.StatList'> 138571680771520
Flattening 138571679807664 into 138571679807760
Flattening <class 'ir.StatList'> 138571679807664
Flattening 138571679807760 into 138571679814464
Flattening <class 'ir.StatList'> 138571679807760
Flattening 138571679809440 into 138571679842656
Flattening <class 'ir.StatList'> 138571679809440
Flattening 138571679842464 into 138571679842656
Flattening <class 'ir.StatList'> 138571679842464
Flattening 138571679842656 into 138571679842992
Flattening <class 'ir.StatList'> 138571679842656
Flattening 138571679808000 into 138571679808336
Flattening <class 'ir.StatList'> 138571679808000
Flattening 138571679808144 into 138571679808336
Flattening <class 'ir.StatList'> 138571679808144
Flattening 138571679808336 into 138571680770992
Flattening <class 'ir.StatList'> 138571679808336
Flattening 138571680770992 into 138571679842992
Flattening <class 'ir.StatList'> 138571680770992
Flattening 138571679808720 into 138571679808816
Flattening <class 'ir.StatList'> 138571679808720
Flattening 138571679808816 into 138571679842992
Flattening <class 'ir.StatList'> 138571679808816
Flattening 138571679809008 into 138571679809296
Flattening <class 'ir.StatList'> 138571679809008
Flattening 138571679809104 into 138571679809296
Flattening <class 'ir.StatList'> 138571679809104
Flattening 138571679809296 into 138571679842992
Flattening <class 'ir.StatList'> 138571679809296
Flattening 138571679842992 into 138571679814464
Flattening <class 'ir.StatList'> 138571679842992
Flattening 138571679843280 into 138571679843376
Flattening <class 'ir.StatList'> 138571679843280
Flattening 138571679843376 into 138571679814464
Flattening <class 'ir.StatList'> 138571679843376
Flattening 138571679843760 into 138571679843856
Flattening <class 'ir.StatList'> 138571679843760
Flattening 138571679843856 into 138571679814464
Flattening <class 'ir.StatList'> 138571679843856
Flattening 138571679844240 into 138571679844336
Flattening <class 'ir.StatList'> 138571679844240
Flattening 138571679844336 into 138571679814464
Flattening <class 'ir.StatList'> 138571679844336
Flattening 138571679844528 into 138571680306272
Flattening <class 'ir.StatList'> 138571679844528
Flattening 138571680306272 into 138571679814464
Flattening <class 'ir.StatList'> 138571680306272
Flattening 138571679868384 into 138571679868768
Flattening <class 'ir.StatList'> 138571679868384
Flattening 138571679868576 into 138571679868768
Flattening <class 'ir.StatList'> 138571679868576
Flattening 138571679868768 into 138571679869104
Flattening <class 'ir.StatList'> 138571679868768
Flattening 138571679844720 into 138571679845440
Flattening <class 'ir.StatList'> 138571679844720
Flattening 138571679845056 into 138571679845440
Flattening <class 'ir.StatList'> 138571679845056
Flattening 138571679845440 into 138571679845968
Flattening <class 'ir.StatList'> 138571679845440
Flattening 138571679845968 into 138571679846304
Flattening <class 'ir.StatList'> 138571679845968
Flattening 138571679846112 into 138571679846304
Flattening <class 'ir.StatList'> 138571679846112
Flattening 138571679846304 into 138571679867664
Flattening <class 'ir.StatList'> 138571679846304
Flattening 138571679866992 into 138571679867328
Flattening <class 'ir.StatList'> 138571679866992
Flattening 138571679867136 into 138571679867328
Flattening <class 'ir.StatList'> 138571679867136
Flattening 138571679867328 into 138571679867664
Flattening <class 'ir.StatList'> 138571679867328
Flattening 138571679867664 into 138571679869104
Flattening <class 'ir.StatList'> 138571679867664
Flattening 138571679867904 into 138571679868240
Flattening <class 'ir.StatList'> 138571679867904
Flattening 138571679868048 into 138571679868240
Flattening <class 'ir.StatList'> 138571679868048
Flattening 138571679868240 into 138571679869104
Flattening <class 'ir.StatList'> 138571679868240
Flattening 138571679869104 into 138571679814464
Flattening <class 'ir.StatList'> 138571679869104
Flattening 138571679904576 into 138571679904912
Flattening <class 'ir.StatList'> 138571679904576
Flattening 138571679904720 into 138571679904912
Flattening <class 'ir.StatList'> 138571679904720
Flattening 138571679904912 into 138571679905008
Flattening <class 'ir.StatList'> 138571679904912
Flattening 138571679869392 into 138571679869536
Flattening <class 'ir.StatList'> 138571679869392
Flattening 138571679869536 into 138571680308480
Flattening <class 'ir.StatList'> 138571679869536
Flattening 138571679869776 into 138571679870352
Flattening <class 'ir.StatList'> 138571679869776
Flattening 138571679869968 into 138571679870352
Flattening <class 'ir.StatList'> 138571679869968
Flattening 138571679870352 into 138571679891856
Flattening <class 'ir.StatList'> 138571679870352
Flattening 138571679891856 into 138571679892000
Flattening <class 'ir.StatList'> 138571679891856
Flattening 138571679892000 into 138571680308480
Flattening <class 'ir.StatList'> 138571679892000
Flattening 138571679892240 into 138571679892912
Flattening <class 'ir.StatList'> 138571679892240
Flattening 138571679892528 into 138571679892912
Flattening <class 'ir.StatList'> 138571679892528
Flattening 138571679892912 into 138571679893872
Flattening <class 'ir.StatList'> 138571679892912
Flattening 138571679893872 into 138571679894112
Flattening <class 'ir.StatList'> 138571679893872
Flattening 138571679894112 into 138571680308480
Flattening <class 'ir.StatList'> 138571679894112
Flattening 138571679894304 into 138571679894976
Flattening <class 'ir.StatList'> 138571679894304
Flattening 138571679894592 into 138571679894976
Flattening <class 'ir.StatList'> 138571679894592
Flattening 138571679894976 into 138571679904192
Flattening <class 'ir.StatList'> 138571679894976
Flattening 138571679904192 into 138571679904336
Flattening <class 'ir.StatList'> 138571679904192
Flattening 138571679904336 into 138571680308480
Flattening <class 'ir.StatList'> 138571679904336
Flattening 138571680308480 into 138571679905008
Flattening <class 'ir.StatList'> 138571680308480
Flattening 138571679905008 into 138571679814464
Flattening <class 'ir.StatList'> 138571679905008
Flattening 138571679905392 into 138571679905488
Flattening <class 'ir.StatList'> 138571679905392
Flattening 138571679905488 into 138571679814464
Flattening <class 'ir.StatList'> 138571679905488
Not flattening 138571679814464 into 138571680253168 of type <class 'ir.Block'>
Flattening <class 'ir.StatList'> 138571679814464
Failed!
Flattening 138571679905728 into 138571679813840
Flattening <class 'ir.StatList'> 138571679905728
Flattening 138571679813840 into 138571679813696
Flattening <class 'ir.StatList'> 138571679813840
Flattening 138571679905920 into 138571679906304
Flattening <class 'ir.StatList'> 138571679905920
Flattening 138571679906112 into 138571679906304
Flattening <class 'ir.StatList'> 138571679906112
Flattening 138571679906304 into 138571679814224
Flattening <class 'ir.StatList'> 138571679906304
Flattening 138571679814224 into 138571679813696
Flattening <class 'ir.StatList'> 138571679814224
Not flattening 138571679813696 into 138571680285696 of type <class 'ir.Block'>
Flattening <class 'ir.StatList'> 138571679813696
Failed!

--- IR Tree After Flattening ---
<class 'ir.Block'> 138571680253168 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 138571679814464 {
	parent = 138571680253168
		children:
		reg int t0 <- 1
		reg int t1 <- minus reg int t0
		global int x <- reg int t1
		read reg int t2
		global int x <- reg int t2
		reg int t6 <- global int x
		reg int t7 <- 100
		reg int32_t t8 <- reg int t6 gtr reg int t7
		branch on reg int32_t t8 to auto label label2
		reg int t10 <- global int x
		print reg int t10
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 138571680254608 {
		parent = 138571679814464
		}
		reg int t3 <- global int x
		reg int t5 <- minus reg int t3
		print reg int t5
		label1: <class 'ir.EmptyStat'> 138571679815712 {
		parent = 138571679814464
		}
		reg int t11 <- 1
		global int x <- reg int t11
		label3: <class 'ir.EmptyStat'> 138571680093232 {
		parent = 138571679814464
		}
		reg int t17 <- global int x
		reg int t18 <- 10
		reg int32_t t19 <- reg int t17 leq reg int t18
		branch on not reg int32_t t19 to auto label label4
		call  to auto function square
		reg int t12 <- global int x
		reg int t13 <- 1
		reg int32_t t14 <- reg int t12 plus reg int t13
		global int x <- reg int32_t t14
		reg int t16 <- global int squ
		print reg int t16
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 138571679816144 {
		parent = 138571679814464
		}
		reg int t20 <- 101
		global int x <- reg int t20
		label5: <class 'ir.EmptyStat'> 138571680245792 {
		parent = 138571679814464
		}
		reg int t44 <- global int x
		reg int t45 <- 105
		reg int32_t t46 <- reg int t44 leq reg int t45
		branch on not reg int32_t t46 to auto label label6
		reg int t21 <- global int x
		reg int t22 <- global int x
		reg int t23 <- 100
		reg int32_t t24 <- reg int t22 minus reg int t23
		reg int t25 <- 1
		reg int32_t t26 <- reg int32_t t24 times reg int t25
		reg &char t27 <- &(global char[5] arr)
		reg &char t28 <- reg &char t27 plus reg int32_t t26
		[reg &char t28] <- reg int t21
		reg int t29 <- global int x
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t34 <- reg int32_t t31 times reg int t32
		reg &char t39 <- &(global char[5] arr)
		reg &char t40 <- reg &char t39 plus reg int32_t t34
		reg char t38 <- [reg &char t40]
		print reg char t38
		reg int t41 <- global int x
		reg int t42 <- 1
		reg int32_t t43 <- reg int t41 plus reg int t42
		global int x <- reg int32_t t43
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 138571679817440 {
		parent = 138571679814464
		}
		reg int t47 <- 1
		global int x <- reg int t47
		reg int t48 <- 1
		global int y <- reg int t48
		label9: <class 'ir.EmptyStat'> 138571680188736 {
		parent = 138571679814464
		}
		reg int t88 <- global int x
		reg int t89 <- 5
		reg int32_t t90 <- reg int t88 leq reg int t89
		branch on not reg int32_t t90 to auto label label10
		label7: <class 'ir.EmptyStat'> 138571680187968 {
		parent = 138571679814464
		}
		reg int t85 <- global int y
		reg int t86 <- 5
		reg int32_t t87 <- reg int t85 leq reg int t86
		branch on not reg int32_t t87 to auto label label8
		reg int t49 <- global int x
		reg int t50 <- 1
		reg int32_t t52 <- reg int t49 times reg int t50
		reg &char t54 <- &(global char[5] arr)
		reg &char t55 <- reg &char t54 plus reg int32_t t52
		reg char t53 <- [reg &char t55]
		reg int t56 <- global int x
		reg int t57 <- 10
		reg int32_t t58 <- reg int t56 times reg int t57
		reg int t59 <- global int y
		reg int t60 <- 2
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
		reg &short t63 <- &(global short[5, 5] multid)
		reg &short t64 <- reg &short t63 plus reg int32_t t62
		[reg &short t64] <- reg char t53
		reg int t65 <- global int x
		reg int t66 <- 10
		reg int32_t t67 <- reg int t65 times reg int t66
		reg int t68 <- global int y
		reg int t69 <- 2
		reg int32_t t70 <- reg int t68 times reg int t69
		reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
		reg &short t77 <- &(global short[5, 5] multid)
		reg &short t78 <- reg &short t77 plus reg int32_t t72
		reg short t76 <- [reg &short t78]
		print reg short t76
		reg int t79 <- global int x
		reg int t80 <- 1
		reg int32_t t81 <- reg int t79 plus reg int t80
		global int x <- reg int32_t t81
		reg int t82 <- global int y
		reg int t83 <- 1
		reg int32_t t84 <- reg int t82 plus reg int t83
		global int y <- reg int32_t t84
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 138571680071888 {
		parent = 138571679814464
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 138571680273072 {
		parent = 138571679814464
		}
		<class 'ir.AssignStat'> 138571680075680 {
		parent = 138571679814464
			symbol: 	auto int a
			expr: 	<class 'ir.Const'> 138571680074864 {
			parent = 138571680075680
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label11: <class 'ir.EmptyStat'> 138571680161856 {
		parent = 138571679814464
		}
		reg int t96 <- auto int a
		reg int t97 <- 20
		reg int32_t t98 <- reg int t96 leq reg int t97
		branch on not reg int32_t t98 to auto label label13
		reg int t92 <- auto int a
		print reg int t92
		reg int t93 <- auto int a
		reg int t94 <- 1
		reg int32_t t95 <- reg int t93 plus reg int t94
		auto int a <- reg int32_t t95
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 138571680075104 {
		parent = 138571679814464
		}
		reg int t99 <- 10
		global int i <- reg int t99
		reg int t101 <- 99991
		print reg int t101
		<class 'ir.AssignStat'> 138571680533184 {
		parent = 138571679814464
			symbol: 	auto int i
			expr: 	<class 'ir.Const'> 138571680533664 {
			parent = 138571680533184
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label14: <class 'ir.EmptyStat'> 138571680163008 {
		parent = 138571679814464
		}
		reg int t107 <- auto int i
		reg int t108 <- 15
		reg int32_t t109 <- reg int t107 leq reg int t108
		branch on not reg int32_t t109 to auto label label16
		reg int t103 <- global int i
		print reg int t103
		reg int t104 <- auto int i
		reg int t105 <- 1
		reg int32_t t106 <- reg int t104 plus reg int t105
		auto int i <- reg int32_t t106
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 138571680189552 {
		parent = 138571679814464
		}
		reg int t111 <- 88881
		print reg int t111
		reg int t113 <- 99992
		print reg int t113
		<class 'ir.AssignStat'> 138571680531648 {
		parent = 138571679814464
			symbol: 	auto int j
			expr: 	<class 'ir.Const'> 138571680532128 {
			parent = 138571680531648
				value: 	5
				symbol: 	None
			}
			offset: 	None
		}
		label17: <class 'ir.EmptyStat'> 138571680163920 {
		parent = 138571679814464
		}
		reg int t119 <- auto int j
		reg int t120 <- 5
		reg int32_t t121 <- reg int t119 leq reg int t120
		branch on not reg int32_t t121 to auto label label19
		reg int t115 <- global int j
		print reg int t115
		reg int t116 <- auto int j
		reg int t117 <- 1
		reg int32_t t118 <- reg int t116 plus reg int t117
		auto int j <- reg int32_t t118
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 138571680531984 {
		parent = 138571679814464
		}
		reg int t123 <- 88882
		print reg int t123
		reg int t125 <- 99993
		print reg int t125
		<class 'ir.AssignStat'> 138571680432720 {
		parent = 138571679814464
			symbol: 	auto int k
			expr: 	<class 'ir.Const'> 138571680530592 {
			parent = 138571680432720
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label20: <class 'ir.EmptyStat'> 138571680149568 {
		parent = 138571679814464
		}
		reg int t133 <- auto int k
		reg int t134 <- 5
		reg int32_t t135 <- reg int t133 leq reg int t134
		branch on not reg int32_t t135 to auto label label22
		reg int t127 <- 77777
		print reg int t127
		reg int t129 <- global int k
		print reg int t129
		reg int t130 <- auto int k
		reg int t131 <- 1
		reg int32_t t132 <- reg int t130 plus reg int t131
		auto int k <- reg int32_t t132
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 138571680432336 {
		parent = 138571679814464
		}
		reg int t137 <- 88883
		print reg int t137
		reg int t139 <- 99994
		print reg int t139
		<class 'ir.AssignStat'> 138571680436080 {
		parent = 138571679814464
			symbol: 	auto int m
			expr: 	<class 'ir.Const'> 138571680433824 {
			parent = 138571680436080
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label23: <class 'ir.EmptyStat'> 138571680149760 {
		parent = 138571679814464
		}
		reg int t145 <- auto int m
		reg int t146 <- 6
		reg int32_t t147 <- reg int t145 leq reg int t146
		branch on not reg int32_t t147 to auto label label25
		reg int t141 <- global int m
		print reg int t141
		reg int t142 <- auto int m
		reg int t143 <- 1
		reg int32_t t144 <- reg int t142 plus reg int t143
		auto int m <- reg int32_t t144
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 138571680434016 {
		parent = 138571679814464
		}
		reg int t149 <- 88884
		print reg int t149
		reg int t151 <- 99995
		print reg int t151
		<class 'ir.AssignStat'> 138571680434544 {
		parent = 138571679814464
			symbol: 	auto int n
			expr: 	<class 'ir.Const'> 138571680435024 {
			parent = 138571680434544
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label26: <class 'ir.EmptyStat'> 138571680130480 {
		parent = 138571679814464
		}
		reg int t157 <- auto int n
		reg int t158 <- 7
		reg int32_t t159 <- reg int t157 leq reg int t158
		branch on not reg int32_t t159 to auto label label28
		reg int t153 <- global int n
		print reg int t153
		reg int t154 <- auto int n
		reg int t155 <- 1
		reg int32_t t156 <- reg int t154 plus reg int t155
		auto int n <- reg int32_t t156
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 138571680434880 {
		parent = 138571679814464
		}
		reg int t161 <- 88885
		print reg int t161
		reg int t163 <- 99996
		print reg int t163
		<class 'ir.AssignStat'> 138571680347376 {
		parent = 138571679814464
			symbol: 	auto int p
			expr: 	<class 'ir.Const'> 138571680346896 {
			parent = 138571680347376
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label29: <class 'ir.EmptyStat'> 138571679801504 {
		parent = 138571679814464
		}
		reg int t169 <- auto int p
		reg int t170 <- 12
		reg int32_t t171 <- reg int t169 leq reg int t170
		branch on not reg int32_t t171 to auto label label31
		reg int t165 <- global int p
		print reg int t165
		reg int t166 <- auto int p
		reg int t167 <- 1
		reg int32_t t168 <- reg int t166 plus reg int t167
		auto int p <- reg int32_t t168
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 138571680347136 {
		parent = 138571679814464
		}
		reg int t173 <- 88886
		print reg int t173
		reg int t174 <- 0
		global int sum <- reg int t174
		reg int t176 <- 99997
		print reg int t176
		<class 'ir.AssignStat'> 138571680349584 {
		parent = 138571679814464
			symbol: 	auto int q
			expr: 	<class 'ir.Const'> 138571680348528 {
			parent = 138571680349584
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label32: <class 'ir.EmptyStat'> 138571679805552 {
		parent = 138571679814464
		}
		reg int t187 <- auto int q
		reg int t188 <- 5
		reg int32_t t189 <- reg int t187 leq reg int t188
		branch on not reg int32_t t189 to auto label label34
		reg int t177 <- global int sum
		reg int t178 <- global int q
		reg int32_t t179 <- reg int t177 plus reg int t178
		global int sum <- reg int32_t t179
		reg int t181 <- global int q
		print reg int t181
		reg int t183 <- global int sum
		print reg int t183
		reg int t184 <- auto int q
		reg int t185 <- 1
		reg int32_t t186 <- reg int t184 plus reg int t185
		auto int q <- reg int32_t t186
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 138571680348672 {
		parent = 138571679814464
		}
		reg int t191 <- global int sum
		print reg int t191
		reg int t193 <- 88887
		print reg int t193
		reg int t194 <- 100
		global int x <- reg int t194
		reg int t196 <- 99998
		print reg int t196
		<class 'ir.AssignStat'> 138571680770512 {
		parent = 138571679814464
			symbol: 	auto int r
			expr: 	<class 'ir.Const'> 138571680771760 {
			parent = 138571680770512
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label35: <class 'ir.EmptyStat'> 138571679842368 {
		parent = 138571679814464
		}
		reg int t205 <- auto int r
		reg int t206 <- 3
		reg int32_t t207 <- reg int t205 leq reg int t206
		branch on not reg int32_t t207 to auto label label37
		reg int t197 <- global int x
		reg int t198 <- global int r
		reg int32_t t199 <- reg int t197 plus reg int t198
		global int x <- reg int32_t t199
		reg int t201 <- global int x
		print reg int t201
		reg int t202 <- auto int r
		reg int t203 <- 1
		reg int32_t t204 <- reg int t202 plus reg int t203
		auto int r <- reg int32_t t204
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 138571680771616 {
		parent = 138571679814464
		}
		reg int t209 <- global int x
		print reg int t209
		reg int t211 <- 88888
		print reg int t211
		reg int t213 <- 999990
		print reg int t213
		reg int t214 <- 0
		global int sm_idx <- reg int t214
		<class 'ir.AssignStat'> 138571680288528 {
		parent = 138571679814464
			symbol: 	auto int sm_idx
			expr: 	<class 'ir.Const'> 138571680306416 {
			parent = 138571680288528
				value: 	0
				symbol: 	None
			}
			offset: 	None
		}
		label38: <class 'ir.EmptyStat'> 138571679868384 {
		parent = 138571679814464
		}
		reg int t232 <- auto int sm_idx
		reg int t233 <- 127
		reg int32_t t234 <- reg int t232 leq reg int t233
		branch on not reg int32_t t234 to auto label label40
		reg int t215 <- global int sm_idx
		reg int t216 <- 4
		reg int32_t t218 <- reg int t215 times reg int t216
		reg &int t220 <- &(global int[128] sm_source_arr)
		reg &int t221 <- reg &int t220 plus reg int32_t t218
		reg int t219 <- [reg &int t221]
		reg int t222 <- global int sm_idx
		reg int32_t t223 <- reg int t219 plus reg int t222
		reg int t224 <- global int sm_idx
		reg int t225 <- 4
		reg int32_t t226 <- reg int t224 times reg int t225
		reg &int t227 <- &(global int[128] sm_dest_arr)
		reg &int t228 <- reg &int t227 plus reg int32_t t226
		[reg &int t228] <- reg int32_t t223
		reg int t229 <- auto int sm_idx
		reg int t230 <- 1
		reg int32_t t231 <- reg int t229 plus reg int t230
		auto int sm_idx <- reg int32_t t231
		branch  to auto label label38
		label40: <class 'ir.EmptyStat'> 138571680306560 {
		parent = 138571679814464
		}
		reg int t267 <- 127
		reg int t268 <- 0
		reg int32_t t269 <- reg int t267 geq reg int t268
		branch on not reg int32_t t269 to auto label label41
		reg int t236 <- 76543
		print reg int t236
		reg int t237 <- 0
		reg int t238 <- 4
		reg int32_t t240 <- reg int t237 times reg int t238
		reg &int t245 <- &(global int[128] sm_dest_arr)
		reg &int t246 <- reg &int t245 plus reg int32_t t240
		reg int t244 <- [reg &int t246]
		print reg int t244
		reg int t247 <- 64
		reg int t248 <- 4
		reg int32_t t250 <- reg int t247 times reg int t248
		reg &int t255 <- &(global int[128] sm_dest_arr)
		reg &int t256 <- reg &int t255 plus reg int32_t t250
		reg int t254 <- [reg &int t256]
		print reg int t254
		reg int t257 <- 127
		reg int t258 <- 4
		reg int32_t t260 <- reg int t257 times reg int t258
		reg &int t265 <- &(global int[128] sm_dest_arr)
		reg &int t266 <- reg &int t265 plus reg int32_t t260
		reg int t264 <- [reg &int t266]
		print reg int t264
		label41: <class 'ir.EmptyStat'> 138571680308432 {
		parent = 138571679814464
		}
		reg int t271 <- 888880
		print reg int t271
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 138571681090576 {
	parent = 138571680253168
		children:
		<class 'ir.FunctionDef'> 138571679814368 {
		parent = 138571681090576
			body: 	<class 'ir.Block'> 138571680285696 {
			parent = 138571679814368
				body: 	<class 'ir.StatList'> 138571679813696 {
				parent = 138571680285696
					children:
					reg int t272 <- 1234
					auto int test <- reg int t272
					reg int t273 <- global int x
					reg int t274 <- global int x
					reg int32_t t275 <- reg int t273 times reg int t274
					global int squ <- reg int32_t t275
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				global int i
				global int j
				global int k
				global int m
				global int n
				global int p
				global int q
				global int sum
				global int r
				global int sm_idx
				global int[128] sm_source_arr
				global int[128] sm_dest_arr
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 138571680288624 {
				parent = 138571680285696
				}
			}
			symbol: 	auto function square
		}
	}
}

--- Performing Data Layout ---

--- IR Tree After Data Layout (Symbols might have allocinfo) ---
<class 'ir.Block'> 138571680253168 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 138571679814464 {
	parent = 138571680253168
		children:
		reg int t0 <- 1
		reg int t1 <- minus reg int t0
		global int x; _g_x: def byte 4 <- reg int t1
		read reg int t2
		global int x; _g_x: def byte 4 <- reg int t2
		reg int t6 <- global int x; _g_x: def byte 4
		reg int t7 <- 100
		reg int32_t t8 <- reg int t6 gtr reg int t7
		branch on reg int32_t t8 to auto label label2
		reg int t10 <- global int x; _g_x: def byte 4
		print reg int t10
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 138571680254608 {
		parent = 138571679814464
		}
		reg int t3 <- global int x; _g_x: def byte 4
		reg int t5 <- minus reg int t3
		print reg int t5
		label1: <class 'ir.EmptyStat'> 138571679815712 {
		parent = 138571679814464
		}
		reg int t11 <- 1
		global int x; _g_x: def byte 4 <- reg int t11
		label3: <class 'ir.EmptyStat'> 138571680093232 {
		parent = 138571679814464
		}
		reg int t17 <- global int x; _g_x: def byte 4
		reg int t18 <- 10
		reg int32_t t19 <- reg int t17 leq reg int t18
		branch on not reg int32_t t19 to auto label label4
		call  to auto function square
		reg int t12 <- global int x; _g_x: def byte 4
		reg int t13 <- 1
		reg int32_t t14 <- reg int t12 plus reg int t13
		global int x; _g_x: def byte 4 <- reg int32_t t14
		reg int t16 <- global int squ; _g_squ: def byte 4
		print reg int t16
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 138571679816144 {
		parent = 138571679814464
		}
		reg int t20 <- 101
		global int x; _g_x: def byte 4 <- reg int t20
		label5: <class 'ir.EmptyStat'> 138571680245792 {
		parent = 138571679814464
		}
		reg int t44 <- global int x; _g_x: def byte 4
		reg int t45 <- 105
		reg int32_t t46 <- reg int t44 leq reg int t45
		branch on not reg int32_t t46 to auto label label6
		reg int t21 <- global int x; _g_x: def byte 4
		reg int t22 <- global int x; _g_x: def byte 4
		reg int t23 <- 100
		reg int32_t t24 <- reg int t22 minus reg int t23
		reg int t25 <- 1
		reg int32_t t26 <- reg int32_t t24 times reg int t25
		reg &char t27 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t28 <- reg &char t27 plus reg int32_t t26
		[reg &char t28] <- reg int t21
		reg int t29 <- global int x; _g_x: def byte 4
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t34 <- reg int32_t t31 times reg int t32
		reg &char t39 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t40 <- reg &char t39 plus reg int32_t t34
		reg char t38 <- [reg &char t40]
		print reg char t38
		reg int t41 <- global int x; _g_x: def byte 4
		reg int t42 <- 1
		reg int32_t t43 <- reg int t41 plus reg int t42
		global int x; _g_x: def byte 4 <- reg int32_t t43
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 138571679817440 {
		parent = 138571679814464
		}
		reg int t47 <- 1
		global int x; _g_x: def byte 4 <- reg int t47
		reg int t48 <- 1
		global int y; _g_y: def byte 4 <- reg int t48
		label9: <class 'ir.EmptyStat'> 138571680188736 {
		parent = 138571679814464
		}
		reg int t88 <- global int x; _g_x: def byte 4
		reg int t89 <- 5
		reg int32_t t90 <- reg int t88 leq reg int t89
		branch on not reg int32_t t90 to auto label label10
		label7: <class 'ir.EmptyStat'> 138571680187968 {
		parent = 138571679814464
		}
		reg int t85 <- global int y; _g_y: def byte 4
		reg int t86 <- 5
		reg int32_t t87 <- reg int t85 leq reg int t86
		branch on not reg int32_t t87 to auto label label8
		reg int t49 <- global int x; _g_x: def byte 4
		reg int t50 <- 1
		reg int32_t t52 <- reg int t49 times reg int t50
		reg &char t54 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t55 <- reg &char t54 plus reg int32_t t52
		reg char t53 <- [reg &char t55]
		reg int t56 <- global int x; _g_x: def byte 4
		reg int t57 <- 10
		reg int32_t t58 <- reg int t56 times reg int t57
		reg int t59 <- global int y; _g_y: def byte 4
		reg int t60 <- 2
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
		reg &short t63 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t64 <- reg &short t63 plus reg int32_t t62
		[reg &short t64] <- reg char t53
		reg int t65 <- global int x; _g_x: def byte 4
		reg int t66 <- 10
		reg int32_t t67 <- reg int t65 times reg int t66
		reg int t68 <- global int y; _g_y: def byte 4
		reg int t69 <- 2
		reg int32_t t70 <- reg int t68 times reg int t69
		reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
		reg &short t77 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t78 <- reg &short t77 plus reg int32_t t72
		reg short t76 <- [reg &short t78]
		print reg short t76
		reg int t79 <- global int x; _g_x: def byte 4
		reg int t80 <- 1
		reg int32_t t81 <- reg int t79 plus reg int t80
		global int x; _g_x: def byte 4 <- reg int32_t t81
		reg int t82 <- global int y; _g_y: def byte 4
		reg int t83 <- 1
		reg int32_t t84 <- reg int t82 plus reg int t83
		global int y; _g_y: def byte 4 <- reg int32_t t84
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 138571680071888 {
		parent = 138571679814464
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 138571680273072 {
		parent = 138571679814464
		}
		<class 'ir.AssignStat'> 138571680075680 {
		parent = 138571679814464
			symbol: 	auto int a
			expr: 	<class 'ir.Const'> 138571680074864 {
			parent = 138571680075680
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label11: <class 'ir.EmptyStat'> 138571680161856 {
		parent = 138571679814464
		}
		reg int t96 <- auto int a
		reg int t97 <- 20
		reg int32_t t98 <- reg int t96 leq reg int t97
		branch on not reg int32_t t98 to auto label label13
		reg int t92 <- auto int a
		print reg int t92
		reg int t93 <- auto int a
		reg int t94 <- 1
		reg int32_t t95 <- reg int t93 plus reg int t94
		auto int a <- reg int32_t t95
		branch  to auto label label11
		label13: <class 'ir.EmptyStat'> 138571680075104 {
		parent = 138571679814464
		}
		reg int t99 <- 10
		global int i; _g_i: def byte 4 <- reg int t99
		reg int t101 <- 99991
		print reg int t101
		<class 'ir.AssignStat'> 138571680533184 {
		parent = 138571679814464
			symbol: 	auto int i
			expr: 	<class 'ir.Const'> 138571680533664 {
			parent = 138571680533184
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label14: <class 'ir.EmptyStat'> 138571680163008 {
		parent = 138571679814464
		}
		reg int t107 <- auto int i
		reg int t108 <- 15
		reg int32_t t109 <- reg int t107 leq reg int t108
		branch on not reg int32_t t109 to auto label label16
		reg int t103 <- global int i; _g_i: def byte 4
		print reg int t103
		reg int t104 <- auto int i
		reg int t105 <- 1
		reg int32_t t106 <- reg int t104 plus reg int t105
		auto int i <- reg int32_t t106
		branch  to auto label label14
		label16: <class 'ir.EmptyStat'> 138571680189552 {
		parent = 138571679814464
		}
		reg int t111 <- 88881
		print reg int t111
		reg int t113 <- 99992
		print reg int t113
		<class 'ir.AssignStat'> 138571680531648 {
		parent = 138571679814464
			symbol: 	auto int j
			expr: 	<class 'ir.Const'> 138571680532128 {
			parent = 138571680531648
				value: 	5
				symbol: 	None
			}
			offset: 	None
		}
		label17: <class 'ir.EmptyStat'> 138571680163920 {
		parent = 138571679814464
		}
		reg int t119 <- auto int j
		reg int t120 <- 5
		reg int32_t t121 <- reg int t119 leq reg int t120
		branch on not reg int32_t t121 to auto label label19
		reg int t115 <- global int j; _g_j: def byte 4
		print reg int t115
		reg int t116 <- auto int j
		reg int t117 <- 1
		reg int32_t t118 <- reg int t116 plus reg int t117
		auto int j <- reg int32_t t118
		branch  to auto label label17
		label19: <class 'ir.EmptyStat'> 138571680531984 {
		parent = 138571679814464
		}
		reg int t123 <- 88882
		print reg int t123
		reg int t125 <- 99993
		print reg int t125
		<class 'ir.AssignStat'> 138571680432720 {
		parent = 138571679814464
			symbol: 	auto int k
			expr: 	<class 'ir.Const'> 138571680530592 {
			parent = 138571680432720
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label20: <class 'ir.EmptyStat'> 138571680149568 {
		parent = 138571679814464
		}
		reg int t133 <- auto int k
		reg int t134 <- 5
		reg int32_t t135 <- reg int t133 leq reg int t134
		branch on not reg int32_t t135 to auto label label22
		reg int t127 <- 77777
		print reg int t127
		reg int t129 <- global int k; _g_k: def byte 4
		print reg int t129
		reg int t130 <- auto int k
		reg int t131 <- 1
		reg int32_t t132 <- reg int t130 plus reg int t131
		auto int k <- reg int32_t t132
		branch  to auto label label20
		label22: <class 'ir.EmptyStat'> 138571680432336 {
		parent = 138571679814464
		}
		reg int t137 <- 88883
		print reg int t137
		reg int t139 <- 99994
		print reg int t139
		<class 'ir.AssignStat'> 138571680436080 {
		parent = 138571679814464
			symbol: 	auto int m
			expr: 	<class 'ir.Const'> 138571680433824 {
			parent = 138571680436080
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label23: <class 'ir.EmptyStat'> 138571680149760 {
		parent = 138571679814464
		}
		reg int t145 <- auto int m
		reg int t146 <- 6
		reg int32_t t147 <- reg int t145 leq reg int t146
		branch on not reg int32_t t147 to auto label label25
		reg int t141 <- global int m; _g_m: def byte 4
		print reg int t141
		reg int t142 <- auto int m
		reg int t143 <- 1
		reg int32_t t144 <- reg int t142 plus reg int t143
		auto int m <- reg int32_t t144
		branch  to auto label label23
		label25: <class 'ir.EmptyStat'> 138571680434016 {
		parent = 138571679814464
		}
		reg int t149 <- 88884
		print reg int t149
		reg int t151 <- 99995
		print reg int t151
		<class 'ir.AssignStat'> 138571680434544 {
		parent = 138571679814464
			symbol: 	auto int n
			expr: 	<class 'ir.Const'> 138571680435024 {
			parent = 138571680434544
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label26: <class 'ir.EmptyStat'> 138571680130480 {
		parent = 138571679814464
		}
		reg int t157 <- auto int n
		reg int t158 <- 7
		reg int32_t t159 <- reg int t157 leq reg int t158
		branch on not reg int32_t t159 to auto label label28
		reg int t153 <- global int n; _g_n: def byte 4
		print reg int t153
		reg int t154 <- auto int n
		reg int t155 <- 1
		reg int32_t t156 <- reg int t154 plus reg int t155
		auto int n <- reg int32_t t156
		branch  to auto label label26
		label28: <class 'ir.EmptyStat'> 138571680434880 {
		parent = 138571679814464
		}
		reg int t161 <- 88885
		print reg int t161
		reg int t163 <- 99996
		print reg int t163
		<class 'ir.AssignStat'> 138571680347376 {
		parent = 138571679814464
			symbol: 	auto int p
			expr: 	<class 'ir.Const'> 138571680346896 {
			parent = 138571680347376
				value: 	10
				symbol: 	None
			}
			offset: 	None
		}
		label29: <class 'ir.EmptyStat'> 138571679801504 {
		parent = 138571679814464
		}
		reg int t169 <- auto int p
		reg int t170 <- 12
		reg int32_t t171 <- reg int t169 leq reg int t170
		branch on not reg int32_t t171 to auto label label31
		reg int t165 <- global int p; _g_p: def byte 4
		print reg int t165
		reg int t166 <- auto int p
		reg int t167 <- 1
		reg int32_t t168 <- reg int t166 plus reg int t167
		auto int p <- reg int32_t t168
		branch  to auto label label29
		label31: <class 'ir.EmptyStat'> 138571680347136 {
		parent = 138571679814464
		}
		reg int t173 <- 88886
		print reg int t173
		reg int t174 <- 0
		global int sum; _g_sum: def byte 4 <- reg int t174
		reg int t176 <- 99997
		print reg int t176
		<class 'ir.AssignStat'> 138571680349584 {
		parent = 138571679814464
			symbol: 	auto int q
			expr: 	<class 'ir.Const'> 138571680348528 {
			parent = 138571680349584
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label32: <class 'ir.EmptyStat'> 138571679805552 {
		parent = 138571679814464
		}
		reg int t187 <- auto int q
		reg int t188 <- 5
		reg int32_t t189 <- reg int t187 leq reg int t188
		branch on not reg int32_t t189 to auto label label34
		reg int t177 <- global int sum; _g_sum: def byte 4
		reg int t178 <- global int q; _g_q: def byte 4
		reg int32_t t179 <- reg int t177 plus reg int t178
		global int sum; _g_sum: def byte 4 <- reg int32_t t179
		reg int t181 <- global int q; _g_q: def byte 4
		print reg int t181
		reg int t183 <- global int sum; _g_sum: def byte 4
		print reg int t183
		reg int t184 <- auto int q
		reg int t185 <- 1
		reg int32_t t186 <- reg int t184 plus reg int t185
		auto int q <- reg int32_t t186
		branch  to auto label label32
		label34: <class 'ir.EmptyStat'> 138571680348672 {
		parent = 138571679814464
		}
		reg int t191 <- global int sum; _g_sum: def byte 4
		print reg int t191
		reg int t193 <- 88887
		print reg int t193
		reg int t194 <- 100
		global int x; _g_x: def byte 4 <- reg int t194
		reg int t196 <- 99998
		print reg int t196
		<class 'ir.AssignStat'> 138571680770512 {
		parent = 138571679814464
			symbol: 	auto int r
			expr: 	<class 'ir.Const'> 138571680771760 {
			parent = 138571680770512
				value: 	1
				symbol: 	None
			}
			offset: 	None
		}
		label35: <class 'ir.EmptyStat'> 138571679842368 {
		parent = 138571679814464
		}
		reg int t205 <- auto int r
		reg int t206 <- 3
		reg int32_t t207 <- reg int t205 leq reg int t206
		branch on not reg int32_t t207 to auto label label37
		reg int t197 <- global int x; _g_x: def byte 4
		reg int t198 <- global int r; _g_r: def byte 4
		reg int32_t t199 <- reg int t197 plus reg int t198
		global int x; _g_x: def byte 4 <- reg int32_t t199
		reg int t201 <- global int x; _g_x: def byte 4
		print reg int t201
		reg int t202 <- auto int r
		reg int t203 <- 1
		reg int32_t t204 <- reg int t202 plus reg int t203
		auto int r <- reg int32_t t204
		branch  to auto label label35
		label37: <class 'ir.EmptyStat'> 138571680771616 {
		parent = 138571679814464
		}
		reg int t209 <- global int x; _g_x: def byte 4
		print reg int t209
		reg int t211 <- 88888
		print reg int t211
		reg int t213 <- 999990
		print reg int t213
		reg int t214 <- 0
		global int sm_idx; _g_sm_idx: def byte 4 <- reg int t214
		<class 'ir.AssignStat'> 138571680288528 {
		parent = 138571679814464
			symbol: 	auto int sm_idx
			expr: 	<class 'ir.Const'> 138571680306416 {
			parent = 138571680288528
				value: 	0
				symbol: 	None
			}
			offset: 	None
		}
		label38: <class 'ir.EmptyStat'> 138571679868384 {
		parent = 138571679814464
		}
		reg int t232 <- auto int sm_idx
		reg int t233 <- 127
		reg int32_t t234 <- reg int t232 leq reg int t233
		branch on not reg int32_t t234 to auto label label40
		reg int t215 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int t216 <- 4
		reg int32_t t218 <- reg int t215 times reg int t216
		reg &int t220 <- &(global int[128] sm_source_arr; _g_sm_source_arr: def byte 512)
		reg &int t221 <- reg &int t220 plus reg int32_t t218
		reg int t219 <- [reg &int t221]
		reg int t222 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int32_t t223 <- reg int t219 plus reg int t222
		reg int t224 <- global int sm_idx; _g_sm_idx: def byte 4
		reg int t225 <- 4
		reg int32_t t226 <- reg int t224 times reg int t225
		reg &int t227 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t228 <- reg &int t227 plus reg int32_t t226
		[reg &int t228] <- reg int32_t t223
		reg int t229 <- auto int sm_idx
		reg int t230 <- 1
		reg int32_t t231 <- reg int t229 plus reg int t230
		auto int sm_idx <- reg int32_t t231
		branch  to auto label label38
		label40: <class 'ir.EmptyStat'> 138571680306560 {
		parent = 138571679814464
		}
		reg int t267 <- 127
		reg int t268 <- 0
		reg int32_t t269 <- reg int t267 geq reg int t268
		branch on not reg int32_t t269 to auto label label41
		reg int t236 <- 76543
		print reg int t236
		reg int t237 <- 0
		reg int t238 <- 4
		reg int32_t t240 <- reg int t237 times reg int t238
		reg &int t245 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t246 <- reg &int t245 plus reg int32_t t240
		reg int t244 <- [reg &int t246]
		print reg int t244
		reg int t247 <- 64
		reg int t248 <- 4
		reg int32_t t250 <- reg int t247 times reg int t248
		reg &int t255 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t256 <- reg &int t255 plus reg int32_t t250
		reg int t254 <- [reg &int t256]
		print reg int t254
		reg int t257 <- 127
		reg int t258 <- 4
		reg int32_t t260 <- reg int t257 times reg int t258
		reg &int t265 <- &(global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512)
		reg &int t266 <- reg &int t265 plus reg int32_t t260
		reg int t264 <- [reg &int t266]
		print reg int t264
		label41: <class 'ir.EmptyStat'> 138571680308432 {
		parent = 138571679814464
		}
		reg int t271 <- 888880
		print reg int t271
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 138571681090576 {
	parent = 138571680253168
		children:
		<class 'ir.FunctionDef'> 138571679814368 {
		parent = 138571681090576
			body: 	<class 'ir.Block'> 138571680285696 {
			parent = 138571679814368
				body: 	<class 'ir.StatList'> 138571679813696 {
				parent = 138571680285696
					children:
					reg int t272 <- 1234
					auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t272
					reg int t273 <- global int x; _g_x: def byte 4
					reg int t274 <- global int x; _g_x: def byte 4
					reg int32_t t275 <- reg int t273 times reg int t274
					global int squ; _g_squ: def byte 4 <- reg int32_t t275
				}
				global_symtab: 	SymbolTable:
				global int x; _g_x: def byte 4
				global int y; _g_y: def byte 4
				global int squ; _g_squ: def byte 4
				global char[5] arr; _g_arr: def byte 5
				global short[5, 5] multid; _g_multid: def byte 50
				global int i; _g_i: def byte 4
				global int j; _g_j: def byte 4
				global int k; _g_k: def byte 4
				global int m; _g_m: def byte 4
				global int n; _g_n: def byte 4
				global int p; _g_p: def byte 4
				global int q; _g_q: def byte 4
				global int sum; _g_sum: def byte 4
				global int r; _g_r: def byte 4
				global int sm_idx; _g_sm_idx: def byte 4
				global int[128] sm_source_arr; _g_sm_source_arr: def byte 512
				global int[128] sm_dest_arr; _g_sm_dest_arr: def byte 512
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 138571680288624 {
				parent = 138571680285696
				}
			}
			symbol: 	auto function square
		}
	}
}

--- Constructing CFG ---
DEBUG: Starting CFG construction...
DEBUG: Found 2 StatLists
DEBUG: Processing StatList 0
DEBUG: Converting StatList with 357 statements
DEBUG: Processing instruction 0: LoadImmStat
DEBUG: Processing instruction 1: UnaryStat
DEBUG: Processing instruction 2: StoreStat
DEBUG: Processing instruction 3: ReadCommand
DEBUG: Processing instruction 4: StoreStat
DEBUG: Processing instruction 5: LoadStat
DEBUG: Processing instruction 6: LoadImmStat
DEBUG: Processing instruction 7: BinStat
DEBUG: Processing instruction 8: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label2
DEBUG: Created BB_138571680132928 ending with branch
DEBUG: Processing instruction 9: LoadStat
DEBUG: Processing instruction 10: PrintCommand
DEBUG: Processing instruction 11: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label1
DEBUG: Created BB_138571680132832 ending with branch
DEBUG: Processing instruction 12: EmptyStat
DEBUG: Found label: label2
DEBUG: Processing instruction 13: LoadStat
DEBUG: Processing instruction 14: UnaryStat
DEBUG: Processing instruction 15: PrintCommand
DEBUG: Processing instruction 16: EmptyStat
DEBUG: Found label: label1
DEBUG: Created BB_138571680132880 with 4 instructions
DEBUG: Processing instruction 17: LoadImmStat
DEBUG: Processing instruction 18: StoreStat
DEBUG: Processing instruction 19: EmptyStat
DEBUG: Found label: label3
DEBUG: Created BB_138571680130720 with 3 instructions
DEBUG: Linked BB_138571680132880 -> BB_138571680130720 (fall-through)
DEBUG: Processing instruction 20: LoadStat
DEBUG: Processing instruction 21: LoadImmStat
DEBUG: Processing instruction 22: BinStat
DEBUG: Processing instruction 23: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label4
DEBUG: Created BB_138571680130144 ending with branch
DEBUG: Linked BB_138571680130720 -> BB_138571680130144 (pre-branch)
DEBUG: Processing instruction 24: BranchStat
DEBUG: Found branch instruction:
  - Returns: True
  - Has condition: False
  - Target: auto function square
DEBUG: Created BB_138571680130192 ending with branch
DEBUG: Processing instruction 25: LoadStat
DEBUG: Processing instruction 26: LoadImmStat
DEBUG: Processing instruction 27: BinStat
DEBUG: Processing instruction 28: StoreStat
DEBUG: Processing instruction 29: LoadStat
DEBUG: Processing instruction 30: PrintCommand
DEBUG: Processing instruction 31: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label3
DEBUG: Created BB_138571680130048 ending with branch
DEBUG: Linked BB_138571680130192 -> BB_138571680130048 (pre-branch)
DEBUG: Processing instruction 32: EmptyStat
DEBUG: Found label: label4
DEBUG: Processing instruction 33: LoadImmStat
DEBUG: Processing instruction 34: StoreStat
DEBUG: Processing instruction 35: EmptyStat
DEBUG: Found label: label5
DEBUG: Created BB_138571680130672 with 3 instructions
DEBUG: Processing instruction 36: LoadStat
DEBUG: Processing instruction 37: LoadImmStat
DEBUG: Processing instruction 38: BinStat
DEBUG: Processing instruction 39: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label6
DEBUG: Created BB_138571680149712 ending with branch
DEBUG: Linked BB_138571680130672 -> BB_138571680149712 (pre-branch)
DEBUG: Processing instruction 40: LoadStat
DEBUG: Processing instruction 41: LoadStat
DEBUG: Processing instruction 42: LoadImmStat
DEBUG: Processing instruction 43: BinStat
DEBUG: Processing instruction 44: LoadImmStat
DEBUG: Processing instruction 45: BinStat
DEBUG: Processing instruction 46: LoadPtrToSym
DEBUG: Processing instruction 47: BinStat
DEBUG: Processing instruction 48: StoreStat
DEBUG: Processing instruction 49: LoadStat
DEBUG: Processing instruction 50: LoadImmStat
DEBUG: Processing instruction 51: BinStat
DEBUG: Processing instruction 52: LoadImmStat
DEBUG: Processing instruction 53: BinStat
DEBUG: Processing instruction 54: LoadPtrToSym
DEBUG: Processing instruction 55: BinStat
DEBUG: Processing instruction 56: LoadStat
DEBUG: Processing instruction 57: PrintCommand
DEBUG: Processing instruction 58: LoadStat
DEBUG: Processing instruction 59: LoadImmStat
DEBUG: Processing instruction 60: BinStat
DEBUG: Processing instruction 61: StoreStat
DEBUG: Processing instruction 62: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label5
DEBUG: Created BB_138571680151872 ending with branch
DEBUG: Processing instruction 63: EmptyStat
DEBUG: Found label: label6
DEBUG: Processing instruction 64: LoadImmStat
DEBUG: Processing instruction 65: StoreStat
DEBUG: Processing instruction 66: LoadImmStat
DEBUG: Processing instruction 67: StoreStat
DEBUG: Processing instruction 68: EmptyStat
DEBUG: Found label: label9
DEBUG: Created BB_138571680151824 with 5 instructions
DEBUG: Processing instruction 69: LoadStat
DEBUG: Processing instruction 70: LoadImmStat
DEBUG: Processing instruction 71: BinStat
DEBUG: Processing instruction 72: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label10
DEBUG: Created BB_138571680151920 ending with branch
DEBUG: Linked BB_138571680151824 -> BB_138571680151920 (pre-branch)
DEBUG: Processing instruction 73: EmptyStat
DEBUG: Found label: label7
DEBUG: Processing instruction 74: LoadStat
DEBUG: Processing instruction 75: LoadImmStat
DEBUG: Processing instruction 76: BinStat
DEBUG: Processing instruction 77: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label8
DEBUG: Created BB_138571680152352 ending with branch
DEBUG: Processing instruction 78: LoadStat
DEBUG: Processing instruction 79: LoadImmStat
DEBUG: Processing instruction 80: BinStat
DEBUG: Processing instruction 81: LoadPtrToSym
DEBUG: Processing instruction 82: BinStat
DEBUG: Processing instruction 83: LoadStat
DEBUG: Processing instruction 84: LoadStat
DEBUG: Processing instruction 85: LoadImmStat
DEBUG: Processing instruction 86: BinStat
DEBUG: Processing instruction 87: LoadStat
DEBUG: Processing instruction 88: LoadImmStat
DEBUG: Processing instruction 89: BinStat
DEBUG: Processing instruction 90: BinStat
DEBUG: Processing instruction 91: LoadPtrToSym
DEBUG: Processing instruction 92: BinStat
DEBUG: Processing instruction 93: StoreStat
DEBUG: Processing instruction 94: LoadStat
DEBUG: Processing instruction 95: LoadImmStat
DEBUG: Processing instruction 96: BinStat
DEBUG: Processing instruction 97: LoadStat
DEBUG: Processing instruction 98: LoadImmStat
DEBUG: Processing instruction 99: BinStat
DEBUG: Processing instruction 100: BinStat
DEBUG: Processing instruction 101: LoadPtrToSym
DEBUG: Processing instruction 102: BinStat
DEBUG: Processing instruction 103: LoadStat
DEBUG: Processing instruction 104: PrintCommand
DEBUG: Processing instruction 105: LoadStat
DEBUG: Processing instruction 106: LoadImmStat
DEBUG: Processing instruction 107: BinStat
DEBUG: Processing instruction 108: StoreStat
DEBUG: Processing instruction 109: LoadStat
DEBUG: Processing instruction 110: LoadImmStat
DEBUG: Processing instruction 111: BinStat
DEBUG: Processing instruction 112: StoreStat
DEBUG: Processing instruction 113: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label7
DEBUG: Created BB_138571680151968 ending with branch
DEBUG: Processing instruction 114: EmptyStat
DEBUG: Found label: label8
DEBUG: Processing instruction 115: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label9
DEBUG: Created BB_138571680152496 ending with branch
DEBUG: Processing instruction 116: EmptyStat
DEBUG: Found label: label10
DEBUG: Processing instruction 117: AssignStat
DEBUG: Processing instruction 118: EmptyStat
DEBUG: Found label: label11
DEBUG: Created BB_138571680152448 with 2 instructions
DEBUG: Processing instruction 119: LoadStat
DEBUG: Processing instruction 120: LoadImmStat
DEBUG: Processing instruction 121: BinStat
DEBUG: Processing instruction 122: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label13
DEBUG: Created BB_138571680163152 ending with branch
DEBUG: Linked BB_138571680152448 -> BB_138571680163152 (pre-branch)
DEBUG: Processing instruction 123: LoadStat
DEBUG: Processing instruction 124: PrintCommand
DEBUG: Processing instruction 125: LoadStat
DEBUG: Processing instruction 126: LoadImmStat
DEBUG: Processing instruction 127: BinStat
DEBUG: Processing instruction 128: StoreStat
DEBUG: Processing instruction 129: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label11
DEBUG: Created BB_138571680163248 ending with branch
DEBUG: Processing instruction 130: EmptyStat
DEBUG: Found label: label13
DEBUG: Processing instruction 131: LoadImmStat
DEBUG: Processing instruction 132: StoreStat
DEBUG: Processing instruction 133: LoadImmStat
DEBUG: Processing instruction 134: PrintCommand
DEBUG: Processing instruction 135: AssignStat
DEBUG: Processing instruction 136: EmptyStat
DEBUG: Found label: label14
DEBUG: Created BB_138571680165408 with 6 instructions
DEBUG: Processing instruction 137: LoadStat
DEBUG: Processing instruction 138: LoadImmStat
DEBUG: Processing instruction 139: BinStat
DEBUG: Processing instruction 140: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label16
DEBUG: Created BB_138571680165456 ending with branch
DEBUG: Linked BB_138571680165408 -> BB_138571680165456 (pre-branch)
DEBUG: Processing instruction 141: LoadStat
DEBUG: Processing instruction 142: PrintCommand
DEBUG: Processing instruction 143: LoadStat
DEBUG: Processing instruction 144: LoadImmStat
DEBUG: Processing instruction 145: BinStat
DEBUG: Processing instruction 146: StoreStat
DEBUG: Processing instruction 147: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label14
DEBUG: Created BB_138571680162960 ending with branch
DEBUG: Processing instruction 148: EmptyStat
DEBUG: Found label: label16
DEBUG: Processing instruction 149: LoadImmStat
DEBUG: Processing instruction 150: PrintCommand
DEBUG: Processing instruction 151: LoadImmStat
DEBUG: Processing instruction 152: PrintCommand
DEBUG: Processing instruction 153: AssignStat
DEBUG: Processing instruction 154: EmptyStat
DEBUG: Found label: label17
DEBUG: Created BB_138571680165504 with 6 instructions
DEBUG: Processing instruction 155: LoadStat
DEBUG: Processing instruction 156: LoadImmStat
DEBUG: Processing instruction 157: BinStat
DEBUG: Processing instruction 158: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label19
DEBUG: Created BB_138571680165552 ending with branch
DEBUG: Linked BB_138571680165504 -> BB_138571680165552 (pre-branch)
DEBUG: Processing instruction 159: LoadStat
DEBUG: Processing instruction 160: PrintCommand
DEBUG: Processing instruction 161: LoadStat
DEBUG: Processing instruction 162: LoadImmStat
DEBUG: Processing instruction 163: BinStat
DEBUG: Processing instruction 164: StoreStat
DEBUG: Processing instruction 165: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label17
DEBUG: Created BB_138571680163488 ending with branch
DEBUG: Processing instruction 166: EmptyStat
DEBUG: Found label: label19
DEBUG: Processing instruction 167: LoadImmStat
DEBUG: Processing instruction 168: PrintCommand
DEBUG: Processing instruction 169: LoadImmStat
DEBUG: Processing instruction 170: PrintCommand
DEBUG: Processing instruction 171: AssignStat
DEBUG: Processing instruction 172: EmptyStat
DEBUG: Found label: label20
DEBUG: Created BB_138571680163968 with 6 instructions
DEBUG: Processing instruction 173: LoadStat
DEBUG: Processing instruction 174: LoadImmStat
DEBUG: Processing instruction 175: BinStat
DEBUG: Processing instruction 176: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label22
DEBUG: Created BB_138571680164016 ending with branch
DEBUG: Linked BB_138571680163968 -> BB_138571680164016 (pre-branch)
DEBUG: Processing instruction 177: LoadImmStat
DEBUG: Processing instruction 178: PrintCommand
DEBUG: Processing instruction 179: LoadStat
DEBUG: Processing instruction 180: PrintCommand
DEBUG: Processing instruction 181: LoadStat
DEBUG: Processing instruction 182: LoadImmStat
DEBUG: Processing instruction 183: BinStat
DEBUG: Processing instruction 184: StoreStat
DEBUG: Processing instruction 185: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label20
DEBUG: Created BB_138571680163584 ending with branch
DEBUG: Processing instruction 186: EmptyStat
DEBUG: Found label: label22
DEBUG: Processing instruction 187: LoadImmStat
DEBUG: Processing instruction 188: PrintCommand
DEBUG: Processing instruction 189: LoadImmStat
DEBUG: Processing instruction 190: PrintCommand
DEBUG: Processing instruction 191: AssignStat
DEBUG: Processing instruction 192: EmptyStat
DEBUG: Found label: label23
DEBUG: Created BB_138571680164400 with 6 instructions
DEBUG: Processing instruction 193: LoadStat
DEBUG: Processing instruction 194: LoadImmStat
DEBUG: Processing instruction 195: BinStat
DEBUG: Processing instruction 196: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label25
DEBUG: Created BB_138571680164544 ending with branch
DEBUG: Linked BB_138571680164400 -> BB_138571680164544 (pre-branch)
DEBUG: Processing instruction 197: LoadStat
DEBUG: Processing instruction 198: PrintCommand
DEBUG: Processing instruction 199: LoadStat
DEBUG: Processing instruction 200: LoadImmStat
DEBUG: Processing instruction 201: BinStat
DEBUG: Processing instruction 202: StoreStat
DEBUG: Processing instruction 203: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label23
DEBUG: Created BB_138571680162000 ending with branch
DEBUG: Processing instruction 204: EmptyStat
DEBUG: Found label: label25
DEBUG: Processing instruction 205: LoadImmStat
DEBUG: Processing instruction 206: PrintCommand
DEBUG: Processing instruction 207: LoadImmStat
DEBUG: Processing instruction 208: PrintCommand
DEBUG: Processing instruction 209: AssignStat
DEBUG: Processing instruction 210: EmptyStat
DEBUG: Found label: label26
DEBUG: Created BB_138571680164496 with 6 instructions
DEBUG: Processing instruction 211: LoadStat
DEBUG: Processing instruction 212: LoadImmStat
DEBUG: Processing instruction 213: BinStat
DEBUG: Processing instruction 214: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label28
DEBUG: Created BB_138571680162048 ending with branch
DEBUG: Linked BB_138571680164496 -> BB_138571680162048 (pre-branch)
DEBUG: Processing instruction 215: LoadStat
DEBUG: Processing instruction 216: PrintCommand
DEBUG: Processing instruction 217: LoadStat
DEBUG: Processing instruction 218: LoadImmStat
DEBUG: Processing instruction 219: BinStat
DEBUG: Processing instruction 220: StoreStat
DEBUG: Processing instruction 221: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label26
DEBUG: Created BB_138571680189072 ending with branch
DEBUG: Processing instruction 222: EmptyStat
DEBUG: Found label: label28
DEBUG: Processing instruction 223: LoadImmStat
DEBUG: Processing instruction 224: PrintCommand
DEBUG: Processing instruction 225: LoadImmStat
DEBUG: Processing instruction 226: PrintCommand
DEBUG: Processing instruction 227: AssignStat
DEBUG: Processing instruction 228: EmptyStat
DEBUG: Found label: label29
DEBUG: Created BB_138571680189984 with 6 instructions
DEBUG: Processing instruction 229: LoadStat
DEBUG: Processing instruction 230: LoadImmStat
DEBUG: Processing instruction 231: BinStat
DEBUG: Processing instruction 232: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label31
DEBUG: Created BB_138571680190032 ending with branch
DEBUG: Linked BB_138571680189984 -> BB_138571680190032 (pre-branch)
DEBUG: Processing instruction 233: LoadStat
DEBUG: Processing instruction 234: PrintCommand
DEBUG: Processing instruction 235: LoadStat
DEBUG: Processing instruction 236: LoadImmStat
DEBUG: Processing instruction 237: BinStat
DEBUG: Processing instruction 238: StoreStat
DEBUG: Processing instruction 239: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label29
DEBUG: Created BB_138571680190080 ending with branch
DEBUG: Processing instruction 240: EmptyStat
DEBUG: Found label: label31
DEBUG: Processing instruction 241: LoadImmStat
DEBUG: Processing instruction 242: PrintCommand
DEBUG: Processing instruction 243: LoadImmStat
DEBUG: Processing instruction 244: StoreStat
DEBUG: Processing instruction 245: LoadImmStat
DEBUG: Processing instruction 246: PrintCommand
DEBUG: Processing instruction 247: AssignStat
DEBUG: Processing instruction 248: EmptyStat
DEBUG: Found label: label32
DEBUG: Created BB_138571680190128 with 8 instructions
DEBUG: Processing instruction 249: LoadStat
DEBUG: Processing instruction 250: LoadImmStat
DEBUG: Processing instruction 251: BinStat
DEBUG: Processing instruction 252: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label34
DEBUG: Created BB_138571680189648 ending with branch
DEBUG: Linked BB_138571680190128 -> BB_138571680189648 (pre-branch)
DEBUG: Processing instruction 253: LoadStat
DEBUG: Processing instruction 254: LoadStat
DEBUG: Processing instruction 255: BinStat
DEBUG: Processing instruction 256: StoreStat
DEBUG: Processing instruction 257: LoadStat
DEBUG: Processing instruction 258: PrintCommand
DEBUG: Processing instruction 259: LoadStat
DEBUG: Processing instruction 260: PrintCommand
DEBUG: Processing instruction 261: LoadStat
DEBUG: Processing instruction 262: LoadImmStat
DEBUG: Processing instruction 263: BinStat
DEBUG: Processing instruction 264: StoreStat
DEBUG: Processing instruction 265: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label32
DEBUG: Created BB_138571680189600 ending with branch
DEBUG: Processing instruction 266: EmptyStat
DEBUG: Found label: label34
DEBUG: Processing instruction 267: LoadStat
DEBUG: Processing instruction 268: PrintCommand
DEBUG: Processing instruction 269: LoadImmStat
DEBUG: Processing instruction 270: PrintCommand
DEBUG: Processing instruction 271: LoadImmStat
DEBUG: Processing instruction 272: StoreStat
DEBUG: Processing instruction 273: LoadImmStat
DEBUG: Processing instruction 274: PrintCommand
DEBUG: Processing instruction 275: AssignStat
DEBUG: Processing instruction 276: EmptyStat
DEBUG: Found label: label35
DEBUG: Created BB_138571680189024 with 10 instructions
DEBUG: Processing instruction 277: LoadStat
DEBUG: Processing instruction 278: LoadImmStat
DEBUG: Processing instruction 279: BinStat
DEBUG: Processing instruction 280: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label37
DEBUG: Created BB_138571680189360 ending with branch
DEBUG: Linked BB_138571680189024 -> BB_138571680189360 (pre-branch)
DEBUG: Processing instruction 281: LoadStat
DEBUG: Processing instruction 282: LoadStat
DEBUG: Processing instruction 283: BinStat
DEBUG: Processing instruction 284: StoreStat
DEBUG: Processing instruction 285: LoadStat
DEBUG: Processing instruction 286: PrintCommand
DEBUG: Processing instruction 287: LoadStat
DEBUG: Processing instruction 288: LoadImmStat
DEBUG: Processing instruction 289: BinStat
DEBUG: Processing instruction 290: StoreStat
DEBUG: Processing instruction 291: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label35
DEBUG: Created BB_138571680188832 ending with branch
DEBUG: Processing instruction 292: EmptyStat
DEBUG: Found label: label37
DEBUG: Processing instruction 293: LoadStat
DEBUG: Processing instruction 294: PrintCommand
DEBUG: Processing instruction 295: LoadImmStat
DEBUG: Processing instruction 296: PrintCommand
DEBUG: Processing instruction 297: LoadImmStat
DEBUG: Processing instruction 298: PrintCommand
DEBUG: Processing instruction 299: LoadImmStat
DEBUG: Processing instruction 300: StoreStat
DEBUG: Processing instruction 301: AssignStat
DEBUG: Processing instruction 302: EmptyStat
DEBUG: Found label: label38
DEBUG: Created BB_138571680188640 with 10 instructions
DEBUG: Processing instruction 303: LoadStat
DEBUG: Processing instruction 304: LoadImmStat
DEBUG: Processing instruction 305: BinStat
DEBUG: Processing instruction 306: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label40
DEBUG: Created BB_138571680188880 ending with branch
DEBUG: Linked BB_138571680188640 -> BB_138571680188880 (pre-branch)
DEBUG: Processing instruction 307: LoadStat
DEBUG: Processing instruction 308: LoadImmStat
DEBUG: Processing instruction 309: BinStat
DEBUG: Processing instruction 310: LoadPtrToSym
DEBUG: Processing instruction 311: BinStat
DEBUG: Processing instruction 312: LoadStat
DEBUG: Processing instruction 313: LoadStat
DEBUG: Processing instruction 314: BinStat
DEBUG: Processing instruction 315: LoadStat
DEBUG: Processing instruction 316: LoadImmStat
DEBUG: Processing instruction 317: BinStat
DEBUG: Processing instruction 318: LoadPtrToSym
DEBUG: Processing instruction 319: BinStat
DEBUG: Processing instruction 320: StoreStat
DEBUG: Processing instruction 321: LoadStat
DEBUG: Processing instruction 322: LoadImmStat
DEBUG: Processing instruction 323: BinStat
DEBUG: Processing instruction 324: StoreStat
DEBUG: Processing instruction 325: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: False
  - Target: auto label label38
DEBUG: Created BB_138571680188304 ending with branch
DEBUG: Processing instruction 326: EmptyStat
DEBUG: Found label: label40
DEBUG: Processing instruction 327: LoadImmStat
DEBUG: Processing instruction 328: LoadImmStat
DEBUG: Processing instruction 329: BinStat
DEBUG: Processing instruction 330: BranchStat
DEBUG: Found branch instruction:
  - Returns: False
  - Has condition: True
  - Target: auto label label41
DEBUG: Created BB_138571680188352 ending with branch
DEBUG: Processing instruction 331: LoadImmStat
DEBUG: Processing instruction 332: PrintCommand
DEBUG: Processing instruction 333: LoadImmStat
DEBUG: Processing instruction 334: LoadImmStat
DEBUG: Processing instruction 335: BinStat
DEBUG: Processing instruction 336: LoadPtrToSym
DEBUG: Processing instruction 337: BinStat
DEBUG: Processing instruction 338: LoadStat
DEBUG: Processing instruction 339: PrintCommand
DEBUG: Processing instruction 340: LoadImmStat
DEBUG: Processing instruction 341: LoadImmStat
DEBUG: Processing instruction 342: BinStat
DEBUG: Processing instruction 343: LoadPtrToSym
DEBUG: Processing instruction 344: BinStat
DEBUG: Processing instruction 345: LoadStat
DEBUG: Processing instruction 346: PrintCommand
DEBUG: Processing instruction 347: LoadImmStat
DEBUG: Processing instruction 348: LoadImmStat
DEBUG: Processing instruction 349: BinStat
DEBUG: Processing instruction 350: LoadPtrToSym
DEBUG: Processing instruction 351: BinStat
DEBUG: Processing instruction 352: LoadStat
DEBUG: Processing instruction 353: PrintCommand
DEBUG: Processing instruction 354: EmptyStat
DEBUG: Found label: label41
DEBUG: Created BB_138571680186816 with 23 instructions
DEBUG: Processing instruction 355: LoadImmStat
DEBUG: Processing instruction 356: PrintCommand
DEBUG: Created final BB_138571679802800 with 3 instructions
DEBUG: Linked BB_138571680186816 -> BB_138571679802800 (final)
DEBUG: Created 48 basic blocks total
DEBUG: Processing StatList 1
DEBUG: Converting StatList with 6 statements
DEBUG: Processing instruction 0: LoadImmStat
DEBUG: Processing instruction 1: StoreStat
DEBUG: Processing instruction 2: LoadStat
DEBUG: Processing instruction 3: LoadStat
DEBUG: Processing instruction 4: BinStat
DEBUG: Processing instruction 5: StoreStat
DEBUG: Created final BB_138571680188112 with 6 instructions
DEBUG: Created 1 basic blocks total
DEBUG: CFG created with 49 basic blocks
   Rebuilding ALL CFG links (next, target_bb, preds)...
DEBUG: Built label map with 31 labels
DEBUG: BB_138571680132928 has branch target: auto label label2
DEBUG: BB_138571680132928 resolved target to BB_138571680132880
DEBUG: BB_138571680132832 has branch target: auto label label1
DEBUG: BB_138571680132832 resolved target to BB_138571680130720
DEBUG: Removing useless next from BB_138571680132832 (has unconditional branch)
DEBUG: BB_138571680130144 has branch target: auto label label4
DEBUG: BB_138571680130144 resolved target to BB_138571680130672
DEBUG: Removing useless next from BB_138571680130192 (has unconditional branch)
DEBUG: BB_138571680130048 has branch target: auto label label3
DEBUG: BB_138571680130048 resolved target to BB_138571680130144
DEBUG: Removing useless next from BB_138571680130048 (has unconditional branch)
DEBUG: BB_138571680149712 has branch target: auto label label6
DEBUG: BB_138571680149712 resolved target to BB_138571680151824
DEBUG: BB_138571680151872 has branch target: auto label label5
DEBUG: BB_138571680151872 resolved target to BB_138571680149712
DEBUG: Removing useless next from BB_138571680151872 (has unconditional branch)
DEBUG: BB_138571680151920 has branch target: auto label label10
DEBUG: BB_138571680151920 resolved target to BB_138571680152448
DEBUG: BB_138571680152352 has branch target: auto label label8
DEBUG: BB_138571680152352 resolved target to BB_138571680152496
DEBUG: BB_138571680151968 has branch target: auto label label7
DEBUG: BB_138571680151968 resolved target to BB_138571680152352
DEBUG: Removing useless next from BB_138571680151968 (has unconditional branch)
DEBUG: BB_138571680152496 has branch target: auto label label9
DEBUG: BB_138571680152496 resolved target to BB_138571680151920
DEBUG: Removing useless next from BB_138571680152496 (has unconditional branch)
DEBUG: BB_138571680163152 has branch target: auto label label13
DEBUG: BB_138571680163152 resolved target to BB_138571680165408
DEBUG: BB_138571680163248 has branch target: auto label label11
DEBUG: BB_138571680163248 resolved target to BB_138571680163152
DEBUG: Removing useless next from BB_138571680163248 (has unconditional branch)
DEBUG: BB_138571680165456 has branch target: auto label label16
DEBUG: BB_138571680165456 resolved target to BB_138571680165504
DEBUG: BB_138571680162960 has branch target: auto label label14
DEBUG: BB_138571680162960 resolved target to BB_138571680165456
DEBUG: Removing useless next from BB_138571680162960 (has unconditional branch)
DEBUG: BB_138571680165552 has branch target: auto label label19
DEBUG: BB_138571680165552 resolved target to BB_138571680163968
DEBUG: BB_138571680163488 has branch target: auto label label17
DEBUG: BB_138571680163488 resolved target to BB_138571680165552
DEBUG: Removing useless next from BB_138571680163488 (has unconditional branch)
DEBUG: BB_138571680164016 has branch target: auto label label22
DEBUG: BB_138571680164016 resolved target to BB_138571680164400
DEBUG: BB_138571680163584 has branch target: auto label label20
DEBUG: BB_138571680163584 resolved target to BB_138571680164016
DEBUG: Removing useless next from BB_138571680163584 (has unconditional branch)
DEBUG: BB_138571680164544 has branch target: auto label label25
DEBUG: BB_138571680164544 resolved target to BB_138571680164496
DEBUG: BB_138571680162000 has branch target: auto label label23
DEBUG: BB_138571680162000 resolved target to BB_138571680164544
DEBUG: Removing useless next from BB_138571680162000 (has unconditional branch)
DEBUG: BB_138571680162048 has branch target: auto label label28
DEBUG: BB_138571680162048 resolved target to BB_138571680189984
DEBUG: BB_138571680189072 has branch target: auto label label26
DEBUG: BB_138571680189072 resolved target to BB_138571680162048
DEBUG: Removing useless next from BB_138571680189072 (has unconditional branch)
DEBUG: BB_138571680190032 has branch target: auto label label31
DEBUG: BB_138571680190032 resolved target to BB_138571680190128
DEBUG: BB_138571680190080 has branch target: auto label label29
DEBUG: BB_138571680190080 resolved target to BB_138571680190032
DEBUG: Removing useless next from BB_138571680190080 (has unconditional branch)
DEBUG: BB_138571680189648 has branch target: auto label label34
DEBUG: BB_138571680189648 resolved target to BB_138571680189024
DEBUG: BB_138571680189600 has branch target: auto label label32
DEBUG: BB_138571680189600 resolved target to BB_138571680189648
DEBUG: Removing useless next from BB_138571680189600 (has unconditional branch)
DEBUG: BB_138571680189360 has branch target: auto label label37
DEBUG: BB_138571680189360 resolved target to BB_138571680188640
DEBUG: BB_138571680188832 has branch target: auto label label35
DEBUG: BB_138571680188832 resolved target to BB_138571680189360
DEBUG: Removing useless next from BB_138571680188832 (has unconditional branch)
DEBUG: BB_138571680188880 has branch target: auto label label40
DEBUG: BB_138571680188880 resolved target to BB_138571680188352
DEBUG: BB_138571680188304 has branch target: auto label label38
DEBUG: BB_138571680188304 resolved target to BB_138571680188880
DEBUG: Removing useless next from BB_138571680188304 (has unconditional branch)
DEBUG: BB_138571680188352 has branch target: auto label label41
DEBUG: BB_138571680188352 resolved target to BB_138571679802800
   CFG links rebuild complete.
DEBUG: CFG Link Summary:
  BB_138571680132928: 1 successors, 0 preds
  BB_138571680132832: 1 successors, 0 preds
  BB_138571680130144: 1 successors, 2 preds
  BB_138571680130048: 1 successors, 0 preds
  BB_138571680149712: 1 successors, 2 preds
  BB_138571680151872: 1 successors, 0 preds
  BB_138571680151920: 1 successors, 2 preds
  BB_138571680152352: 1 successors, 1 preds
  BB_138571680151968: 1 successors, 0 preds
  BB_138571680152496: 1 successors, 1 preds
  BB_138571680163152: 1 successors, 2 preds
  BB_138571680163248: 1 successors, 0 preds
  BB_138571680165456: 1 successors, 2 preds
  BB_138571680162960: 1 successors, 0 preds
  BB_138571680165552: 1 successors, 2 preds
  BB_138571680163488: 1 successors, 0 preds
  BB_138571680164016: 1 successors, 2 preds
  BB_138571680163584: 1 successors, 0 preds
  BB_138571680164544: 1 successors, 2 preds
  BB_138571680162000: 1 successors, 0 preds
  BB_138571680162048: 1 successors, 2 preds
  BB_138571680189072: 1 successors, 0 preds
  BB_138571680190032: 1 successors, 2 preds
  BB_138571680190080: 1 successors, 0 preds
  BB_138571680189648: 1 successors, 2 preds
  BB_138571680189600: 1 successors, 0 preds
  BB_138571680189360: 1 successors, 2 preds
  BB_138571680188832: 1 successors, 0 preds
  BB_138571680188880: 1 successors, 2 preds
  BB_138571680188304: 1 successors, 0 preds
  BB_138571680188352: 1 successors, 1 preds
  Total blocks with successors: 46
  Total blocks with multiple successors: 0
Initial CFG constructed with 49 basic blocks.
DEBUG: Found 2 entry points
  - global: BB_138571680132928
  - square: BB_138571680188112
CFG graph saved to cfg_initial.dot

--- OPTIMIZATION: Attempting Loop Unrolling ---

--- Starting Loop Unrolling Pass (Factor: 2) ---
DEBUG: About to call debug_cfg_structure...

--- CFG Structure Debug ---
Total blocks: 49
Blocks with no predecessors: 18
Blocks with multiple successors: 0

*** Potential Back Edges ***
  POTENTIAL BACK EDGE: BB_138571680132928 -> BB_138571680132880 (target: auto label label2)
  POTENTIAL BACK EDGE: BB_138571680132832 -> BB_138571680130720 (target: auto label label1)
  POTENTIAL BACK EDGE: BB_138571680130144 -> BB_138571680130672 (target: auto label label4)
  POTENTIAL BACK EDGE: BB_138571680130048 -> BB_138571680130144 (target: auto label label3)
  POTENTIAL BACK EDGE: BB_138571680149712 -> BB_138571680151824 (target: auto label label6)
  POTENTIAL BACK EDGE: BB_138571680151872 -> BB_138571680149712 (target: auto label label5)
  POTENTIAL BACK EDGE: BB_138571680151920 -> BB_138571680152448 (target: auto label label10)
  POTENTIAL BACK EDGE: BB_138571680152352 -> BB_138571680152496 (target: auto label label8)
  POTENTIAL BACK EDGE: BB_138571680151968 -> BB_138571680152352 (target: auto label label7)
  POTENTIAL BACK EDGE: BB_138571680152496 -> BB_138571680151920 (target: auto label label9)
  POTENTIAL BACK EDGE: BB_138571680163152 -> BB_138571680165408 (target: auto label label13)
  POTENTIAL BACK EDGE: BB_138571680163248 -> BB_138571680163152 (target: auto label label11)
  POTENTIAL BACK EDGE: BB_138571680165456 -> BB_138571680165504 (target: auto label label16)
  POTENTIAL BACK EDGE: BB_138571680162960 -> BB_138571680165456 (target: auto label label14)
  POTENTIAL BACK EDGE: BB_138571680165552 -> BB_138571680163968 (target: auto label label19)
  POTENTIAL BACK EDGE: BB_138571680163488 -> BB_138571680165552 (target: auto label label17)
  POTENTIAL BACK EDGE: BB_138571680164016 -> BB_138571680164400 (target: auto label label22)
  POTENTIAL BACK EDGE: BB_138571680163584 -> BB_138571680164016 (target: auto label label20)
  POTENTIAL BACK EDGE: BB_138571680164544 -> BB_138571680164496 (target: auto label label25)
  POTENTIAL BACK EDGE: BB_138571680162000 -> BB_138571680164544 (target: auto label label23)
  POTENTIAL BACK EDGE: BB_138571680162048 -> BB_138571680189984 (target: auto label label28)
  POTENTIAL BACK EDGE: BB_138571680189072 -> BB_138571680162048 (target: auto label label26)
  POTENTIAL BACK EDGE: BB_138571680190032 -> BB_138571680190128 (target: auto label label31)
  POTENTIAL BACK EDGE: BB_138571680190080 -> BB_138571680190032 (target: auto label label29)
  POTENTIAL BACK EDGE: BB_138571680189648 -> BB_138571680189024 (target: auto label label34)
  POTENTIAL BACK EDGE: BB_138571680189600 -> BB_138571680189648 (target: auto label label32)
  POTENTIAL BACK EDGE: BB_138571680189360 -> BB_138571680188640 (target: auto label label37)
  POTENTIAL BACK EDGE: BB_138571680188832 -> BB_138571680189360 (target: auto label label35)
  POTENTIAL BACK EDGE: BB_138571680188880 -> BB_138571680188352 (target: auto label label40)
  POTENTIAL BACK EDGE: BB_138571680188304 -> BB_138571680188880 (target: auto label label38)
  POTENTIAL BACK EDGE: BB_138571680188352 -> BB_138571679802800 (target: auto label label41)
DEBUG: debug_cfg_structure completed
DEBUG: About to call _find_loops...
DEBUG: Starting loop detection...
DEBUG: Starting simple back edge detection...
DEBUG: Found potential back edge: BB_138571680132832 -> BB_138571680130720 (header with 2 preds)
DEBUG: Found potential back edge: BB_138571680130048 -> BB_138571680130144 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680130048 (idx 6) -> BB_138571680130144 (idx 4)
DEBUG: Found potential back edge: BB_138571680151872 -> BB_138571680149712 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680151872 (idx 9) -> BB_138571680149712 (idx 8)
DEBUG: Found back edge by position: BB_138571680151968 (idx 13) -> BB_138571680152352 (idx 12)
DEBUG: Found potential back edge: BB_138571680152496 -> BB_138571680151920 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680152496 (idx 14) -> BB_138571680151920 (idx 11)
DEBUG: Found potential back edge: BB_138571680163248 -> BB_138571680163152 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680163248 (idx 17) -> BB_138571680163152 (idx 16)
DEBUG: Found potential back edge: BB_138571680162960 -> BB_138571680165456 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680162960 (idx 20) -> BB_138571680165456 (idx 19)
DEBUG: Found potential back edge: BB_138571680163488 -> BB_138571680165552 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680163488 (idx 23) -> BB_138571680165552 (idx 22)
DEBUG: Found potential back edge: BB_138571680163584 -> BB_138571680164016 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680163584 (idx 26) -> BB_138571680164016 (idx 25)
DEBUG: Found potential back edge: BB_138571680162000 -> BB_138571680164544 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680162000 (idx 29) -> BB_138571680164544 (idx 28)
DEBUG: Found potential back edge: BB_138571680189072 -> BB_138571680162048 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680189072 (idx 32) -> BB_138571680162048 (idx 31)
DEBUG: Found potential back edge: BB_138571680190080 -> BB_138571680190032 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680190080 (idx 35) -> BB_138571680190032 (idx 34)
DEBUG: Found potential back edge: BB_138571680189600 -> BB_138571680189648 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680189600 (idx 38) -> BB_138571680189648 (idx 37)
DEBUG: Found potential back edge: BB_138571680188832 -> BB_138571680189360 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680188832 (idx 41) -> BB_138571680189360 (idx 40)
DEBUG: Found potential back edge: BB_138571680188304 -> BB_138571680188880 (header with 2 preds)
DEBUG: Found back edge by position: BB_138571680188304 (idx 44) -> BB_138571680188880 (idx 43)
DEBUG: Found potential back edge: BB_138571680188352 -> BB_138571679802800 (header with 2 preds)
DEBUG: Found 16 back edges using simple detection
DEBUG: Created simple loop with header BB_138571680130720
DEBUG: Created simple loop with header BB_138571680130144
DEBUG: Created simple loop with header BB_138571680149712
DEBUG: Created simple loop with header BB_138571680152352
DEBUG: Created simple loop with header BB_138571680151920
DEBUG: Created simple loop with header BB_138571680163152
DEBUG: Created simple loop with header BB_138571680165456
DEBUG: Created simple loop with header BB_138571680165552
DEBUG: Created simple loop with header BB_138571680164016
DEBUG: Created simple loop with header BB_138571680164544
DEBUG: Created simple loop with header BB_138571680162048
DEBUG: Created simple loop with header BB_138571680190032
DEBUG: Created simple loop with header BB_138571680189648
DEBUG: Created simple loop with header BB_138571680189360
DEBUG: Created simple loop with header BB_138571680188880
DEBUG: Created simple loop with header BB_138571679802800
   Loop detection complete. Found 16 unique loop header(s).
DEBUG: _find_loops completed
   Detected 16 initial loop(s). Analyzing for unrolling...
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680130720...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 138571680132832.
           Latch instr: reg int t10 <- global int x; _g_x: def byte 4 type: <class 'ir.LoadStat'>
           Latch instr: print reg int t10 type: <class 'ir.PrintCommand'>
           Latch instr: branch  to auto label label1 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 138571680130720 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680130144...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 138571680130048.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 138571680130048.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 138571680130144 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680149712...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 138571680151872.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 138571680151872.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 138571680149712 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680152352...
            UNROLL_DEBUG: Found LCV 'x' as plus 1 (three-address) in latch 138571680151968.
            UNROLL_DEBUG: Found LCV 'x' with step 1 in latch 138571680151968.
         UNROLL_DEBUG: Reject - LCV 'x' has no faked bounds for trip count.
      UNROLL_DEBUG: Loop 138571680152352 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680151920...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 138571680152496.
           Latch instr: label8: <class 'ir.EmptyStat'> 138571680071888 {
parent = 138571679814464
} type: <class 'ir.EmptyStat'>
           Latch instr: branch  to auto label label9 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 138571680151920 not suitable by analysis.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680163152...
            UNROLL_DEBUG: Found LCV 'a' as plus 1 (three-address) in latch 138571680163248.
            UNROLL_DEBUG: Found LCV 'a' with step 1 in latch 138571680163248.
            UNROLL_DEBUG: Using faked bounds for LCV 'a': start=10, end=20
      UNROLL_DEBUG: Loop header 138571680163152 (LCV 'a') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680165456...
            UNROLL_DEBUG: Found LCV 'i' as plus 1 (three-address) in latch 138571680162960.
            UNROLL_DEBUG: Found LCV 'i' with step 1 in latch 138571680162960.
            UNROLL_DEBUG: Using faked bounds for LCV 'i': start=0, end=10
      UNROLL_DEBUG: Loop header 138571680165456 (LCV 'i') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680165552...
            UNROLL_DEBUG: Found LCV 'j' as plus 1 (three-address) in latch 138571680163488.
            UNROLL_DEBUG: Found LCV 'j' with step 1 in latch 138571680163488.
            UNROLL_DEBUG: Using faked bounds for LCV 'j': start=0, end=5
      UNROLL_DEBUG: Loop header 138571680165552 (LCV 'j') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680164016...
            UNROLL_DEBUG: Found LCV 'k' as plus 1 (three-address) in latch 138571680163584.
            UNROLL_DEBUG: Found LCV 'k' with step 1 in latch 138571680163584.
            UNROLL_DEBUG: Using faked bounds for LCV 'k': start=0, end=3
      UNROLL_DEBUG: Loop header 138571680164016 (LCV 'k') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680164544...
            UNROLL_DEBUG: Found LCV 'm' as plus 1 (three-address) in latch 138571680162000.
            UNROLL_DEBUG: Found LCV 'm' with step 1 in latch 138571680162000.
            UNROLL_DEBUG: Using faked bounds for LCV 'm': start=1, end=6
      UNROLL_DEBUG: Loop header 138571680164544 (LCV 'm') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680162048...
            UNROLL_DEBUG: Found LCV 'n' as plus 1 (three-address) in latch 138571680189072.
            UNROLL_DEBUG: Found LCV 'n' with step 1 in latch 138571680189072.
            UNROLL_DEBUG: Using faked bounds for LCV 'n': start=1, end=7
      UNROLL_DEBUG: Loop header 138571680162048 (LCV 'n') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680190032...
            UNROLL_DEBUG: Found LCV 'p' as plus 1 (three-address) in latch 138571680190080.
            UNROLL_DEBUG: Found LCV 'p' with step 1 in latch 138571680190080.
            UNROLL_DEBUG: Using faked bounds for LCV 'p': start=10, end=12
      UNROLL_DEBUG: Loop header 138571680190032 (LCV 'p') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680189648...
            UNROLL_DEBUG: Found LCV 'q' as plus 1 (three-address) in latch 138571680189600.
            UNROLL_DEBUG: Found LCV 'q' with step 1 in latch 138571680189600.
            UNROLL_DEBUG: Using faked bounds for LCV 'q': start=1, end=5
      UNROLL_DEBUG: Loop header 138571680189648 (LCV 'q') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680189360...
            UNROLL_DEBUG: Found LCV 'r' as plus 1 (three-address) in latch 138571680188832.
            UNROLL_DEBUG: Found LCV 'r' with step 1 in latch 138571680188832.
            UNROLL_DEBUG: Using faked bounds for LCV 'r': start=1, end=3
      UNROLL_DEBUG: Loop header 138571680189360 (LCV 'r') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571680188880...
            UNROLL_DEBUG: Found LCV 'sm_idx' as plus 1 (three-address) in latch 138571680188304.
            UNROLL_DEBUG: Found LCV 'sm_idx' with step 1 in latch 138571680188304.
            UNROLL_DEBUG: Using faked bounds for LCV 'sm_idx': start=0, end=127
      UNROLL_DEBUG: Loop header 138571680188880 (LCV 'sm_idx') deemed SUITABLE for unrolling.
      UNROLL_DEBUG: Analyzing suitability for loop header 138571679802800...
         UNROLL_DEBUG: Reject - Could not find LCV increment/decrement pattern in latch 138571680188352.
           Latch instr: label40: <class 'ir.EmptyStat'> 138571680306560 {
parent = 138571679814464
} type: <class 'ir.EmptyStat'>
           Latch instr: reg int t267 <- 127 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int t268 <- 0 type: <class 'ir.LoadImmStat'>
           Latch instr: reg int32_t t269 <- reg int t267 geq reg int t268 type: <class 'ir.BinStat'>
           Latch instr: branch on not reg int32_t t269 to auto label label41 type: <class 'ir.BranchStat'>
      UNROLL_DEBUG: Loop 138571679802800 not suitable by analysis.
   Found 10 suitable loop(s) for unrolling!
   UNROLL_PATCH: Loop over 'm' has been unrolled by factor 2!
--- Loop Unrolling Pass Complete ---

--- CFG After Attempting Unrolling ---
DEBUG: Found 2 entry points
  - global: BB_138571680132928
  - square: BB_138571680188112
CFG graph saved to cfg_after_unrolling_attempt.dot

--- Performing Liveness Analysis (on potentially modified CFG) ---
--- Starting Liveness Analysis ---
Liveness converged in 4 iter.
--- Liveness Analysis Complete ---
DEBUG: Found 2 entry points
  - global: BB_138571680132928
  - square: BB_138571680188112
CFG graph saved to cfg_final_with_liveness.dot

--- Performing Register Allocation ---
LIVENESS INTERVALS:
[]

--- Register Allocation Map ---
vartoreg = {}

--- Generating Code ---

--- Generated Assembly Code ---
	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_y, 4
	.comm _g_squ, 4
	.comm _g_arr, 5
	.comm _g_multid, 50
	.comm _g_i, 4
	.comm _g_j, 4
	.comm _g_k, 4
	.comm _g_m, 4
	.comm _g_n, 4
	.comm _g_p, 4
	.comm _g_q, 4
	.comm _g_sum, 4
	.comm _g_r, 4
	.comm _g_sm_idx, 4
	.comm _g_sm_source_arr, 512
	.comm _g_sm_dest_arr, 512
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 138571679814464 type <class 'ir.StatList'>
	@ node 138571680253648 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 138571680253552 did not generate any code
	@ exc: KeyError(reg int t0)
	@ node 138571679814704 did not generate any code
	@ exc: KeyError(reg int t1)
	@ node 138571679814608 did not generate any code
	@ exc: KeyError(reg int t2)
	@ node 138571679814800 did not generate any code
	@ exc: KeyError(reg int t2)
	@ node 138571679815568 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 138571679814944 did not generate any code
	@ exc: KeyError(reg int t7)
	@ node 138571680254512 did not generate any code
	@ exc: KeyError(reg int t6)
	@ node 138571680255376 did not generate any code
	@ exc: KeyError(reg int32_t t8)
	@ node 138571680255088 did not generate any code
	@ exc: KeyError(reg int t10)
	@ node 138571680255184 did not generate any code
	@ exc: KeyError(reg int t10)
	b label1
label2:
	@ emptystat
	@ node 138571680253888 did not generate any code
	@ exc: KeyError(reg int t3)
	@ node 138571679815520 did not generate any code
	@ exc: KeyError(reg int t3)
	@ node 138571680254368 did not generate any code
	@ exc: KeyError(reg int t5)
label1:
	@ emptystat
	@ node 138571680255712 did not generate any code
	@ exc: KeyError(reg int t11)
	@ node 138571679815952 did not generate any code
	@ exc: KeyError(reg int t11)
label3:
	@ emptystat
	@ node 138571679816960 did not generate any code
	@ exc: KeyError(reg int t17)
	@ node 138571679816096 did not generate any code
	@ exc: KeyError(reg int t18)
	@ node 138571680093184 did not generate any code
	@ exc: KeyError(reg int t17)
	@ node 138571680093664 did not generate any code
	@ exc: KeyError(reg int32_t t19)
	push {r0, r1, r2, r3}
	bl square
	pop {r0, r1, r2, r3}
	@ node 138571680092224 did not generate any code
	@ exc: KeyError(reg int t12)
	@ node 138571679816672 did not generate any code
	@ exc: KeyError(reg int t13)
	@ node 138571680092368 did not generate any code
	@ exc: KeyError(reg int t12)
	@ node 138571679816864 did not generate any code
	@ exc: KeyError(reg int32_t t14)
	@ node 138571680092896 did not generate any code
	@ exc: KeyError(reg int t16)
	@ node 138571680092992 did not generate any code
	@ exc: KeyError(reg int t16)
	b label3
label4:
	@ emptystat
	@ node 138571680093904 did not generate any code
	@ exc: KeyError(reg int t20)
	@ node 138571679817248 did not generate any code
	@ exc: KeyError(reg int t20)
label5:
	@ emptystat
	@ node 138571680274032 did not generate any code
	@ exc: KeyError(reg int t44)
	@ node 138571679817392 did not generate any code
	@ exc: KeyError(reg int t45)
	@ node 138571680245888 did not generate any code
	@ exc: KeyError(reg int t44)
	@ node 138571680246272 did not generate any code
	@ exc: KeyError(reg int32_t t46)
	@ node 138571680094096 did not generate any code
	@ exc: KeyError(reg int t21)
	@ node 138571680094240 did not generate any code
	@ exc: KeyError(reg int t22)
	@ node 138571680275088 did not generate any code
	@ exc: KeyError(reg int t23)
	@ node 138571680094432 did not generate any code
	@ exc: KeyError(reg int t22)
	@ node 138571680275520 did not generate any code
	@ exc: KeyError(reg int t25)
	@ node 138571680094816 did not generate any code
	@ exc: KeyError(reg int32_t t24)
	@ node 138571680275328 did not generate any code
	@ exc: KeyError(reg &char t27)
	@ node 138571680095152 did not generate any code
	@ exc: KeyError(reg &char t27)
	@ node 138571680095200 did not generate any code
	@ exc: KeyError(reg &char t28)
	@ node 138571680095440 did not generate any code
	@ exc: KeyError(reg int t29)
	@ node 138571680275712 did not generate any code
	@ exc: KeyError(reg int t30)
	@ node 138571680095776 did not generate any code
	@ exc: KeyError(reg int t29)
	@ node 138571680275856 did not generate any code
	@ exc: KeyError(reg int t32)
	@ node 138571680243920 did not generate any code
	@ exc: KeyError(reg int32_t t31)
	@ node 138571680244592 did not generate any code
	@ exc: KeyError(reg &char t39)
	@ node 138571680244832 did not generate any code
	@ exc: KeyError(reg &char t39)
	@ node 138571680244880 did not generate any code
	@ exc: KeyError(reg &char t40)
	@ node 138571680245024 did not generate any code
	@ exc: KeyError(reg char t38)
	@ node 138571680245264 did not generate any code
	@ exc: KeyError(reg int t41)
	@ node 138571680276336 did not generate any code
	@ exc: KeyError(reg int t42)
	@ node 138571680245456 did not generate any code
	@ exc: KeyError(reg int t41)
	@ node 138571680274752 did not generate any code
	@ exc: KeyError(reg int32_t t43)
	b label5
label6:
	@ emptystat
	@ node 138571680246512 did not generate any code
	@ exc: KeyError(reg int t47)
	@ node 138571680273840 did not generate any code
	@ exc: KeyError(reg int t47)
	@ node 138571680246704 did not generate any code
	@ exc: KeyError(reg int t48)
	@ node 138571680273696 did not generate any code
	@ exc: KeyError(reg int t48)
label9:
	@ emptystat
	@ node 138571680188688 did not generate any code
	@ exc: KeyError(reg int t88)
	@ node 138571680273216 did not generate any code
	@ exc: KeyError(reg int t89)
	@ node 138571680188784 did not generate any code
	@ exc: KeyError(reg int t88)
	@ node 138571680189168 did not generate any code
	@ exc: KeyError(reg int32_t t90)
label7:
	@ emptystat
	@ node 138571680187920 did not generate any code
	@ exc: KeyError(reg int t85)
	@ node 138571680272448 did not generate any code
	@ exc: KeyError(reg int t86)
	@ node 138571680188064 did not generate any code
	@ exc: KeyError(reg int t85)
	@ node 138571680188448 did not generate any code
	@ exc: KeyError(reg int32_t t87)
	@ node 138571680246896 did not generate any code
	@ exc: KeyError(reg int t49)
	@ node 138571680073760 did not generate any code
	@ exc: KeyError(reg int t50)
	@ node 138571680247568 did not generate any code
	@ exc: KeyError(reg int t49)
	@ node 138571680235632 did not generate any code
	@ exc: KeyError(reg &char t54)
	@ node 138571680235824 did not generate any code
	@ exc: KeyError(reg &char t54)
	@ node 138571680235872 did not generate any code
	@ exc: KeyError(reg &char t55)
	@ node 138571680236016 did not generate any code
	@ exc: KeyError(reg int t56)
	@ node 138571680071936 did not generate any code
	@ exc: KeyError(reg int t57)
	@ node 138571680236208 did not generate any code
	@ exc: KeyError(reg int t56)
	@ node 138571680074096 did not generate any code
	@ exc: KeyError(reg int t59)
	@ node 138571680071744 did not generate any code
	@ exc: KeyError(reg int t60)
	@ node 138571680236640 did not generate any code
	@ exc: KeyError(reg int t59)
	@ node 138571680236976 did not generate any code
	@ exc: KeyError(reg int32_t t58)
	@ node 138571680073952 did not generate any code
	@ exc: KeyError(reg &short t63)
	@ node 138571680237216 did not generate any code
	@ exc: KeyError(reg &short t63)
	@ node 138571680237264 did not generate any code
	@ exc: KeyError(reg &short t64)
	@ node 138571680237504 did not generate any code
	@ exc: KeyError(reg int t65)
	@ node 138571680073376 did not generate any code
	@ exc: KeyError(reg int t66)
	@ node 138571680237840 did not generate any code
	@ exc: KeyError(reg int t65)
	@ node 138571680072992 did not generate any code
	@ exc: KeyError(reg int t68)
	@ node 138571680073136 did not generate any code
	@ exc: KeyError(reg int t69)
	@ node 138571680238272 did not generate any code
	@ exc: KeyError(reg int t68)
	@ node 138571680237600 did not generate any code
	@ exc: KeyError(reg int32_t t67)
	@ node 138571680239472 did not generate any code
	@ exc: KeyError(reg &short t77)
	@ node 138571680186480 did not generate any code
	@ exc: KeyError(reg &short t77)
	@ node 138571680186528 did not generate any code
	@ exc: KeyError(reg &short t78)
	@ node 138571680186672 did not generate any code
	@ exc: KeyError(reg short t76)
	@ node 138571680186912 did not generate any code
	@ exc: KeyError(reg int t79)
	@ node 138571680072464 did not generate any code
	@ exc: KeyError(reg int t80)
	@ node 138571680187104 did not generate any code
	@ exc: KeyError(reg int t79)
	@ node 138571680074288 did not generate any code
	@ exc: KeyError(reg int32_t t81)
	@ node 138571680187440 did not generate any code
	@ exc: KeyError(reg int t82)
	@ node 138571680074432 did not generate any code
	@ exc: KeyError(reg int t83)
	@ node 138571680187584 did not generate any code
	@ exc: KeyError(reg int t82)
	@ node 138571680074624 did not generate any code
	@ exc: KeyError(reg int32_t t84)
	b label7
label8:
	@ emptystat
	b label9
label10:
	@ emptystat
	@ irnode 138571680075680 type <class 'ir.AssignStat'>
label11:
	@ emptystat
	@ node 138571680190368 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680075200 did not generate any code
	@ exc: KeyError(reg int t97)
	@ node 138571680161952 did not generate any code
	@ exc: KeyError(reg int t96)
	@ node 138571680162384 did not generate any code
	@ exc: KeyError(reg int32_t t98)
	@ node 138571680189216 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680189744 did not generate any code
	@ exc: KeyError(reg int t92)
	@ node 138571680075488 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680075344 did not generate any code
	@ exc: KeyError(reg int t94)
	@ node 138571680189936 did not generate any code
	@ exc: KeyError(reg int t93)
	@ node 138571680534240 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label11
label13:
	@ emptystat
	@ node 138571680162336 did not generate any code
	@ exc: KeyError(reg int t99)
	@ node 138571680534432 did not generate any code
	@ exc: KeyError(reg int t99)
	@ node 138571680162624 did not generate any code
	@ exc: KeyError(reg int t101)
	@ node 138571680163104 did not generate any code
	@ exc: KeyError(reg int t101)
	@ irnode 138571680533184 type <class 'ir.AssignStat'>
label14:
	@ emptystat
	@ node 138571680164256 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680533088 did not generate any code
	@ exc: KeyError(reg int t108)
	@ node 138571680164448 did not generate any code
	@ exc: KeyError(reg int t107)
	@ node 138571680239184 did not generate any code
	@ exc: KeyError(reg int32_t t109)
	@ node 138571680163536 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 138571680163632 did not generate any code
	@ exc: KeyError(reg int t103)
	@ node 138571680533376 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680532896 did not generate any code
	@ exc: KeyError(reg int t105)
	@ node 138571680163824 did not generate any code
	@ exc: KeyError(reg int t104)
	@ node 138571680532704 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label14
label16:
	@ emptystat
	@ node 138571680238896 did not generate any code
	@ exc: KeyError(reg int t111)
	@ node 138571680238608 did not generate any code
	@ exc: KeyError(reg int t111)
	@ node 138571680247184 did not generate any code
	@ exc: KeyError(reg int t113)
	@ node 138571680244352 did not generate any code
	@ exc: KeyError(reg int t113)
	@ irnode 138571680531648 type <class 'ir.AssignStat'>
label17:
	@ emptystat
	@ node 138571679816528 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680275952 did not generate any code
	@ exc: KeyError(reg int t120)
	@ node 138571680531600 did not generate any code
	@ exc: KeyError(reg int t119)
	@ node 138571680531360 did not generate any code
	@ exc: KeyError(reg int32_t t121)
	@ node 138571680244304 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 138571680096112 did not generate any code
	@ exc: KeyError(reg int t115)
	@ node 138571680092704 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680254128 did not generate any code
	@ exc: KeyError(reg int t117)
	@ node 138571679816768 did not generate any code
	@ exc: KeyError(reg int t116)
	@ node 138571679815328 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label17
label19:
	@ emptystat
	@ node 138571680531456 did not generate any code
	@ exc: KeyError(reg int t123)
	@ node 138571680533520 did not generate any code
	@ exc: KeyError(reg int t123)
	@ node 138571680072896 did not generate any code
	@ exc: KeyError(reg int t125)
	@ node 138571680073712 did not generate any code
	@ exc: KeyError(reg int t125)
	@ irnode 138571680432720 type <class 'ir.AssignStat'>
label20:
	@ emptystat
	@ node 138571680165792 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680432816 did not generate any code
	@ exc: KeyError(reg int t134)
	@ node 138571680149664 did not generate any code
	@ exc: KeyError(reg int t133)
	@ node 138571680150096 did not generate any code
	@ exc: KeyError(reg int32_t t135)
	@ node 138571680163392 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 138571680162768 did not generate any code
	@ exc: KeyError(reg int t127)
	@ node 138571680165072 did not generate any code
	@ exc: KeyError(reg int t129)
	@ node 138571680165168 did not generate any code
	@ exc: KeyError(reg int t129)
	@ node 138571680432528 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680433056 did not generate any code
	@ exc: KeyError(reg int t131)
	@ node 138571680165360 did not generate any code
	@ exc: KeyError(reg int t130)
	@ node 138571680433248 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label20
label22:
	@ emptystat
	@ node 138571680150480 did not generate any code
	@ exc: KeyError(reg int t137)
	@ node 138571680150576 did not generate any code
	@ exc: KeyError(reg int t137)
	@ node 138571680150960 did not generate any code
	@ exc: KeyError(reg int t139)
	@ node 138571680151056 did not generate any code
	@ exc: KeyError(reg int t139)
	@ irnode 138571680436080 type <class 'ir.AssignStat'>
label23:
	@ emptystat
	@ node 138571680152208 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680435984 did not generate any code
	@ exc: KeyError(reg int t146)
	@ node 138571680152400 did not generate any code
	@ exc: KeyError(reg int t145)
	@ node 138571680152832 did not generate any code
	@ exc: KeyError(reg int32_t t147)
	@ node 138571680151488 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 138571680151584 did not generate any code
	@ exc: KeyError(reg int t141)
	@ node 138571680434160 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680435792 did not generate any code
	@ exc: KeyError(reg int t143)
	@ node 138571680151776 did not generate any code
	@ exc: KeyError(reg int t142)
	@ node 138571680435600 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label23
label25:
	@ emptystat
	@ node 138571680153216 did not generate any code
	@ exc: KeyError(reg int t149)
	@ node 138571680153312 did not generate any code
	@ exc: KeyError(reg int t149)
	@ node 138571680129184 did not generate any code
	@ exc: KeyError(reg int t151)
	@ node 138571680129280 did not generate any code
	@ exc: KeyError(reg int t151)
	@ irnode 138571680434544 type <class 'ir.AssignStat'>
label26:
	@ emptystat
	@ node 138571680130432 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680434448 did not generate any code
	@ exc: KeyError(reg int t158)
	@ node 138571680130624 did not generate any code
	@ exc: KeyError(reg int t157)
	@ node 138571680131056 did not generate any code
	@ exc: KeyError(reg int32_t t159)
	@ node 138571680129712 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 138571680129808 did not generate any code
	@ exc: KeyError(reg int t153)
	@ node 138571680434736 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680434256 did not generate any code
	@ exc: KeyError(reg int t155)
	@ node 138571680130000 did not generate any code
	@ exc: KeyError(reg int t154)
	@ node 138571680346512 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label26
label28:
	@ emptystat
	@ node 138571680131440 did not generate any code
	@ exc: KeyError(reg int t161)
	@ node 138571680131536 did not generate any code
	@ exc: KeyError(reg int t161)
	@ node 138571680131920 did not generate any code
	@ exc: KeyError(reg int t163)
	@ node 138571680132016 did not generate any code
	@ exc: KeyError(reg int t163)
	@ irnode 138571680347376 type <class 'ir.AssignStat'>
label29:
	@ emptystat
	@ node 138571679801456 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680347616 did not generate any code
	@ exc: KeyError(reg int t170)
	@ node 138571679801648 did not generate any code
	@ exc: KeyError(reg int t169)
	@ node 138571679802080 did not generate any code
	@ exc: KeyError(reg int32_t t171)
	@ node 138571680132448 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 138571680132544 did not generate any code
	@ exc: KeyError(reg int t165)
	@ node 138571680347088 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680347664 did not generate any code
	@ exc: KeyError(reg int t167)
	@ node 138571680132736 did not generate any code
	@ exc: KeyError(reg int t166)
	@ node 138571680348048 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label29
label31:
	@ emptystat
	@ node 138571679802464 did not generate any code
	@ exc: KeyError(reg int t173)
	@ node 138571679802560 did not generate any code
	@ exc: KeyError(reg int t173)
	@ node 138571680347952 did not generate any code
	@ exc: KeyError(reg int t174)
	@ node 138571680348240 did not generate any code
	@ exc: KeyError(reg int t174)
	@ node 138571679803136 did not generate any code
	@ exc: KeyError(reg int t176)
	@ node 138571679803232 did not generate any code
	@ exc: KeyError(reg int t176)
	@ irnode 138571680349584 type <class 'ir.AssignStat'>
label32:
	@ emptystat
	@ node 138571679805504 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680350160 did not generate any code
	@ exc: KeyError(reg int t188)
	@ node 138571679805648 did not generate any code
	@ exc: KeyError(reg int t187)
	@ node 138571679806080 did not generate any code
	@ exc: KeyError(reg int32_t t189)
	@ node 138571679803472 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 138571680348864 did not generate any code
	@ exc: KeyError(reg int t178)
	@ node 138571679803616 did not generate any code
	@ exc: KeyError(reg int t177)
	@ node 138571680349152 did not generate any code
	@ exc: KeyError(reg int32_t t179)
	@ node 138571679804192 did not generate any code
	@ exc: KeyError(reg int t181)
	@ node 138571679804288 did not generate any code
	@ exc: KeyError(reg int t181)
	@ node 138571679804672 did not generate any code
	@ exc: KeyError(reg int t183)
	@ node 138571679804768 did not generate any code
	@ exc: KeyError(reg int t183)
	@ node 138571680349248 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680349968 did not generate any code
	@ exc: KeyError(reg int t185)
	@ node 138571679804960 did not generate any code
	@ exc: KeyError(reg int t184)
	@ node 138571680349776 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label32
label34:
	@ emptystat
	@ node 138571679806464 did not generate any code
	@ exc: KeyError(reg int t191)
	@ node 138571679806560 did not generate any code
	@ exc: KeyError(reg int t191)
	@ node 138571679806944 did not generate any code
	@ exc: KeyError(reg int t193)
	@ node 138571679807040 did not generate any code
	@ exc: KeyError(reg int t193)
	@ node 138571680771376 did not generate any code
	@ exc: KeyError(reg int t194)
	@ node 138571680771568 did not generate any code
	@ exc: KeyError(reg int t194)
	@ node 138571679807616 did not generate any code
	@ exc: KeyError(reg int t196)
	@ node 138571679807712 did not generate any code
	@ exc: KeyError(reg int t196)
	@ irnode 138571680770512 type <class 'ir.AssignStat'>
label35:
	@ emptystat
	@ node 138571679809392 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680770368 did not generate any code
	@ exc: KeyError(reg int t206)
	@ node 138571679842416 did not generate any code
	@ exc: KeyError(reg int t205)
	@ node 138571679842848 did not generate any code
	@ exc: KeyError(reg int32_t t207)
	@ node 138571679807952 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 138571680771136 did not generate any code
	@ exc: KeyError(reg int t198)
	@ node 138571679808096 did not generate any code
	@ exc: KeyError(reg int t197)
	@ node 138571680770944 did not generate any code
	@ exc: KeyError(reg int32_t t199)
	@ node 138571679808672 did not generate any code
	@ exc: KeyError(reg int t201)
	@ node 138571679808768 did not generate any code
	@ exc: KeyError(reg int t201)
	@ node 138571680770704 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680305360 did not generate any code
	@ exc: KeyError(reg int t203)
	@ node 138571679808960 did not generate any code
	@ exc: KeyError(reg int t202)
	@ node 138571680305552 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label35
label37:
	@ emptystat
	@ node 138571679843232 did not generate any code
	@ exc: KeyError(reg int t209)
	@ node 138571679843328 did not generate any code
	@ exc: KeyError(reg int t209)
	@ node 138571679843712 did not generate any code
	@ exc: KeyError(reg int t211)
	@ node 138571679843808 did not generate any code
	@ exc: KeyError(reg int t211)
	@ node 138571679844192 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 138571679844288 did not generate any code
	@ exc: KeyError(reg int t213)
	@ node 138571680306128 did not generate any code
	@ exc: KeyError(reg int t214)
	@ node 138571680306320 did not generate any code
	@ exc: KeyError(reg int t214)
	@ irnode 138571680288528 type <class 'ir.AssignStat'>
label38:
	@ emptystat
	@ node 138571679868336 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680307664 did not generate any code
	@ exc: KeyError(reg int t233)
	@ node 138571679868528 did not generate any code
	@ exc: KeyError(reg int t232)
	@ node 138571679868960 did not generate any code
	@ exc: KeyError(reg int32_t t234)
	@ node 138571679844672 did not generate any code
	@ exc: KeyError(reg int t215)
	@ node 138571680307088 did not generate any code
	@ exc: KeyError(reg int t216)
	@ node 138571679845392 did not generate any code
	@ exc: KeyError(reg int t215)
	@ node 138571679845680 did not generate any code
	@ exc: KeyError(reg &int t220)
	@ node 138571679845872 did not generate any code
	@ exc: KeyError(reg &int t220)
	@ node 138571679845920 did not generate any code
	@ exc: KeyError(reg &int t221)
	@ node 138571680307280 did not generate any code
	@ exc: KeyError(reg int t222)
	@ node 138571679846064 did not generate any code
	@ exc: KeyError(reg int t219)
	@ node 138571679866944 did not generate any code
	@ exc: KeyError(reg int t224)
	@ node 138571680306800 did not generate any code
	@ exc: KeyError(reg int t225)
	@ node 138571679867088 did not generate any code
	@ exc: KeyError(reg int t224)
	@ node 138571680306896 did not generate any code
	@ exc: KeyError(reg &int t227)
	@ node 138571679867568 did not generate any code
	@ exc: KeyError(reg &int t227)
	@ node 138571679867616 did not generate any code
	@ exc: KeyError(reg &int t228)
	@ node 138571679867856 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	@ node 138571680307856 did not generate any code
	@ exc: KeyError(reg int t230)
	@ node 138571679868000 did not generate any code
	@ exc: KeyError(reg int t229)
	@ node 138571680308048 did not generate any code
	@ exc: AttributeError("'NoneType' object has no attribute 'symname'")
	b label38
label40:
	@ emptystat
	@ node 138571679904528 did not generate any code
	@ exc: KeyError(reg int t267)
	@ node 138571680308240 did not generate any code
	@ exc: KeyError(reg int t268)
	@ node 138571679904672 did not generate any code
	@ exc: KeyError(reg int t267)
	@ node 138571680308336 did not generate any code
	@ exc: KeyError(reg int32_t t269)
	@ node 138571679869248 did not generate any code
	@ exc: KeyError(reg int t236)
	@ node 138571679869488 did not generate any code
	@ exc: KeyError(reg int t236)
	@ node 138571679869728 did not generate any code
	@ exc: KeyError(reg int t237)
	@ node 138571680308864 did not generate any code
	@ exc: KeyError(reg int t238)
	@ node 138571679870304 did not generate any code
	@ exc: KeyError(reg int t237)
	@ node 138571679891568 did not generate any code
	@ exc: KeyError(reg &int t245)
	@ node 138571679891760 did not generate any code
	@ exc: KeyError(reg &int t245)
	@ node 138571679891808 did not generate any code
	@ exc: KeyError(reg &int t246)
	@ node 138571679891952 did not generate any code
	@ exc: KeyError(reg int t244)
	@ node 138571679892192 did not generate any code
	@ exc: KeyError(reg int t247)
	@ node 138571680252064 did not generate any code
	@ exc: KeyError(reg int t248)
	@ node 138571679892864 did not generate any code
	@ exc: KeyError(reg int t247)
	@ node 138571679892144 did not generate any code
	@ exc: KeyError(reg &int t255)
	@ node 138571679893776 did not generate any code
	@ exc: KeyError(reg &int t255)
	@ node 138571679893824 did not generate any code
	@ exc: KeyError(reg &int t256)
	@ node 138571679893968 did not generate any code
	@ exc: KeyError(reg int t254)
	@ node 138571679894256 did not generate any code
	@ exc: KeyError(reg int t257)
	@ node 138571680252544 did not generate any code
	@ exc: KeyError(reg int t258)
	@ node 138571679894928 did not generate any code
	@ exc: KeyError(reg int t257)
	@ node 138571679903952 did not generate any code
	@ exc: KeyError(reg &int t265)
	@ node 138571679904096 did not generate any code
	@ exc: KeyError(reg &int t265)
	@ node 138571679904144 did not generate any code
	@ exc: KeyError(reg &int t266)
	@ node 138571679904288 did not generate any code
	@ exc: KeyError(reg int t264)
label41:
	@ emptystat
	@ node 138571679905344 did not generate any code
	@ exc: KeyError(reg int t271)
	@ node 138571679905440 did not generate any code
	@ exc: KeyError(reg int t271)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

square:
@ block
	.equ _l_square_test, -4
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #4
	@ irnode 138571679813696 type <class 'ir.StatList'>
	@ node 138571679905680 did not generate any code
	@ exc: KeyError(reg int t272)
	@ node 138571679813936 did not generate any code
	@ exc: KeyError(reg int t272)
	@ node 138571679905872 did not generate any code
	@ exc: KeyError(reg int t273)
	@ node 138571679814128 did not generate any code
	@ exc: KeyError(reg int t274)
	@ node 138571679906064 did not generate any code
	@ exc: KeyError(reg int t273)
	@ node 138571679814272 did not generate any code
	@ exc: KeyError(reg int32_t t275)
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr

--- Compilation Complete ---
